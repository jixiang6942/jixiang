import{_ as a,o as s,c as e,a as i}from"./app-382cdfb3.js";const t="/jixiang/assets/image-20241002172655452-7fc71b91.png",n="/jixiang/assets/image-20241002172713591-3ba30be9.png",p="/jixiang/assets/image-20241002172738339-dd3101b1.png",r="/jixiang/assets/image-20241002172810576-362b98a6.png",g="/jixiang/assets/image-20241002172832982-4c064889.png",c="/jixiang/assets/image-20241002174224791-7e337287.png",m="/jixiang/assets/image-20241002174249441-122188e4.png",o="/jixiang/assets/image-20241002174307084-cc07cce0.png",d="/jixiang/assets/image-20241002174326191-fdb8bb23.png",_="/jixiang/assets/image-20241002174345033-d39e0e90.png",l="/jixiang/assets/image-20241002224545234-ae78edb8.png",u="/jixiang/assets/image-20241002224609070-4b7d8cb6.png",x="/jixiang/assets/image-20241002224857860-4889f3f5.png",h="/jixiang/assets/image-20241002230137264-25c4225b.png",b="/jixiang/assets/image-20241002231837766-9af10fcf.png",j="/jixiang/assets/image-20241002233724225-fa25f00d.png",f="/jixiang/assets/image-20241003083957524-990ef399.png",k="/jixiang/assets/image-20241003084507750-4a6f2a9c.png",v="/jixiang/assets/image-20241003085027812-b0c7e987.png",R="/jixiang/assets/image-20241003100003682-c0ff1897.png",y="/jixiang/assets/image-20241003100336013-a8d064b6.png",w="/jixiang/assets/image-20241003101451581-e27c996d.png",A="/jixiang/assets/image-20241003124451610-aaf88130.png",S="/jixiang/assets/image-20241003125327514-ddb8aa98.png",B="/jixiang/assets/image-20241003125411064-6aa3866e.png",E="/jixiang/assets/image-20241003142841339-d3d0ff41.png",T="/jixiang/assets/image-20241003142913973-2087853f.png",q="/jixiang/assets/image-20241003143624923-3f60b943.png",C="/jixiang/assets/image-20241003143656498-143b892d.png",H="/jixiang/assets/image-20241003143725037-ec6ffcc2.png",M="/jixiang/assets/image-20241003150327995-1d22bbfd.png",D="/jixiang/assets/image-20241003150351575-362b8595.png",O="/jixiang/assets/image-20241003150706990-1cc78b67.png",N="/jixiang/assets/image-20241003151245398-15f48ae2.png",P="/jixiang/assets/image-20241003173916717-7a46105f.png",I="/jixiang/assets/image-20241003173956844-56ca1dd5.png",V="/jixiang/assets/image-20241003180858745-326a1708.png",X="/jixiang/assets/image-20241003181016071-a577daeb.png",z="/jixiang/assets/image-20241003181125166-f0000bca.png",G="/jixiang/assets/image-20241003181244536-34882414.png",K="/jixiang/assets/image-20241003214900062-59c20b15.png",L="/jixiang/assets/image-20241003214948571-2992fed2.png",U="/jixiang/assets/image-20241003223150925-885bec6b.png",F="/jixiang/assets/image-20241003231442979-0c4a64ec.png",J="/jixiang/assets/image-20241003231633992-22947530.png",Q="/jixiang/assets/image-20241004001454861-c2807b08.png",W="/jixiang/assets/image-20241004001647084-665e3376.png",Y="/jixiang/assets/image-20241003143755529-86168485.png",Z="/jixiang/assets/image-20241004110914636-8acc8b50.png",$="/jixiang/assets/image-20241004111311471-1827407d.png",aa="/jixiang/assets/image-20241004111423862-9420b6dc.png",sa="/jixiang/assets/image-20241004111929882-b3692793.png",ea="/jixiang/assets/image-20241004112339231-4262f905.png",ia="/jixiang/assets/image-20241004112423722-1312f97a.png",ta="/jixiang/assets/image-20241003143827250-c233950d.png",na="/jixiang/assets/image-20241004191212977-7f1fd1ee.png",pa="/jixiang/assets/image-20241004191245813-23101dcf.png",ra="/jixiang/assets/image-20241004152732851-d15c6603.png",ga="/jixiang/assets/image-20241004155649452-ac7abaa1.png",ca="/jixiang/assets/image-20241004161511349-afb27d6f.png",ma="/jixiang/assets/image-20241004162324414-3346b974.png",oa="/jixiang/assets/image-20241004162420868-c0243ebf.png",da="/jixiang/assets/image-20241004190342548-2d4aa3d7.png",_a="/jixiang/assets/image-20241004202321374-0c72b4e2.png",la="/jixiang/assets/image-20241004202659626-ac6a55ec.png",ua="/jixiang/assets/image-20241004202859112-d67a0dc4.png",xa="/jixiang/assets/image-20241004202929896-b220a210.png",ha="/jixiang/assets/image-20241004203545012-271056b3.png",ba="/jixiang/assets/image-20241004203621337-cd731dbc.png",ja="/jixiang/assets/image-20241004203653138-79668034.png",fa="/jixiang/assets/image-20241004204433645-d682f65c.png",ka="/jixiang/assets/image-20241004211830450-8599893f.png",va="/jixiang/assets/image-20241004211944104-e3147a51.png",Ra="/jixiang/assets/image-20241004212257458-e4aaeb9f.png",ya="/jixiang/assets/image-20241004212507560-fe72a846.png",wa="/jixiang/assets/image-20241004213342099-8421be98.png",Aa="/jixiang/assets/image-20241004215947976-43e754a8.png",Sa="/jixiang/assets/image-20241004220110468-45f52039.png",Ba="/jixiang/assets/image-20241004220238495-72d7b1b4.png",Ea="/jixiang/assets/image-20241004220338409-69b8263b.png",Ta="/jixiang/assets/image-20241004220536287-b146b3ab.png",qa="/jixiang/assets/image-20241004221345517-8cbf5d64.png",Ca="/jixiang/assets/image-20241004224634649-2eb91438.png",Ha="/jixiang/assets/image-20241004224847823-85531db3.png",Ma="/jixiang/assets/image-20241004231024064-39ac98d4.png",Da="/jixiang/assets/image-20241004234829859-a00f4f2b.png",Oa="/jixiang/assets/image-20241004231140789-c4f8d55c.png",Na="/jixiang/assets/image-20241005123957886-7a63891c.png",Pa="/jixiang/assets/image-20241005124700094-5fda7b5b.png",Ia="/jixiang/assets/image-20241005124330713-2740051b.png",Va="/jixiang/assets/image-20241005140405646-46cf5192.png",Xa="/jixiang/assets/image-20241005141848396-1669895a.png",za="/jixiang/assets/image-20241005142212650-3a9a6948.png",Ga="/jixiang/assets/image-20241005142341921-86c6e724.png",Ka="/jixiang/assets/image-20241005142454491-0390e500.png",La="/jixiang/assets/image-20241005155325336-58974881.png",Ua="/jixiang/assets/image-20241005155822826-2ff7a0d4.png",Fa="/jixiang/assets/image-20241005160028324-4c55ccfb.png",Ja="/jixiang/assets/image-20241005115852985-73d453e0.png",Qa="/jixiang/assets/image-20241005115925376-cfc16aab.png",Wa="/jixiang/assets/image-20241005084009300-c6313b70.png",Ya="/jixiang/assets/image-20241005224055544-4977b983.png",Za="/jixiang/assets/image-20241005224346659-39b657fb.png",$a="/jixiang/assets/image-20241005224442428-e727ab76.png",as="/jixiang/assets/image-20241006075215168-8102effe.png",ss="/jixiang/assets/image-20241006093300375-a9511c36.png",es="/jixiang/assets/image-20241006094143066-b9ef21a6.png",is="/jixiang/assets/image-20241006105118304-2f406c7d.png",ts="/jixiang/assets/image-20241006105248506-098d87bb.png",ns="/jixiang/assets/image-20241006110607703-c31011ce.png",ps="/jixiang/assets/image-20241006111407818-8e3c9e86.png",rs="/jixiang/assets/image-20241006112016779-041e8a36.png",gs="/jixiang/assets/image-20241006112407057-72f057e4.png",cs="/jixiang/assets/image-20241006170344890-596b9e2d.png",ms="/jixiang/assets/image-20241006183702396-d795145f.png",os="/jixiang/assets/image-20241006183742062-2739ff02.png",ds="/jixiang/assets/image-20241006184547625-e20c45fe.png",_s="/jixiang/assets/image-20241006184623204-9e5093e5.png",ls="/jixiang/assets/image-20241006190644884-f4619974.png",us="/jixiang/assets/image-20241006232757452-f3892676.png",xs="/jixiang/assets/image-20241006233157573-d737af7f.png",hs="/jixiang/assets/image-20241006184806974-a96a9184.png",bs="/jixiang/assets/image-20241008204718576-f7b7dc3f.png",js="/jixiang/assets/image-20241006184840431-c0ee4ea4.png",fs="/jixiang/assets/image-20241008205422624-9f910842.png",ks="/jixiang/assets/image-20241006184919856-7d7f429b.png",vs="/jixiang/assets/image-20241006184944991-9e466168.png",Rs={},ys=i('<h2 id="一-redux的使用详解-一" tabindex="-1"><a class="header-anchor" href="#一-redux的使用详解-一" aria-hidden="true">#</a> 一，Redux的使用详解(一)</h2><h3 id="_1-什么是纯函数" tabindex="-1"><a class="header-anchor" href="#_1-什么是纯函数" aria-hidden="true">#</a> 1，什么是纯函数</h3><h4 id="a-纯函数的概念" tabindex="-1"><a class="header-anchor" href="#a-纯函数的概念" aria-hidden="true">#</a> A）纯函数的概念</h4><p><img src="'+t+'" alt="image-20241002172655452"></p><p><img src="'+n+'" alt="image-20241002172713591"></p><p>什么是纯函数：</p><ul><li>确定的输入，一定产生确定的输出。</li><li>函数在执行过程中，不能产生副作用。</li><li>通俗的讲：不使用函数以为的变量，比修改函数以外的变量。</li></ul><p><img src="'+p+'" alt="image-20241002172738339"></p><p><img src="'+r+'" alt="image-20241002172810576"></p><p><img src="'+g+'" alt="image-20241002172832982"></p><h3 id="_2-redux的核心思想" tabindex="-1"><a class="header-anchor" href="#_2-redux的核心思想" aria-hidden="true">#</a> 2，Redux的核心思想</h3><p><img src="'+c+'" alt="image-20241002174224791"></p><p><img src="'+m+'" alt="image-20241002174249441"></p><p><img src="'+o+'" alt="image-20241002174307084"></p><p><img src="'+d+'" alt="image-20241002174326191"></p><p><img src="'+_+'" alt="image-20241002174345033"></p><h3 id="_3-redux的基本使用" tabindex="-1"><a class="header-anchor" href="#_3-redux的基本使用" aria-hidden="true">#</a> 3，Redux的基本使用</h3><p><img src="'+l+'" alt="image-20241002224545234"></p><p><img src="'+u+'" alt="image-20241002224609070"></p><p>第一步：安装redux，操作如下:</p><p><img src="'+x+'" alt="image-20241002224857860"></p><p>第二步：创建src/store/index.js，搭建基本结构。创建store，定义初始状态并获取数据。操作如下：</p><p><img src="'+h+'" alt="image-20241002230137264"></p><p>第三步：想要修改store中的state，需要调用dispatch一个action，操作如下：</p><p><img src="'+b+'" alt="image-20241002231837766"></p><p>第四步：派发action修改name和counter，操作如下：</p><p><img src="'+j+'" alt="image-20241002233724225"></p><p>优化代码：</p><p>优化一：我们不希望每次派发action修改state中的数据后，手动调用store.getState方法查看新的状态。我们可以订阅store中的数据，这样每次在状态发生修改时，我们就会知道。操作如下：</p><p><img src="'+f+'" alt="image-20241003083957524"></p><p><img src="'+k+'" alt="image-20241003084507750"></p><p>优化二：index.js文件中的reducer函数内部写了大量ifelse代码，我们为了增加代码的可阅读性，使用switch语句替换。操作如下：</p><p><img src="'+v+'" alt="image-20241003085027812"></p><p>优化三：每次派发action时，传入的action对象都非常相似。因此我们可以将其抽离成函数，通过调用函数产生action对象。操作如下：</p><p><img src="'+R+'" alt="image-20241003100003682"></p><p>优化四：reducer函数中判断type用的字符串和action对象中的字符串相同，因此我们可以将其抽离成常量，保存到单独的文件中。操作如下：</p><p><img src="'+y+'" alt="image-20241003100336013"></p><p><img src="'+w+'" alt="image-20241003101451581"></p><p>优化五：随着开发进行，reducer函数中的代码会越来越多。为了保证代码的可阅读性，将reducer函数抽离到单独的文件中，操作如下：</p><p><img src="'+A+'" alt="image-20241003124451610"></p><p>优化总结：</p><p><img src="'+S+'" alt="image-20241003125327514"></p><h3 id="_4-redux的三大原则" tabindex="-1"><a class="header-anchor" href="#_4-redux的三大原则" aria-hidden="true">#</a> 4，Redux的三大原则</h3><p><img src="'+B+'" alt="image-20241003125411064"></p><p>Redux的三大原则：</p><ul><li>单一数据源</li><li>State是只读的</li><li>使用纯函数来执行修改</li></ul><h3 id="_5-redux使用流程" tabindex="-1"><a class="header-anchor" href="#_5-redux使用流程" aria-hidden="true">#</a> 5，Redux使用流程</h3><p><img src="'+E+'" alt="image-20241003142841339"></p><p><img src="'+T+'" alt="image-20241003142913973"></p><h3 id="_5-react结合redux" tabindex="-1"><a class="header-anchor" href="#_5-react结合redux" aria-hidden="true">#</a> 5，React结合Redux</h3><p><img src="'+q+'" alt="image-20241003143624923"></p><p><img src="'+C+'" alt="image-20241003143656498"></p><p><img src="'+H+'" alt="image-20241003143725037"></p><h4 id="a-在react中使用redux" tabindex="-1"><a class="header-anchor" href="#a-在react中使用redux" aria-hidden="true">#</a> A）在React中使用redux</h4><p>第一步：创建Home和Profile组件并引入相关样式。操作如下：</p><p><img src="'+M+'" alt="image-20241003150327995"></p><p><img src="'+D+'" alt="image-20241003150351575"></p><p>第二步：安装redux并创建基本的目录结构，操作如下：</p><p><img src="'+O+'" alt="image-20241003150706990"></p><p><img src="'+N+'" alt="image-20241003151245398"></p><p>第三步：在组件中共享store中的state，操作如下：</p><p><img src="'+P+'" alt="image-20241003173916717"></p><p><img src="'+I+'" alt="image-20241003173956844"></p><p>第四步：添加点击事件，修改store中的数据counter，操作如下：</p><p><img src="'+V+'" alt="image-20241003180858745"></p><p><img src="'+X+'" alt="image-20241003181016071"></p><p><img src="'+z+'" alt="image-20241003181125166"></p><p>第五步：点击按钮查看页面效果，操作如下：</p><p><img src="'+G+'" alt="image-20241003181244536"></p><h4 id="b-使用react-redux" tabindex="-1"><a class="header-anchor" href="#b-使用react-redux" aria-hidden="true">#</a> B）使用react-redux</h4><p>可以看到我们想在组件中使用Redux，需要重复地写相似地代码。我们可以使用第三方高阶组件。</p><p><img src="'+K+'" alt="image-20241003214900062"></p><p>第一步：安装react-redux，这个库的目的就是将组件和Redux联系在一起。操作如下：</p><p><img src="'+L+'" alt="image-20241003214948571"></p><p>第二步：在About组件中，使用react-redux。操作如下：</p><p><img src="'+U+'" alt="image-20241003223150925"></p><p><img src="'+F+'" alt="image-20241003231442979"></p><p>第三步：打开浏览器查看效果，操作如下：</p><p><img src="'+J+'" alt="image-20241003231633992"></p><p>第四步：在About组件中，通过按钮派发action从而修改store中的state，操作如下：</p><p><img src="'+Q+'" alt="image-20241004001454861"></p><p>第五步：点击About组件的按钮修改state中的counter，并查看效果。操作如下：</p><p><img src="'+W+'" alt="image-20241004001647084"></p><h3 id="_6-redux的异步操作" tabindex="-1"><a class="header-anchor" href="#_6-redux的异步操作" aria-hidden="true">#</a> 6，Redux的异步操作</h3><h4 id="a-组件中异步操作" tabindex="-1"><a class="header-anchor" href="#a-组件中异步操作" aria-hidden="true">#</a> A）组件中异步操作</h4><p><img src="'+Y+'" alt="image-20241003143755529"></p><p>我们想要发送网络请求，并将数据存储到Redux中。如果哪个组件需要这些数据，在组件中获取即可。</p><p>第一步：在reducer.js中提前定义好需要存储的网络请求数据，操作如下：</p><p><img src="'+Z+'" alt="image-20241004110914636"></p><p>第二步：提前定义字符串常量、定义创建action对象的actionCreators方法、在reducer函数中定义case案例。操作如下：</p><p><img src="'+$+'" alt="image-20241004111311471"></p><p><img src="'+aa+'" alt="image-20241004111423862"></p><p>第三步：在Categroy组件的生命周期componnetDidmount中发送请求，并派发action，从而实现修改state中的banners和recommends。操作如下：</p><p><img src="'+sa+'" alt="image-20241004111929882"></p><p>第四步：在About组件中获取到state中的banners和recommends，并使用之。操作如下：</p><p><img src="'+ea+'" alt="image-20241004112339231"></p><p>第五步：打开浏览器查看效果，操作如下：</p><p><img src="'+ia+'" alt="image-20241004112423722"></p><h4 id="b-redux中异步操作" tabindex="-1"><a class="header-anchor" href="#b-redux中异步操作" aria-hidden="true">#</a> B）Redux中异步操作</h4><p><img src="'+ta+'" alt="image-20241003143827250"></p><p><img src="'+na+'" alt="image-20241004191212977"></p><p><img src="'+pa+'" alt="image-20241004191245813"></p><p>我们刚才在Category组件中通过异步请求获取数据，再放入store中的state。但是这样做并不合理，因为获取到的数据属于Redux中的操作。接下来我们会在Redux中发送网络请求获取数据。</p><p><img src="'+ra+'" alt="image-20241004152732851"></p><p>store.dipatch只能派发对象，不能派发函数。否则就要使用redux-thunk对store进行增强。</p><p>第一步：安装redux-thunk，操作如下：</p><p><img src="'+ga+'" alt="image-20241004155649452"></p><p>第二步：引入thunk并应用，操作如下：</p><p><img src="'+ca+'" alt="image-20241004161511349"></p><p>第三步：派发函数发送网络请求获取数据，再派发action对象修改state中的数据。操作如下：</p><p><img src="'+ma+'" alt="image-20241004162324414"></p><p>第四步：打开浏览器查看效果。操作如下：</p><p><img src="'+oa+'" alt="image-20241004162420868"></p><h3 id="_7-redux-devtool" tabindex="-1"><a class="header-anchor" href="#_7-redux-devtool" aria-hidden="true">#</a> 7，redux-devtool</h3><p><img src="'+da+'" alt="image-20241004190342548"></p><p>redux-devtool默认是没有开启的，我们需要在代码中做一些配置。</p><p>第一步：安装redux-devtool，操作如下：</p><p><img src="'+_a+'" alt="image-20241004202321374"></p><p>第二步：虽然安装了Redux-devtool，但是并不能看到我们代码中的redux。我们需要对代码做额外配置。操作如下：</p><p><img src="'+la+`" alt="image-20241004202659626"></p><p>代码配置如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> applyMiddleware<span class="token punctuation">,</span> compose <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> thunk <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;redux-thunk&quot;</span><span class="token punctuation">;</span> <span class="token comment">// thunk本质是一个中间件</span>
<span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">&quot;./reducer&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 正常情况下：store.dispatch(object)</span>
<span class="token comment">// 想要派发函数：store.dispatch(function)</span>

<span class="token keyword">const</span> composeEnhancers <span class="token operator">=</span> window<span class="token punctuation">.</span>__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ <span class="token operator">||</span> compose<span class="token punctuation">;</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token function">composeEnhancers</span><span class="token punctuation">(</span><span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> store
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>redux-devtool的GitHub地址：https://github.com/zalmoxisus/redux-devtools-extension#usage</p><p><img src="`+ua+'" alt="image-20241004202859112"></p><p><img src="'+xa+'" alt="image-20241004202929896"></p><h3 id="_8-reducer的模块拆分" tabindex="-1"><a class="header-anchor" href="#_8-reducer的模块拆分" aria-hidden="true">#</a> 8，reducer的模块拆分</h3><p><img src="'+ha+'" alt="image-20241004203545012"></p><p><img src="'+ba+'" alt="image-20241004203621337"></p><p><img src="'+ja+'" alt="image-20241004203653138"></p><p>现在store中的state存放了不同模块的数据，这样不利于代码的维护，也不利于多人开发(操作同一文件可能产生冲突)。因此我们需要划分不同的模块。</p><p><img src="'+fa+'" alt="image-20241004204433645"></p><h4 id="a-reducer代码拆分" tabindex="-1"><a class="header-anchor" href="#a-reducer代码拆分" aria-hidden="true">#</a> A）Reducer代码拆分</h4><p>将Reducer代码拆分成counter模块和home模块。</p><p>第一步：先拆分成counter模块，操作如下：</p><p><img src="'+ka+'" alt="image-20241004211830450"></p><p><img src="'+va+'" alt="image-20241004211944104"></p><p>第二步：拆分home模块的reducer代码，操作如下：</p><p><img src="'+Ra+'" alt="image-20241004212257458"></p><p><img src="'+ya+'" alt="image-20241004212507560"></p><p>第三步：结合不同模块的reducer，操作如下：</p><p><img src="'+wa+'" alt="image-20241004213342099"></p><p>第四步：对于组件中使用到state的代码进行重构，操作如下：</p><p><img src="'+Aa+'" alt="image-20241004215947976"></p><p><img src="'+Sa+'" alt="image-20241004220110468"></p><p><img src="'+Ba+'" alt="image-20241004220238495"></p><p><img src="'+Ea+'" alt="image-20241004220338409"></p><p>第五步：打开浏览器查看效果。操作如下：</p><p><img src="'+Ta+'" alt="image-20241004220536287"></p><p>第六步：再划分一个reducer模块user，操作如下：</p><p><img src="'+qa+'" alt="image-20241004221345517"></p><p>第七步：在About组件中将user模块的userInfo数据映射为当前组件的props，并使用之。操作如下：</p><p><img src="'+Ca+'" alt="image-20241004224634649"></p><p>第八步：打开浏览器查看效果，操作如下：</p><p><img src="'+Ha+'" alt="image-20241004224847823"></p><p>到此，reducer模块划分完成。</p><h4 id="b-combinereducer函数实现原理" tabindex="-1"><a class="header-anchor" href="#b-combinereducer函数实现原理" aria-hidden="true">#</a> B）combineReducer函数实现原理</h4><h2 id="二-redux的使用详解-二" tabindex="-1"><a class="header-anchor" href="#二-redux的使用详解-二" aria-hidden="true">#</a> 二，Redux的使用详解(二)</h2><h3 id="_1-认识reduxtoolkit" tabindex="-1"><a class="header-anchor" href="#_1-认识reduxtoolkit" aria-hidden="true">#</a> 1，认识ReduxToolkit</h3><p><img src="'+Ma+'" alt="image-20241004231024064"></p><p>第一步：安装redux-toolkit。操作如下：</p><p><img src="'+Da+'" alt="image-20241004234829859"></p><h3 id="_2-reduxtoolkit重构" tabindex="-1"><a class="header-anchor" href="#_2-reduxtoolkit重构" aria-hidden="true">#</a> 2，ReduxToolkit重构</h3><h4 id="a-创建counter的reducer" tabindex="-1"><a class="header-anchor" href="#a-创建counter的reducer" aria-hidden="true">#</a> A）创建Counter的reducer</h4><p><img src="'+Oa+'" alt="image-20241004231140789"></p><p>第一步：使用createSlice创建一个slice，操作如下：</p><p><img src="'+Na+'" alt="image-20241005123957886"></p><p><img src="'+Pa+'" alt="image-20241005124700094"></p><p>第二步：在index.js文件中，使用configureStore方法创建store对象。并导入刚才创建的counterReducer。操作如下：</p><p><img src="'+Ia+'" alt="image-20241005124330713"></p><p>第三步：我们刚才使用redux-toolkit创建的store没有与React产生联系，如果我们想在React代码中使用刚才创建的store，需要安装redux-react。操作如下：</p><p><img src="'+Va+'" alt="image-20241005140405646"></p><p>第四步：通过react-redux在React代码中使用我们创建的store，操作如下：</p><p><img src="'+Xa+'" alt="image-20241005141848396"></p><p><img src="'+za+'" alt="image-20241005142212650"></p><p><img src="'+Ga+'" alt="image-20241005142341921"></p><p><img src="'+Ka+'" alt="image-20241005142454491"></p><p>第五步：添加按钮绑定点击事件，点击按钮触发事件处理函数从而派发action，实现修改state中的count数据。操作如下：</p><p><img src="'+La+'" alt="image-20241005155325336"></p><p><img src="'+Ua+'" alt="image-20241005155822826"></p><p><img src="'+Fa+'" alt="image-20241005160028324"></p><h4 id="b-创建home的reducer" tabindex="-1"><a class="header-anchor" href="#b-创建home的reducer" aria-hidden="true">#</a> B）创建home的reducer</h4><p><img src="'+Ja+'" alt="image-20241005115852985"></p><p><img src="'+Qa+'" alt="image-20241005115925376"></p><h3 id="_3-reduxtoolikit异步" tabindex="-1"><a class="header-anchor" href="#_3-reduxtoolikit异步" aria-hidden="true">#</a> 3，ReduxToolikit异步</h3><p><img src="'+Wa+'" alt="image-20241005084009300"></p><h4 id="a-在组件中进行异步操作" tabindex="-1"><a class="header-anchor" href="#a-在组件中进行异步操作" aria-hidden="true">#</a> A）在组件中进行异步操作</h4><p>第一步：在Home组件中发生请求获取到数据后，再赋值给state中的banners和recommends。操作如下：</p><p><img src="'+Ya+'" alt="image-20241005224055544"></p><p>第二步：在Profile组件中获取state中的banners和recommends数据并使用。操作如下：</p><p><img src="'+Za+'" alt="image-20241005224346659"></p><p>第三步：打开浏览器查看效果，操作如下：</p><p><img src="'+$a+'" alt="image-20241005224442428"></p><h4 id="b-在store中进行异步请求" tabindex="-1"><a class="header-anchor" href="#b-在store中进行异步请求" aria-hidden="true">#</a> B）在store中进行异步请求</h4><p><img src="'+as+'" alt="image-20241006075215168"></p><p>banners和recommends数据本质属于store，我们发送网络请求获取的过程不应该放在某个组件中，而是应该放在redux中。</p><p>方式一：在extraReducer函数中监听其状态，并使用返回的数据。</p><p>第一步：使用createAyncThunk创建一个异步action并导出，操作如下：</p><p><img src="'+ss+'" alt="image-20241006093300375"></p><p>第二步：在Home组件中的componentDidMount钩子中，调用fetchHomeMultidata函数，在该函数中派发刚才创建的异步action(fetchHomeMultidataAction)。操作如下：</p><p><img src="'+es+'" alt="image-20241006094143066"></p><p>第三步：派发异步action之后，其回调函数有三种状态，我们需要监听不同状态。并在fulfilled状态中获取到数据。操作如下：</p><p><img src="'+is+'" alt="image-20241006105118304"></p><p>第四步：打开浏览器查看效果，操作如下：</p><p><img src="'+ts+'" alt="image-20241006105248506"></p><p>方式二：不在extraReducers函数中监听action回调函数的状态，而是在异步ation的回调函数中获取到数据后，直接修改state中的数据。</p><p>第一步：额外补充：异步action的回调函数接收两个参数。参数一：派发异步action时传递的参数，参数二：当前store对象。操作如下：</p><p><img src="'+ns+'" alt="image-20241006110607703"></p><p>第二步：注释掉extraReducers属性，不在该属性中监听异步action回调函数的状态。操作如下：</p><p><img src="'+ps+'" alt="image-20241006111407818"></p><p>第三步：在异步action的回调函数中获取到数据后，调用同步action，在同步action中修改state中的banners和recommends。操作如下：</p><p><img src="'+rs+'" alt="image-20241006112016779"></p><p>第四步：打开浏览器查看效果，操作如下：</p><p><img src="'+gs+'" alt="image-20241006112407057"></p><h3 id="_4-rtk的数据不可变性" tabindex="-1"><a class="header-anchor" href="#_4-rtk的数据不可变性" aria-hidden="true">#</a> 4，RTK的数据不可变性</h3><p><img src="'+cs+'" alt="image-20241006170344890"></p><h3 id="_4-connect高阶组件" tabindex="-1"><a class="header-anchor" href="#_4-connect高阶组件" aria-hidden="true">#</a> 4，connect高阶组件</h3><h4 id="a-connect基本实现" tabindex="-1"><a class="header-anchor" href="#a-connect基本实现" aria-hidden="true">#</a> A）connect基本实现</h4><p><img src="'+ms+'" alt="image-20241006183702396"></p><h4 id="b-解耦store" tabindex="-1"><a class="header-anchor" href="#b-解耦store" aria-hidden="true">#</a> B）解耦store</h4><p><img src="'+os+'" alt="image-20241006183742062"></p><h3 id="_5-中间件的实现原理" tabindex="-1"><a class="header-anchor" href="#_5-中间件的实现原理" aria-hidden="true">#</a> 5，中间件的实现原理</h3><h4 id="a-实现打印日志的中间件" tabindex="-1"><a class="header-anchor" href="#a-实现打印日志的中间件" aria-hidden="true">#</a> A）实现打印日志的中间件</h4><p><img src="'+ds+'" alt="image-20241006184547625"></p><p><img src="'+_s+'" alt="image-20241006184623204"></p><p><img src="'+ls+'" alt="image-20241006190644884"></p><p>我们希望编写一个在派发action时打印日志的中间件。</p><p>第一步：实现log函数，操作如下：</p><p><img src="'+us+'" alt="image-20241006232757452"></p><p>第二步：打开浏览器查看效果，操作如下：</p><p><img src="'+xs+'" alt="image-20241006233157573"></p><h4 id="c-实现redux-thunk" tabindex="-1"><a class="header-anchor" href="#c-实现redux-thunk" aria-hidden="true">#</a> C）实现redux-thunk</h4><p><img src="'+hs+'" alt="image-20241006184806974"></p><p><img src="'+bs+'" alt="image-20241008204718576"></p><h4 id="d-合并中间件" tabindex="-1"><a class="header-anchor" href="#d-合并中间件" aria-hidden="true">#</a> D）合并中间件</h4><p><img src="'+js+'" alt="image-20241006184840431"></p><p><img src="'+fs+'" alt="image-20241008205422624"></p><h3 id="_6-react状态管理选择" tabindex="-1"><a class="header-anchor" href="#_6-react状态管理选择" aria-hidden="true">#</a> 6，React状态管理选择</h3><p><img src="'+ks+'" alt="image-20241006184919856"></p><p><img src="'+vs+'" alt="image-20241006184944991"></p>',239),ws=[ys];function As(Ss,Bs){return s(),e("div",null,ws)}const Ts=a(Rs,[["render",As],["__file","27.html.vue"]]);export{Ts as default};

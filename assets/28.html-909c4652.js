import{_ as a,o as i,c as s,a as e}from"./app-382cdfb3.js";const t="/jixiang/assets/image-20241008220043808-f10f7faa.png",p="/jixiang/assets/image-20241008220128420-e9f7185b.png",g="/jixiang/assets/image-20241008230009529-23b09aca.png",r="/jixiang/assets/image-20241008230050347-9feee1f1.png",n="/jixiang/assets/image-20241008224938133-dc96d133.png",m="/jixiang/assets/image-20241008225115338-e6a01124.png",o="/jixiang/assets/image-20241008225325798-e40448b0.png",c="/jixiang/assets/image-20241008225454479-ffb8197b.png",_="/jixiang/assets/image-20241008230121128-17317407.png",l="/jixiang/assets/image-20241008232128027-20485551.png",d="/jixiang/assets/image-20241008232238383-f14cd5e4.png",h="/jixiang/assets/image-20241008232335530-f89d188d.png",u="/jixiang/assets/image-20241008232848915-05cc2cde.png",x="/jixiang/assets/image-20241008232946581-337eb835.png",j="/jixiang/assets/image-20241008233612158-87dd866f.png",f="/jixiang/assets/image-20241008233634472-5b77e6fd.png",b="/jixiang/assets/image-20241008234719214-0ab8d7d4.png",v="/jixiang/assets/image-20241009000634556-8d01ff7c.png",k="/jixiang/assets/image-20241009000230299-d945ad2e.png",N="/jixiang/assets/image-20241009000335709-63c5930d.png",R="/jixiang/assets/image-20241009000926864-31856c94.png",L="/jixiang/assets/image-20241009001053510-d1a10be2.png",A="/jixiang/assets/image-20241009001204348-673cf1b2.png",H="/jixiang/assets/image-20241009001851334-3613908f.png",S="/jixiang/assets/image-20241009001923379-49cd514f.png",y="/jixiang/assets/image-20241009073741277-dc40332d.png",I="/jixiang/assets/image-20241009074603757-cc8c2677.png",M="/jixiang/assets/image-20241009075809271-a1b4e84e.png",P="/jixiang/assets/image-20241009080048232-40ec9abe.png",q="/jixiang/assets/image-20241009080359768-f7b24958.png",w="/jixiang/assets/image-20241009081104492-f83a6eda.png",B="/jixiang/assets/image-20241009081247876-f1c30dee.png",D="/jixiang/assets/image-20241009073807850-7640ca31.png",F="/jixiang/assets/image-20241009084316056-53f92a82.png",J="/jixiang/assets/image-20241009090650557-eb6b1999.png",U="/jixiang/assets/image-20241009094730501-c7da952f.png",V="/jixiang/assets/image-20241009094914084-39fee345.png",C="/jixiang/assets/image-20241009105758509-812ab0f1.png",E="/jixiang/assets/image-20241009110256185-a92303f1.png",O="/jixiang/assets/image-20241009110939516-a8728c17.png",z="/jixiang/assets/image-20241009110659247-dc0632db.png",G="/jixiang/assets/image-20241009110757842-0c499704.png",K="/jixiang/assets/image-20241009073843283-501cad41.png",Q="/jixiang/assets/image-20241009170205533-61ac5ab1.png",T="/jixiang/assets/image-20241009170507579-fde86c4c.png",W="/jixiang/assets/image-20241009170834674-35657ef0.png",X="/jixiang/assets/image-20241009171330624-1b2bcc30.png",Y="/jixiang/assets/image-20241009171617697-9acba85e.png",Z="/jixiang/assets/image-20241009210601425-e8602150.png",$="/jixiang/assets/image-20241009211246394-877d7075.png",a0="/jixiang/assets/image-20241009212032556-2707e913.png",i0="/jixiang/assets/image-20241009212802325-9a8b07c7.png",s0="/jixiang/assets/image-20241009213047712-b28bcb56.png",e0="/jixiang/assets/image-20241009073924091-6b6bda09.png",t0="/jixiang/assets/image-20241009220256590-47149504.png",p0="/jixiang/assets/image-20241009220453852-792f2f38.png",g0={},r0=e('<h1 id="react-router-v6" tabindex="-1"><a class="header-anchor" href="#react-router-v6" aria-hidden="true">#</a> React Router(V6)</h1><h2 id="一-认识react-router" tabindex="-1"><a class="header-anchor" href="#一-认识react-router" aria-hidden="true">#</a> 一，认识React-Router</h2><p><img src="'+t+'" alt="image-20241008220043808"></p><h2 id="二-router的基本使用" tabindex="-1"><a class="header-anchor" href="#二-router的基本使用" aria-hidden="true">#</a> 二，Router的基本使用</h2><h3 id="_1-router的基本使用" tabindex="-1"><a class="header-anchor" href="#_1-router的基本使用" aria-hidden="true">#</a> 1，Router的基本使用</h3><p><img src="'+p+'" alt="image-20241008220128420"></p><p><img src="'+g+'" alt="image-20241008230009529"></p><p><img src="'+r+'" alt="image-20241008230050347"></p><p>第一步：安装react-router-dom，并全局开启react router。操作如下：</p><p><img src="'+n+'" alt="image-20241008224938133"></p><p>第二步：创建Home组件和About组件，操作如下：</p><p><img src="'+m+'" alt="image-20241008225115338"></p><p>第三步：配置路由映射关系和跳转路由的组件Link。操作如下：</p><p><img src="'+o+'" alt="image-20241008225325798"></p><p>第四步：打开浏览器查看效果，操作如下：</p><p><img src="'+c+'" alt="image-20241008225454479"></p><h3 id="_2-navlink的使用" tabindex="-1"><a class="header-anchor" href="#_2-navlink的使用" aria-hidden="true">#</a> 2，NavLink的使用</h3><p><img src="'+_+'" alt="image-20241008230121128"></p><ul><li>需求：路径选中时，对应的a元素变为红色</li><li>这个时候，我们要使用NavLink组件来替代Link组件： <ul><li>style：传入函数，函数接受一个对象，包含isActive属性</li><li>className：传入函数，函数接受一个对象，包含isActive属性</li></ul></li><li>默认的activeClassName： <ul><li>事实上在默认匹配成功时，NavLink就会添加上一个动态的active class；</li><li>所以我们也可以直接编写样式</li></ul></li><li>当然，如果你担心这个class在其他地方被使用了，出现样式的层叠，也可以自定义class</li></ul><p>第一步：使用NavLink组件替换Link组件，NavLink组件被选中时会增加一个类名active。操作如下：</p><p><img src="'+l+'" alt="image-20241008232128027"></p><p>第二步：编写样式并引入。操作如下：</p><p><img src="'+d+'" alt="image-20241008232238383"></p><p>第三步：浏览器测试，操作如下：</p><p><img src="'+h+'" alt="image-20241008232335530"></p><p>style属性可以传入一个函数，该函数返回一个style对象。该函数接收一个参数对象，其中包含isActive属性。我们可以使用它控制NavLink是否添加样式。操作如下：</p><p><img src="'+u+'" alt="image-20241008232848915"></p><p><img src="'+x+'" alt="image-20241008232946581"></p><p>NavLink组件被选中时默认添加active，这个添加的类名可能会发生冲突。因此我们可以使用className属性并传入一个函数。该函数返回一个类名字符串，函数接收一个对象参数，其中包含isActive属性。可以用它结合三元运算符控制添加的类名。操作如下：</p><p><img src="'+j+'" alt="image-20241008233612158"></p><p><img src="'+f+'" alt="image-20241008233634472"></p><h3 id="_3-navigate导航" tabindex="-1"><a class="header-anchor" href="#_3-navigate导航" aria-hidden="true">#</a> 3，Navigate导航</h3><p><img src="'+b+'" alt="image-20241008234719214"></p><p>使用场景一：在Login组件中点击登录按钮，改变记录登录的状态isLogin为true，然后通过三元运算符渲染navigate组件实现路由跳转。</p><p><img src="'+v+'" alt="image-20241009000634556"></p><p><img src="'+k+'" alt="image-20241009000230299"></p><p><img src="'+N+'" alt="image-20241009000335709"></p><p>场景二：第一次进入网站的路径为/时，什么也不会渲染。可以使用Navigate组件重定向到某个路径。操作如下：</p><p><img src="'+R+'" alt="image-20241009000926864"></p><p><img src="'+L+'" alt="image-20241009001053510"></p><h3 id="_4-notfound页面配置" tabindex="-1"><a class="header-anchor" href="#_4-notfound页面配置" aria-hidden="true">#</a> 4，NotFound页面配置</h3><p><img src="'+A+'" alt="image-20241009001204348"></p><p>如果用户随意输入一个地址，该地址无法匹配，那么在路由匹配的位置将什么内容都不显示。很多时候，我们希望在这种情况下，让用户看到一个Not Found的页面。</p><p><img src="'+H+'" alt="image-20241009001851334"></p><p><img src="'+S+'" alt="image-20241009001923379"></p><h2 id="三-router的路由嵌套" tabindex="-1"><a class="header-anchor" href="#三-router的路由嵌套" aria-hidden="true">#</a> 三，Router的路由嵌套</h2><p><img src="'+y+'" alt="image-20241009073741277"></p><p>第一步：创建HomeRecommend组件和HomeRanking组件，操作如下：</p><p><img src="'+I+'" alt="image-20241009074603757"></p><p>第二步：在App组件中配置/home的子路由，操作如下：</p><p><img src="'+M+'" alt="image-20241009075809271"></p><p>第三步：在Home组件中添加用于路由跳转的Link组件和用于占位的Outlet组件，操作如下：</p><p><img src="'+P+'" alt="image-20241009080048232"></p><p>第四步：打开浏览器查看效果，操作如下：</p><p><img src="'+q+'" alt="image-20241009080359768"></p><p>第五步：当我们进入到/home路径时，它的子路由一个也不显示。因此我们希望进入到/home路径时，显示默认子路由。操作如下：</p><p><img src="'+w+'" alt="image-20241009081104492"></p><p><img src="'+B+'" alt="image-20241009081247876"></p><h2 id="四-编程式导航" tabindex="-1"><a class="header-anchor" href="#四-编程式导航" aria-hidden="true">#</a> 四，编程式导航</h2><p><img src="'+D+'" alt="image-20241009073807850"></p><p>目前我们实现的跳转主要是通过Link或者NavLink进行跳转的，实际上我们也可以通过JavaScript代码进行跳转。</p><ul><li>我们知道Navigate组件是可以进行路由的跳转的，但是依然是组件的方式。</li><li>如果我们希望通过JavaScript代码逻辑进行跳转（比如点击了一个button），那么就需要获取到navigate对象。</li></ul><p>在Router6.x版本之后，代码类的API都迁移到了hooks的写法：</p><ul><li>如果我们希望进行代码跳转，需要通过useNavigate的Hook获取到navigate对象进行操作；</li><li>那么如果是一个函数式组件，我们可以直接调用，但是如果是一个类组件呢？</li></ul><h3 id="_1-函数式组件" tabindex="-1"><a class="header-anchor" href="#_1-函数式组件" aria-hidden="true">#</a> 1，函数式组件</h3><p>第一步：添加button和span元素用于点击跳转路由，配置对应的路由规则。操作如下：</p><p><img src="'+F+'" alt="image-20241009084316056"></p><p>第二步：在类组件中使用一个hooks(useNavigate)进行路由跳转是不被允许的，操作如下：</p><p><img src="'+J+'" alt="image-20241009090650557"></p><p>第三步：将App组件改为函数式组件，并使用navigate这个hook，从而实现编程式路由跳转。操作如下：</p><p><img src="'+U+'" alt="image-20241009094730501"></p><p>第四步：打开浏览器测试之如下：</p><p><img src="'+V+'" alt="image-20241009094914084"></p><h3 id="_2-类组件" tabindex="-1"><a class="header-anchor" href="#_2-类组件" aria-hidden="true">#</a> 2，类组件</h3><p>如果是一个类组件，我们想实现编程式路由跳转，我们需要用到高阶组件。通过高阶组件对其进行增强。</p><p>第一步：创建HomeSongMenu组件，并配置/home的子路由。操作如下：</p><p><img src="'+C+'" alt="image-20241009105758509"></p><p>第二步：封装一个高阶组件，用于将useNavigate调用之后返回的navigate对象，以自定义属性的方式传递给类组件。操作如下：</p><p><img src="'+E+'" alt="image-20241009110256185"></p><p><img src="'+O+'" alt="image-20241009110939516"></p><p>第三步：在Home组件中增加一个用于跳转/home/songmenu路径的按钮，并为其添加点击事件。使用高阶组件withRouter，操作如下：</p><p><img src="'+z+'" alt="image-20241009110659247"></p><p>第四步：打开浏览器测试如下：</p><p><img src="'+G+'" alt="image-20241009110757842"></p><h2 id="五-router的参数传递" tabindex="-1"><a class="header-anchor" href="#五-router的参数传递" aria-hidden="true">#</a> 五，Router的参数传递</h2><p><img src="'+K+'" alt="image-20241009073843283"></p><h3 id="_1-动态路由params" tabindex="-1"><a class="header-anchor" href="#_1-动态路由params" aria-hidden="true">#</a> 1，动态路由params</h3><p>第一步：创建Detail组件并配置对应的路由规则。操作如下：</p><p><img src="'+Q+'" alt="image-20241009170205533"></p><p>第二步：在HomeSongMenu组件中定义状态songMenu，并渲染列表数据。操作如下：</p><p><img src="'+T+'" alt="image-20241009170507579"></p><p>第三步：给列表元素绑定点击事件，事件处理函数触发时，实现路由跳转并通过路径传递参数。操作如下：</p><p><img src="'+W+'" alt="image-20241009170834674"></p><p>第四步：在Detail组件中获取动态路径传递过来的参数，并在高阶组件withRouter中将params以自定义属性的方式传递给类组件。操作如下：</p><p><img src="'+X+'" alt="image-20241009171330624"></p><p>第五步：打开开浏览器查看效果，操作如下：</p><p><img src="'+Y+'" alt="image-20241009171617697"></p><h3 id="_2-查询字符串search" tabindex="-1"><a class="header-anchor" href="#_2-查询字符串search" aria-hidden="true">#</a> 2，查询字符串search</h3><p>第一步：创建User组件并配置对应的路由规则，操作如下：</p><p><img src="'+Z+'" alt="image-20241009210601425"></p><p>第二步：因为获取查询字符串参数，还是需要用到hook，但是类组件中不能使用hook。因此我们需要在高阶组件中增加对应的代码。操作如下：</p><p><img src="'+$+'" alt="image-20241009211246394"></p><p><img src="'+a0+'" alt="image-20241009212032556"></p><p><img src="'+i0+'" alt="image-20241009212802325"></p><p>第三步：在User组件中，通过router.query获取到query对象，并使用。操作如下：</p><p><img src="'+s0+'" alt="image-20241009213047712"></p><h2 id="六-router的配置方式" tabindex="-1"><a class="header-anchor" href="#六-router的配置方式" aria-hidden="true">#</a> 六，Router的配置方式</h2><p><img src="'+e0+'" alt="image-20241009073924091"></p><ul><li>目前我们所有的路由定义都是直接使用Route组件，并且添加属性来完成的。</li><li>但是这样的方式会让路由变得非常混乱，我们希望将所有的路由配置放到一个地方进行集中管理： <ul><li>在早期的时候，Router并且没有提供相关的API，我们需要借助于react-router-config完成；</li><li>在Router6.x中，为我们提供了useRoutes API可以完成相关的配置；</li></ul></li></ul><h3 id="_1-useroutes配置路由规则" tabindex="-1"><a class="header-anchor" href="#_1-useroutes配置路由规则" aria-hidden="true">#</a> 1，useRoutes配置路由规则</h3><p>第一步：创建router/index.js文件，在该文件中以js对象的形式配置路由规则，操作如下：</p><p><img src="'+t0+'" alt="image-20241009220256590"></p><p>第二步：在App组件中使用导出的routes对象，操作如下：</p><p><img src="'+p0+'" alt="image-20241009220453852"></p><h3 id="_2-路由懒加载" tabindex="-1"><a class="header-anchor" href="#_2-路由懒加载" aria-hidden="true">#</a> 2，路由懒加载</h3><p>如果我们对某些组件进行了异步加载（懒加载），那么需要使用Suspense进行包裹。</p><p>第一步：操作如下：</p>',117),n0=[r0];function m0(o0,c0){return i(),s("div",null,n0)}const l0=a(g0,[["render",m0],["__file","28.html.vue"]]);export{l0 as default};

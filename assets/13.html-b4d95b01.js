import{_ as a,o as i,c as e,a as s}from"./app-382cdfb3.js";const t="/jixiang/assets/image-20240215214244728-398f9f07.png",p="/jixiang/assets/image-20240215214309488-041f3d73.png",n="/jixiang/assets/image-20240215222006199-6f7201ec.png",r="/jixiang/assets/image-20240215222713409-2b232ac7.png",g="/jixiang/assets/image-20240215214340302-0e47d621.png",m="/jixiang/assets/image-20240216080630167-8c082626.png",c="/jixiang/assets/image-20240215214410381-01493a06.png",d="/jixiang/assets/image-20240216080903736-33de04c8.png",h="/jixiang/assets/image-20240216082018558-63838703.png",o="/jixiang/assets/image-20240216082329838-c1a080cf.png",_="/jixiang/assets/image-20240216082416448-538c2adb.png",l="/jixiang/assets/image-20240215214436076-3aa4bf32.png",x="/jixiang/assets/image-20240216092129374-cbed95f3.png",j="/jixiang/assets/image-20240216092321415-15236890.png",f="/jixiang/assets/image-20240216092749485-2a94d26c.png",b="/jixiang/assets/image-20240215214527416-c6022328.png",u="/jixiang/assets/image-20240216094912981-0f5364cc.png",v="/jixiang/assets/image-20240216115054251-12329987.png",A="/jixiang/assets/image-20240216095045655-5e973ac1.png",B="/jixiang/assets/image-20240216101135184-9dbce8a9.png",V="/jixiang/assets/image-20240216101248960-ec2ea3f3.png",N="/jixiang/assets/image-20240216101422110-ab3d3106.png",y="/jixiang/assets/image-20240216115142016-3c2e25eb.png",D="/jixiang/assets/image-20240216113615759-8bb5db7d.png",F="/jixiang/assets/image-20240216113717810-ff26112b.png",k="/jixiang/assets/image-20240216114409745-385da811.png",C="/jixiang/assets/image-20240216114806488-af2dabfa.png",M="/jixiang/assets/image-20240216115213977-bf943230.png",O="/jixiang/assets/image-20240216123009741-1b28411e.png",S="/jixiang/assets/image-20240216123111404-fdc5c541.png",W="/jixiang/assets/image-20240216115240476-fb80fed9.png",w="/jixiang/assets/image-20240216115304310-89d12930.png",E="/jixiang/assets/image-20240216123829738-7bef2ac5.png",H="/jixiang/assets/image-20240216123948335-a1f54cb5.png",I="/jixiang/assets/image-20240216124726581-89479c46.png",P="/jixiang/assets/image-20240216115332352-13e46cf7.png",T="/jixiang/assets/image-20240216125059341-80225d0f.png",U="/jixiang/assets/image-20240216130658492-853e40c0.png",q="/jixiang/assets/image-20240216130945586-e960c836.png",z="/jixiang/assets/image-20240216131127154-f2391291.png",G="/jixiang/assets/image-20240216131150254-683a8f51.png",J="/jixiang/assets/image-20240216135252745-07f159e2.png",K="/jixiang/assets/image-20240216135736602-aa10b218.png",L="/jixiang/assets/image-20240216135708780-f50423a4.png",Q="/jixiang/assets/image-20240216172520225-b789f45d.png",R="/jixiang/assets/image-20240216173138899-7e5f43b6.png",X="/jixiang/assets/image-20240216173841538-6e3aa909.png",Y="/jixiang/assets/image-20240216174026398-7c49b282.png",Z="/jixiang/assets/image-20240216183256819-60cccdd9.png",$="/jixiang/assets/image-20240216183336283-ea7f5616.png",aa="/jixiang/assets/image-20240216190113861-43c23528.png",ia="/jixiang/assets/image-20240216183408105-da1cac71.png",ea="/jixiang/assets/image-20240216192754059-76e5e6c4.png",sa="/jixiang/assets/image-20240216183433007-d29e6406.png",ta="/jixiang/assets/image-20240216195936439-01645fdf.png",pa="/jixiang/assets/image-20240216200442399-3ba686ae.png",na="/jixiang/assets/image-20240216200508023-7fca5f5b.png",ra="/jixiang/assets/image-20240216201610547-b10038e3.png",ga="/jixiang/assets/image-20240216202337066-dd07b859.png",ma="/jixiang/assets/image-20240216213130385-7c8d95e4.png",ca="/jixiang/assets/image-20240216214906699-2440f43b.png",da="/jixiang/assets/image-20240216214956048-f72157a1.png",ha="/jixiang/assets/image-20240216215137403-89ca1be5.png",oa="/jixiang/assets/image-20240216213212645-2cbf4217.png",_a="/jixiang/assets/image-20240216220011959-a18224a2.png",la="/jixiang/assets/image-20240216220257459-c1d80283.png",xa="/jixiang/assets/image-20240216221155438-42208c51.png",ja="/jixiang/assets/image-20240216221624217-aca393c2.png",fa="/jixiang/assets/image-20240216222312982-40acebd6.png",ba="/jixiang/assets/image-20240216222342388-d99c5206.png",ua="/jixiang/assets/image-20240217085648977-015eb48a.png",va="/jixiang/assets/image-20240216222406092-d1936c12.png",Aa="/jixiang/assets/image-20240216222550100-d4999235.png",Ba="/jixiang/assets/image-20240217093414328-38def007.png",Va="/jixiang/assets/image-20240217094948835-0edf625f.png",Na="/jixiang/assets/image-20240217095810986-eca96f98.png",ya="/jixiang/assets/image-20240217100827951-d44749de.png",Da="/jixiang/assets/image-20240217102954289-a77e01ef.png",Fa="/jixiang/assets/image-20240217103021868-9ed86c7c.png",ka="/jixiang/assets/image-20240217103120544-d8f78706.png",Ca="/jixiang/assets/image-20240217103202776-dbeaab13.png",Ma="/jixiang/assets/image-20240217103614529-d34683a3.png",Oa="/jixiang/assets/image-20240217095831590-01f500cf.png",Sa="/jixiang/assets/image-20240217095852154-454aadda.png",Wa="/jixiang/assets/image-20240217142322233-670322d3.png",wa="/jixiang/assets/image-20240217095929546-ed75c56c.png",Ea="/jixiang/assets/image-20240217150946059-c0a36bdf.png",Ha="/jixiang/assets/image-20240217152312594-94c5cdd7.png",Ia="/jixiang/assets/image-20240217095954283-d37019a8.png",Pa="/jixiang/assets/image-20240217161504839-5c25182e.png",Ta="/jixiang/assets/image-20240217100024566-bc1b80c4.png",Ua="/jixiang/assets/image-20240217162255117-64844343.png",qa="/jixiang/assets/image-20240217100046236-23738d11.png",za="/jixiang/assets/image-20240217100109742-02a6c5bd.png",Ga="/jixiang/assets/image-20240217172202993-f8df7e7f.png",Ja="/jixiang/assets/image-20240217173113730-0a065ab1.png",Ka="/jixiang/assets/image-20240217163642638-af1d9cbf.png",La="/jixiang/assets/image-20240217174904899-b3ae6199.png",Qa="/jixiang/assets/image-20240217175359670-cf51a36f.png",Ra="/jixiang/assets/image-20240217175700037-3ae6467b.png",Xa="/jixiang/assets/image-20240217180424167-ca5755f3.png",Ya="/jixiang/assets/image-20240217222840037-f8897c5b.png",Za="/jixiang/assets/image-20240217224307512-2034bac0.png",$a="/jixiang/assets/image-20240217224345505-209a05ba.png",a2="/jixiang/assets/image-20240217225325932-4b396b4e.png",i2="/jixiang/assets/image-20240218080208062-deede497.png",e2="/jixiang/assets/image-20240218080540154-aff9ba8f.png",s2="/jixiang/assets/image-20240218083146294-2939eea2.png",t2="/jixiang/assets/image-20240218092943803-e1b52a2a.png",p2="/jixiang/assets/image-20240218153637186-5a0faf88.png",n2="/jixiang/assets/image-20240218152607945-dc736c6c.png",r2="/jixiang/assets/image-20240218154731067-cdd7fb65.png",g2="/jixiang/assets/image-20240218185334589-9f1f379e.png",m2="/jixiang/assets/image-20240218175053385-17e06b3b.png",c2="/jixiang/assets/image-20240218175329226-46f04a0d.png",d2="/jixiang/assets/image-20240218192700448-774d0309.png",h2="/jixiang/assets/image-20240218193155628-681457d9.png",o2="/jixiang/assets/image-20240218193932716-9adac253.png",_2="/jixiang/assets/image-20240218200919425-00ea9742.png",l2="/jixiang/assets/image-20240218205142333-ac1738d7.png",x2="/jixiang/assets/image-20240218210055390-cb4791ee.png",j2="/jixiang/assets/image-20240218220436894-bd0453a3.png",f2={},b2=s('<h1 id="vue3高级语法补充" tabindex="-1"><a class="header-anchor" href="#vue3高级语法补充" aria-hidden="true">#</a> vue3高级语法补充</h1><h2 id="一-自定义指令" tabindex="-1"><a class="header-anchor" href="#一-自定义指令" aria-hidden="true">#</a> 一，自定义指令</h2><h3 id="_1-什么是自定义指令" tabindex="-1"><a class="header-anchor" href="#_1-什么是自定义指令" aria-hidden="true">#</a> 1. 什么是自定义指令</h3><p><img src="'+t+'" alt="image-20240215214244728"></p><h3 id="_2-实现输入框自动获取焦点" tabindex="-1"><a class="header-anchor" href="#_2-实现输入框自动获取焦点" aria-hidden="true">#</a> 2. 实现输入框自动获取焦点</h3><p><img src="'+p+'" alt="image-20240215214309488"></p><p>我们可以通过传统方法，先获取到dom元素，再调用focus方法。以实现自动获取焦点，代码和效果如下：</p><p><img src="'+n+'" alt="image-20240215222006199"></p><p>为了复用该逻辑，我们还可以将其抽取为hook。代码和效果如下：</p><p><img src="'+r+'" alt="image-20240215222713409"></p><h3 id="_3-局部自定义指令" tabindex="-1"><a class="header-anchor" href="#_3-局部自定义指令" aria-hidden="true">#</a> 3. 局部自定义指令</h3><p><img src="'+g+'" alt="image-20240215214340302"></p><p><img src="'+m+'" alt="image-20240216080630167"></p><h3 id="_4-全局自定义指令" tabindex="-1"><a class="header-anchor" href="#_4-全局自定义指令" aria-hidden="true">#</a> 4. 全局自定义指令</h3><p><img src="'+c+'" alt="image-20240215214410381"></p><p>在main.js中我们可以定义全局自定义指令，如下：</p><p><img src="'+d+'" alt="image-20240216080903736"></p><p>但是在实际开发中，我们可能会定义很多自定义指令，一个自定义指令对应一个js文件。因此在src/directives文件夹下，创建focus.js。如下：</p><p><img src="'+h+'" alt="image-20240216082018558"></p><p>然而，我们可能会定义非常多的自定义指令。因此在directives文件夹下创建index.js，将所有的自定义指令导入进去。在index.js默认导出的函数中，注册所有的自定义指令。在main.js中调用时，所有的自定义指令都会得到注册。代码如下：</p><p><img src="'+o+'" alt="image-20240216082329838"></p><p>效果如下：</p><p><img src="'+_+'" alt="image-20240216082416448"></p><h3 id="_5-指令的生命周期" tabindex="-1"><a class="header-anchor" href="#_5-指令的生命周期" aria-hidden="true">#</a> 5. 指令的生命周期</h3><p><img src="'+l+'" alt="image-20240215214436076"></p><p>初次渲染会执行三个钩子函数如下：</p><p><img src="'+x+'" alt="image-20240216092129374"></p><p>当我们点击按钮改变响应式数据，导致模板刷新。会执行其他钩子函数。代码和效果如下：</p><p><img src="'+j+'" alt="image-20240216092321415"></p><p>我们使用一个响应式数据和v-if，来控制使用自定义指令的元素显示或隐藏。会触发beforeUnmount，unmounted这两个钩子函数。代码和效果如下：</p><p><img src="'+f+'" alt="image-20240216092749485"></p><h3 id="_6-指令的参数和修饰符" tabindex="-1"><a class="header-anchor" href="#_6-指令的参数和修饰符" aria-hidden="true">#</a> 6. 指令的参数和修饰符</h3><p><img src="'+b+'" alt="image-20240215214527416"></p><p>在使用自定义指令时，还可以接收参数和自定义修饰符。代码和效果如下：</p><p><img src="'+u+'" alt="image-20240216094912981"></p><h3 id="_7-自定义指令的练习" tabindex="-1"><a class="header-anchor" href="#_7-自定义指令的练习" aria-hidden="true">#</a> 7. 自定义指令的练习</h3><p><img src="'+v+'" alt="image-20240216115054251"></p><p>示例：我们使用自定义指令替换h2中的内容。代码和效果如下：</p><p><img src="'+A+'" alt="image-20240216095045655"></p><p>小案例：我们以前经常给价格拼接单位符号，我们可以使用自定义指令来实现。</p><p>在src/directives文件夹下创建一个unit.js，代码如下：</p><p><img src="'+B+'" alt="image-20240216101135184"></p><p>在directives/index.js中引入，并调用。代码如下：</p><p><img src="'+V+'" alt="image-20240216101248960"></p><p>在App.vue组件中，使用之。代码和效果如下：</p><p><img src="'+N+'" alt="image-20240216101422110"></p><h3 id="_8-格式时间案例" tabindex="-1"><a class="header-anchor" href="#_8-格式时间案例" aria-hidden="true">#</a> 8. 格式时间案例</h3><p><img src="'+y+'" alt="image-20240216115142016"></p><p>在实际开发中，服务器通过给我们返回一个时间戳。我们需要将时间戳(十位或十三位)格式化成日期字符串。例如：2024-2-16。可以通过计算属性或方法，但是可能在很多组件中都要用到。为了代码简洁，我们使用自定义指令来实现。</p><p>在directives文件夹下创建ftime.js书写代码，然后在index.js中导入，并在函数中调用。如下：</p><p><img src="'+D+'" alt="image-20240216113615759"></p><p>在App.vue组件中，使用v-ftime指令，代码和效果如下：</p><p><img src="'+F+'" alt="image-20240216113717810"></p><p>但是，在ftime.js中时间的格式被写死。我们希望根据我们自定义指令接收的值，来动态格式化时间。因此我们修改代码，效果如下：</p><p><img src="'+k+'" alt="image-20240216114409745"></p><p>在后台管理系统中，不同角色有不同的权限。在按钮上使用自定义指令，通过获取到的权限数据，对按钮隐藏或显示。如下：</p><p><img src="'+C+'" alt="image-20240216114806488"></p><h2 id="二-内置组件teleport" tabindex="-1"><a class="header-anchor" href="#二-内置组件teleport" aria-hidden="true">#</a> 二，内置组件Teleport</h2><h3 id="_1-什么是teleport" tabindex="-1"><a class="header-anchor" href="#_1-什么是teleport" aria-hidden="true">#</a> 1. 什么是Teleport</h3><p><img src="'+M+'" alt="image-20240216115213977"></p><p>我们之前写的html结构和组件，只能被挂载到vue所关联的#app模板中。但是我们想让写出来的结构放到任意位置(比如：vue关联的容器之外)，我们可以使用vue3中内置的suspens组件。可以将suspens组件包裹的内容，传输到任意位置。</p><p>定义一个HelloWorld组件，并在App.vue组件中使用。代码和效果如下：</p><p><img src="'+O+'" alt="image-20240216123009741"></p><p>helloWorld组件，嵌套在App组件的div.content中。查看dom结构，如下：</p><p><img src="'+S+'" alt="image-20240216123111404"></p><h3 id="_2-实际应用" tabindex="-1"><a class="header-anchor" href="#_2-实际应用" aria-hidden="true">#</a> 2. 实际应用</h3><p><img src="'+W+'" alt="image-20240216115240476"></p><h3 id="_3-和组件结合" tabindex="-1"><a class="header-anchor" href="#_3-和组件结合" aria-hidden="true">#</a> 3. 和组件结合</h3><p><img src="'+w+'" alt="image-20240216115304310"></p><p>现在我们不希望helloWorld组件挂载在div.content中，我们希望其挂载到body中。我们可以通过teleport完成。代码和效果如下：</p><p><img src="'+E+'" alt="image-20240216123829738"></p><p>效果如下：</p><p><img src="'+H+'" alt="image-20240216123948335"></p><p>我们可以通过teleport中的内容传递给任意的元素，代码和效果如下：</p><p><img src="'+I+'" alt="image-20240216124726581"></p><h3 id="_4-多个teleport" tabindex="-1"><a class="header-anchor" href="#_4-多个teleport" aria-hidden="true">#</a> 4. 多个teleport</h3><p><img src="'+P+'" alt="image-20240216115332352"></p><p>如果多个teleport传递给同一个指定的元素，多个teleport中的内容不会进行覆盖，而是合并。代码和效果如下：</p><p><img src="'+T+'" alt="image-20240216125059341"></p><h2 id="三-内置组件suspense" tabindex="-1"><a class="header-anchor" href="#三-内置组件suspense" aria-hidden="true">#</a> 三，内置组件Suspense</h2><p><img src="'+U+'" alt="image-20240216130658492"></p><p>某些异步加载的组件，可能在初次渲染时，还没加载完成。因此我们可以使用suspense组件，如果默认插槽中的内容还没下载完毕，我们就使用fallback中的内容。代码和效果如下：</p><p><img src="'+q+'" alt="image-20240216130945586"></p><h2 id="四-安装插件的方式" tabindex="-1"><a class="header-anchor" href="#四-安装插件的方式" aria-hidden="true">#</a> 四，安装插件的方式</h2><p><img src="'+z+'" alt="image-20240216131127154"></p><p><img src="'+G+'" alt="image-20240216131150254"></p><p>app.use传入一个函数或者有install函数的对象，如下：</p><p><img src="'+J+'" alt="image-20240216135252745"></p><h4 id="a-对象写法" tabindex="-1"><a class="header-anchor" href="#a-对象写法" aria-hidden="true">#</a> A）对象写法</h4><p>插件中，可以定义全局指令，组件等。代码和效果如下：</p><p><img src="'+K+'" alt="image-20240216135736602"></p><p><img src="'+L+'" alt="image-20240216135708780"></p><h4 id="b-函数写法" tabindex="-1"><a class="header-anchor" href="#b-函数写法" aria-hidden="true">#</a> B）函数写法</h4><p><img src="'+Q+'" alt="image-20240216172520225"></p><h4 id="c-应用" tabindex="-1"><a class="header-anchor" href="#c-应用" aria-hidden="true">#</a> C）应用</h4><p>我们可以改造之前使用自定义指令相关的代码。</p><p>修改src/01_自定义指令/directives/index.js中的代码，如下：</p><p><img src="'+R+'" alt="image-20240216173138899"></p><p>src/main.js中的代码如下：</p><p><img src="'+X+'" alt="image-20240216173841538"></p><p>src/01_自定义指令/App.vue，代码和效果如下：</p><p><img src="'+Y+'" alt="image-20240216174026398"></p><h2 id="五-vue中渲染函数的使用" tabindex="-1"><a class="header-anchor" href="#五-vue中渲染函数的使用" aria-hidden="true">#</a> 五，Vue中渲染函数的使用</h2><h3 id="_1-什么是h函数" tabindex="-1"><a class="header-anchor" href="#_1-什么是h函数" aria-hidden="true">#</a> 1. 什么是h函数</h3><p><img src="'+Z+'" alt="image-20240216183256819"></p><p>我们之前在.vue文件中，编写的模板会先被渲染函数变成虚拟节点(VNode)，然后虚拟节点组合在一起，就变成了虚拟DOM(VDOM)。</p><p>流程：</p><p>vue组件中的html结构 -&gt; createVNode函数 —&gt; VNode —&gt; VDOM —&gt; 真实DOM</p><h3 id="_2-h函数的参数" tabindex="-1"><a class="header-anchor" href="#_2-h函数的参数" aria-hidden="true">#</a> 2. h函数的参数</h3><p><img src="'+$+'" alt="image-20240216183336283"></p><p>template中的结构最终转换成以下由createVNode组成的结构，如下：</p><p><img src="'+aa+'" alt="image-20240216190113861"></p><h3 id="_3-h函数的使用" tabindex="-1"><a class="header-anchor" href="#_3-h函数的使用" aria-hidden="true">#</a> 3. h函数的使用</h3><p><img src="'+ia+'" alt="image-20240216183408105"></p><p>我们可以不编写templat，而是使用h函数。同样也可以渲染出html结构。代码和效果如下：</p><p><img src="'+ea+'" alt="image-20240216192754059"></p><h3 id="_4-计数器案例" tabindex="-1"><a class="header-anchor" href="#_4-计数器案例" aria-hidden="true">#</a> 4. 计数器案例</h3><p><img src="'+sa+'" alt="image-20240216183433007"></p><p>在之前的代码中，h函数中的第三个参数我们都是写死的。现在我们准备写入动态数据，我们实现一个计数器。代码和效果如下：</p><p><img src="'+ta+'" alt="image-20240216195936439"></p><p>我们之前使用h函数，第一个参数都是html元素。也可以是一个组件，代码如下：</p><p><img src="'+pa+'" alt="image-20240216200442399"></p><p>效果如下：</p><p><img src="'+na+'" alt="image-20240216200508023"></p><h3 id="_5-在组合式api中使用" tabindex="-1"><a class="header-anchor" href="#_5-在组合式api中使用" aria-hidden="true">#</a> 5. 在组合式API中使用</h3><h4 id="a-在setup函数中使用" tabindex="-1"><a class="header-anchor" href="#a-在setup函数中使用" aria-hidden="true">#</a> A）在setup函数中使用</h4><p>我们在setup函数中实现计数器案例，代码和效果如下：</p><p><img src="'+ra+'" alt="image-20240216201610547"></p><h4 id="b-在setup语法糖中使用" tabindex="-1"><a class="header-anchor" href="#b-在setup语法糖中使用" aria-hidden="true">#</a> B）在setup语法糖中使用</h4><p>需要注意的是，在setup语法糖中使用render函数，是需要在template中使用render标签。代码和效果如下：</p><p><img src="'+ga+'" alt="image-20240216202337066"></p><h2 id="六-vue中编写jsx的语法" tabindex="-1"><a class="header-anchor" href="#六-vue中编写jsx的语法" aria-hidden="true">#</a> 六，Vue中编写jsx的语法</h2><p><img src="'+ma+'" alt="image-20240216213130385"></p><h3 id="_1-jsx语法的基本使用" tabindex="-1"><a class="header-anchor" href="#_1-jsx语法的基本使用" aria-hidden="true">#</a> 1. jsx语法的基本使用</h3><h4 id="a-安装jsx插件" tabindex="-1"><a class="header-anchor" href="#a-安装jsx插件" aria-hidden="true">#</a> A）安装jsx插件</h4><p><img src="'+ca+'" alt="image-20240216214906699"></p><h4 id="b-修改配置文件" tabindex="-1"><a class="header-anchor" href="#b-修改配置文件" aria-hidden="true">#</a> B）修改配置文件</h4><p><img src="'+da+'" alt="image-20240216214956048"></p><h4 id="c-使用jsx" tabindex="-1"><a class="header-anchor" href="#c-使用jsx" aria-hidden="true">#</a> C）使用jsx</h4><p>在App组件中，使用jsx。代码和效果如下：</p><p><img src="'+ha+'" alt="image-20240216215137403"></p><h3 id="_2-jsx案例" tabindex="-1"><a class="header-anchor" href="#_2-jsx案例" aria-hidden="true">#</a> 2. jsx案例</h3><p><img src="'+oa+'" alt="image-20240216213212645"></p><h4 id="a-选项式api" tabindex="-1"><a class="header-anchor" href="#a-选项式api" aria-hidden="true">#</a> A）选项式API</h4><p>在vue中，使用jsx实现计数器案例。代码和效果如下：</p><p><img src="'+_a+'" alt="image-20240216220011959"></p><p>我们还可以在jsx中使用组件，代码和效果如下：</p><p><img src="'+la+'" alt="image-20240216220257459"></p><h4 id="b-setup函数" tabindex="-1"><a class="header-anchor" href="#b-setup函数" aria-hidden="true">#</a> B）setup函数</h4><p><img src="'+xa+'" alt="image-20240216221155438"></p><h4 id="c-setup语法糖" tabindex="-1"><a class="header-anchor" href="#c-setup语法糖" aria-hidden="true">#</a> C）setup语法糖</h4><p>在setup语法糖中，实现计数器案例。代码和效果如下：</p><p><img src="'+ja+'" alt="image-20240216221624217"></p><h2 id="七-vue3中实现过渡动画" tabindex="-1"><a class="header-anchor" href="#七-vue3中实现过渡动画" aria-hidden="true">#</a> 七，vue3中实现过渡动画</h2><h3 id="_1-认识的动画" tabindex="-1"><a class="header-anchor" href="#_1-认识的动画" aria-hidden="true">#</a> 1. 认识的动画</h3><p><img src="'+fa+'" alt="image-20240216222312982"></p><h4 id="a-transition组件" tabindex="-1"><a class="header-anchor" href="#a-transition组件" aria-hidden="true">#</a> A）transition组件</h4><p><img src="'+ba+'" alt="image-20240216222342388"></p><p>transition在恰当的时机，给元素添加合适的类名。</p><p>使用transition组件实现元素切换或隐藏的动画，代码和效果如下：’</p><p><img src="'+ua+'" alt="image-20240217085648977"></p><h4 id="b-transition组件的原理" tabindex="-1"><a class="header-anchor" href="#b-transition组件的原理" aria-hidden="true">#</a> B） transition组件的原理</h4><p><img src="'+va+'" alt="image-20240216222406092"></p><ol><li>transition组件会自动寻找，目标元素有没有队友的做动画的类名，以及动画相关的属性。</li><li>动画开始和结束，对应的钩子函数会被执行。</li></ol><h3 id="_2-动画中常见类的作用" tabindex="-1"><a class="header-anchor" href="#_2-动画中常见类的作用" aria-hidden="true">#</a> 2. 动画中常见类的作用</h3><h4 id="a-过渡动画的类名" tabindex="-1"><a class="header-anchor" href="#a-过渡动画的类名" aria-hidden="true">#</a> A）过渡动画的类名</h4><p><img src="'+Aa+'" alt="image-20240216222550100"></p><h4 id="b-class命名规则" tabindex="-1"><a class="header-anchor" href="#b-class命名规则" aria-hidden="true">#</a> B）class命名规则</h4><p><img src="'+Ba+'" alt="image-20240217093414328"></p><p>如果transition组件，有name属性。那么定义的类名以name属性值开头。代码和效果如下：</p><p><img src="'+Va+'" alt="image-20240217094948835"></p><h3 id="_3-animation动画实现" tabindex="-1"><a class="header-anchor" href="#_3-animation动画实现" aria-hidden="true">#</a> 3. animation动画实现</h3><p><img src="'+Na+'" alt="image-20240217095810986"></p><p>前面我们是通过transition属性来实现动画效果，另外我们也可以使用animation来实现。</p><p>第一步：先定义进入序列帧动画，如下：</p><p><img src="'+ya+'" alt="image-20240217100827951"></p><p>第二步：先定义离开序列帧动画，如下：</p><p><img src="'+Da+'" alt="image-20240217102954289"></p><p>第三步：定义进入动画和离开动画要添加的类。</p><p>因我们使用的是animation动画，因此不需要开始和结束的类名。定义好 进入和离开的两个类。在元素进入动画时，会自动添加.why-enter-active，离开时自动添加.why-leave-active，从而执行定义的序列帧动画。</p><p><img src="'+Fa+'" alt="image-20240217103021868"></p><p>浏览器效果如下：</p><p><img src="'+ka+'" alt="image-20240217103120544"></p><p><img src="'+Ca+'" alt="image-20240217103202776"></p><p>离开和进入可以使用同一个序列帧动画，但是为了在离开时动画有所区分，可以在animation中添加一个reverse值。这样序列帧动画就可以倒着播放，代码和效果如下：</p><p><img src="'+Ma+'" alt="image-20240217103614529"></p><h3 id="_4-动画的常见属性" tabindex="-1"><a class="header-anchor" href="#_4-动画的常见属性" aria-hidden="true">#</a> 4. 动画的常见属性</h3><h4 id="a-同时使用两种动画" tabindex="-1"><a class="header-anchor" href="#a-同时使用两种动画" aria-hidden="true">#</a> A）同时使用两种动画</h4><p><img src="'+Oa+'" alt="image-20240217095831590"></p><h4 id="b-指定动画的显示时间" tabindex="-1"><a class="header-anchor" href="#b-指定动画的显示时间" aria-hidden="true">#</a> B）指定动画的显示时间</h4><p><img src="'+Sa+'" alt="image-20240217095852154"></p><p>虽然在css属性中，我们已经设置了过渡时间。但是我们也可以在transition组件上，设置过渡时间。</p><p>设置number类型，如果小于css属性内设置的时间。那么时间一到，动画会立即结束，也就是说后续动画不会再执行。代码如下：</p><p><img src="'+Wa+'" alt="image-20240217142322233"></p><p>当然也可以设置对象，分别指定进入和离开的时间。</p><h4 id="c-过渡模式" tabindex="-1"><a class="header-anchor" href="#c-过渡模式" aria-hidden="true">#</a> C）过渡模式</h4><p><img src="'+wa+'" alt="image-20240217095929546"></p><p>使用v-if、v-else执行动画时，两个元素的动画会同时进行。代码和效果如下：</p><p><img src="'+Ea+'" alt="image-20240217150946059"></p><ul><li>in-out：先执行进入动画，再执行离开动画。</li><li>out-in：先执行离开动画，再执行进入动画。</li></ul><p>两个元素的动画会同时执行，这样看起来并不协调。因此我们可以设置mode属性，代码和效果如下：</p><p><img src="'+Ha+'" alt="image-20240217152312594"></p><h4 id="d-动态组件的切换" tabindex="-1"><a class="header-anchor" href="#d-动态组件的切换" aria-hidden="true">#</a> D）动态组件的切换</h4><p><img src="'+Ia+'" alt="image-20240217095954283"></p><p>使用动态组件时，切换不同的组件也会有动画。准备两个组件，Home和About。代码和效果如下：</p><p><img src="'+Pa+'" alt="image-20240217161504839"></p><h4 id="e-appear初次渲染" tabindex="-1"><a class="header-anchor" href="#e-appear初次渲染" aria-hidden="true">#</a> E）appear初次渲染</h4><p><img src="'+Ta+'" alt="image-20240217100024566"></p><p>但是一上来，home组件就直接显示在页面上。如果我们希望一上来就有动画，就需要添加appear属性。代码和效果如下：</p><p><img src="'+Ua+'" alt="image-20240217162255117"></p><h3 id="_5-列表元素动画组实现" tabindex="-1"><a class="header-anchor" href="#_5-列表元素动画组实现" aria-hidden="true">#</a> 5. 列表元素动画组实现</h3><h4 id="a-什么是列表过渡" tabindex="-1"><a class="header-anchor" href="#a-什么是列表过渡" aria-hidden="true">#</a> A）什么是列表过渡</h4><p><img src="'+qa+'" alt="image-20240217100046236"></p><p>目前为止，过渡动画我们只要是针对单个元素或者组件的：</p><ul><li>要么是单个节点；</li><li>要么是同一时间渲染多个节点中的一个；</li></ul><h4 id="b-列表过渡案例" tabindex="-1"><a class="header-anchor" href="#b-列表过渡案例" aria-hidden="true">#</a> B）列表过渡案例</h4><p><img src="'+za+'" alt="image-20240217100109742"></p><p>如果向一个列表中添加或删除元素，也想实现动画效果 。应该怎么做？</p><p>第一步：我们需要用到transition-group组件。我们可以通过tag属性，指定transition-group组件渲染成什么元素。代码和效果如下：</p><p><img src="'+Ga+'" alt="image-20240217172202993"></p><p>第二步：定义动画的类名。代码如下：</p><p><img src="'+Ja+'" alt="image-20240217173113730"></p><p>到此就实现列表过渡动画。</p><h3 id="_6-列表元素的移动动画" tabindex="-1"><a class="header-anchor" href="#_6-列表元素的移动动画" aria-hidden="true">#</a> 6. 列表元素的移动动画</h3><p><img src="'+Ka+'" alt="image-20240217163642638"></p><h4 id="a-其他移动元素的动画" tabindex="-1"><a class="header-anchor" href="#a-其他移动元素的动画" aria-hidden="true">#</a> A）其他移动元素的动画</h4><p>上面的案例中，插入的元素是有动画的。但是，其他元素的移动是没有动画的。我们还需要定义一个move类。代码和效果如下：</p><p><img src="'+La+'" alt="image-20240217174904899"></p><p>但是我们发现，删除元素时。其他移动的元素没有动画效果，是什么原因导致其他移动的元素没有动画呢？我们该如何解决呢？</p><p><img src="'+Qa+'" alt="image-20240217175359670"></p><h4 id="b-打乱元素时的动画" tabindex="-1"><a class="header-anchor" href="#b-打乱元素时的动画" aria-hidden="true">#</a> B）打乱元素时的动画</h4><p>实现当我们打乱数字，也可以有动画效果。</p><p>第一步：安装underscore</p><p><img src="'+Ra+'" alt="image-20240217175700037"></p><p>第二部：导入shuffle函数，并且将之前reactive定义的数组改用ref定义。最终实现打乱数字时，也可以有动画效果。</p><p><img src="'+Xa+'" alt="image-20240217180424167"></p><h2 id="八-vue2-vue3响应式原理" tabindex="-1"><a class="header-anchor" href="#八-vue2-vue3响应式原理" aria-hidden="true">#</a> 八，vue2-vue3响应式原理</h2><h3 id="_1-什么是响应式" tabindex="-1"><a class="header-anchor" href="#_1-什么是响应式" aria-hidden="true">#</a> 1. 什么是响应式</h3><p><img src="'+Ya+'" alt="image-20240217222840037"></p><p>什么是响应式？当一个值发生变化，用到这个值的逻辑需要再次执行，这就是响应式。在vue中，响应式数据发生变化，render函数重新执行，生成新的VNode，新旧VNode通过diff进行对比，这就是响应式。</p><p><img src="'+Za+'" alt="image-20240217224307512"></p><h3 id="_2-响应式函数" tabindex="-1"><a class="header-anchor" href="#_2-响应式函数" aria-hidden="true">#</a> 2. 响应式函数</h3><p><img src="'+$a+'" alt="image-20240217224345505"></p><p><img src="'+a2+'" alt="image-20240217225325932"></p><p>将有依赖的函数，统一放入到一个数组中进行保管，如果依赖的数据发生变化，所有函数重新执行。注意：所有依赖的函数初次就会执行。</p><p><img src="'+i2+'" alt="image-20240218080208062"></p><h3 id="_3-响应式依赖收集" tabindex="-1"><a class="header-anchor" href="#_3-响应式依赖收集" aria-hidden="true">#</a> 3. 响应式依赖收集</h3><p><img src="'+e2+'" alt="image-20240218080540154"></p><p>如果有很多的响应式对象，我们都需要创建不同的数组来进行保存。但是我们可以创建一个类，不同的响应式对象会有不同的实例。代码和效果如下：</p><p><img src="'+s2+'" alt="image-20240218083146294"></p><p>到此为止，还有一个地方我们不满意。当依赖发生变化，我们每次需要手动调用dep.notify方法，来执行所有函数。</p><p>给依赖中每一个属性进行劫持(设置set和get)，当获取或修改属性时，会监听到。从而调用notify函数。</p><p><img src="'+t2+'" alt="image-20240218092943803"></p><h4 id="_4-对象的依赖管理" tabindex="-1"><a class="header-anchor" href="#_4-对象的依赖管理" aria-hidden="true">#</a> 4. 对象的依赖管理</h4><p><img src="'+p2+'" alt="image-20240218153637186"></p><p>上面的代码，将依赖name属性和age属性的函数都收集到了reactiveFns中。但是在下面的代码中，bar函数中并不依赖name属性。然而修改name属性时，还是bar函数还是会被执行。</p><p>说白了，我们将obj依赖不同属性的函数放到了同一个reactiveFns中。</p><p>代码和效果如下：</p><p><img src="'+n2+'" alt="image-20240218152607945"></p><p>因此我们需要针对同一个对象不同属性值，创建不同的reactiveFns。并且考虑到可能有多个对象，我们将以如下的数据结构，管理dep对象。</p><p><img src="'+r2+'" alt="image-20240218154731067"></p><h3 id="_5-自动依赖收集" tabindex="-1"><a class="header-anchor" href="#_5-自动依赖收集" aria-hidden="true">#</a> 5. 自动依赖收集</h3><p><img src="'+g2+'" alt="image-20240218185334589"></p><p>接下来，我们要去自动收集依赖，代码和执行流程如下：</p><p><img src="'+m2+'" alt="image-20240218175053385"></p><p>修改name属性，只会执行foo函数，而bar函数不会执行。实现自动收集依赖，效果如下：</p><p><img src="'+c2+'" alt="image-20240218175329226"></p><h3 id="_6-自动收集依赖的细节" tabindex="-1"><a class="header-anchor" href="#_6-自动收集依赖的细节" aria-hidden="true">#</a> 6. 自动收集依赖的细节</h3><p><img src="'+d2+'" alt="image-20240218192700448"></p><p>问题一：上面的代码有一个问题，当一个函数中使用了多次相同的属性，那么该函数会被添加多次。当对应属性改变时，该函数就会执行多次。解决方法：不使用数组，而是使用Set。代码和效果如下：</p><p><img src="'+h2+'" alt="image-20240218193155628"></p><p>因此dep对象中的reactiveFns可以使用set来定义，代码和效果如下：</p><p><img src="'+o2+'" alt="image-20240218193932716"></p><p>问题二：我们并不希望将添加reactiveFn放到get中，以为它是属于Dep的行为；解决方法：添加一个新的方法，用于收集依赖。代码和效果如下：</p><p><img src="'+_2+'" alt="image-20240218200919425"></p><h3 id="_7-对多个对象进行依赖收集" tabindex="-1"><a class="header-anchor" href="#_7-对多个对象进行依赖收集" aria-hidden="true">#</a> 7. 对多个对象进行依赖收集</h3><p>上面的代码，我们只是对obj对象进行依赖收集。现在将代码抽离到函数中，以便其他将其他对象改造成响应式。代码和效果如下：</p><p><img src="'+l2+'" alt="image-20240218205142333"></p><h3 id="_8-vue3响应式" tabindex="-1"><a class="header-anchor" href="#_8-vue3响应式" aria-hidden="true">#</a> 8. vue3响应式</h3><p>将之前的代码，使用proxy进行重构。代码和效果如下：</p><p><img src="'+x2+'" alt="image-20240218210055390"></p><p>上面的代码，我们直接手动操作对象。我们还可以使用reflect操作对象，代码和效果如下：</p><p><img src="'+j2+'" alt="image-20240218220436894"></p>',283),u2=[b2];function v2(A2,B2){return i(),e("div",null,u2)}const N2=a(f2,[["render",v2],["__file","13.html.vue"]]);export{N2 as default};

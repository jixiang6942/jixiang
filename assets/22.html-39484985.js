import{_ as a,o as e,c as i,a as s}from"./app-382cdfb3.js";const t="/jixiang/assets/image-20240814213043512-05d9f951.png",r="/jixiang/assets/image-20240814213345488-48629135.png",n="/jixiang/assets/image-20240814213828884-55a12123.png",p="/jixiang/assets/image-20240814214326631-2e94901e.png",d="/jixiang/assets/image-20240814215053520-86db89ae.png",h="/jixiang/assets/image-20240814215512685-91e1e0f2.png",c="/jixiang/assets/image-20240814220557195-0af1f512.png",g="/jixiang/assets/image-20240814221621757-d6b2d915.png",m="/jixiang/assets/image-20240814222206404-bbefd597.png",o="/jixiang/assets/image-20240815084022746-44d65077.png",_="/jixiang/assets/image-20240815084619448-1e1ac878.png",l="/jixiang/assets/image-20240815084838094-80eec2f6.png",b="/jixiang/assets/image-20240815091936104-9e3ad837.png",x={},f=s('<h2 id="一-day01" tabindex="-1"><a class="header-anchor" href="#一-day01" aria-hidden="true">#</a> 一，day01</h2><h3 id="_1-项目结构搭建" tabindex="-1"><a class="header-anchor" href="#_1-项目结构搭建" aria-hidden="true">#</a> 1，项目结构搭建</h3><h4 id="a-清理文件" tabindex="-1"><a class="header-anchor" href="#a-清理文件" aria-hidden="true">#</a> A）清理文件</h4><p>1）清空pages和utils文件夹中的文件，操作如下：</p><p><img src="'+t+'" alt="image-20240814213043512"></p><p>2）清空app.wxss和app.js文件中的内容，清空app.json文件夹中的pages数组。操作如下：</p><p><img src="'+r+'" alt="image-20240814213345488"></p><h4 id="b-搭建项目结构" tabindex="-1"><a class="header-anchor" href="#b-搭建项目结构" aria-hidden="true">#</a> B）搭建项目结构</h4><p><img src="'+n+'" alt="image-20240814213828884"></p><h3 id="_2-tabbar的页面配置" tabindex="-1"><a class="header-anchor" href="#_2-tabbar的页面配置" aria-hidden="true">#</a> 2，TabBar的页面配置</h3><h3 id="a-注册pages" tabindex="-1"><a class="header-anchor" href="#a-注册pages" aria-hidden="true">#</a> A）注册pages</h3><p>注册两个用于主页展示的pages，main-music和main-video。操作如下：</p><p><img src="'+p+'" alt="image-20240814214326631"></p><h4 id="b-配置tabbar" tabindex="-1"><a class="header-anchor" href="#b-配置tabbar" aria-hidden="true">#</a> B）配置TabBar</h4><p>引入图片、图标资源，并配置主页底部TabBar。代码和效果如下：</p><p><img src="'+d+'" alt="image-20240814215053520"></p><p>修改主页面中，music页面和视频页面顶部导航栏的文字。代码和效果如下：</p><p><img src="'+h+'" alt="image-20240814215512685"></p><h3 id="_3-请求mv列表和数据展示" tabindex="-1"><a class="header-anchor" href="#_3-请求mv列表和数据展示" aria-hidden="true">#</a> 3，请求MV列表和数据展示</h3><h4 id="a-封装网络请求" tabindex="-1"><a class="header-anchor" href="#a-封装网络请求" aria-hidden="true">#</a> A）封装网络请求</h4><p>对wx.request请求进行封装，代码如下：</p><p><img src="'+c+'" alt="image-20240814220557195"></p><h4 id="b-数据展示" tabindex="-1"><a class="header-anchor" href="#b-数据展示" aria-hidden="true">#</a> B）数据展示</h4><p>在main-video页面发送网络请求获取数据。代码如下：</p><p><img src="'+g+'" alt="image-20240814221621757"></p><p>main-video页面展示数据，代码和效果如下：</p><p><img src="'+m+'" alt="image-20240814222206404"></p><h3 id="c-网络请求抽离" tabindex="-1"><a class="header-anchor" href="#c-网络请求抽离" aria-hidden="true">#</a> C）网络请求抽离</h3><p>我们现在直接在页面中使用我们封装好的请求工具，发送请求，但是如果有一天请求的路径发生改变，需要一个个到具体的页面中修改。为了代码的可维护性，按模块将网络请求抽取到services文件夹中。操作和代码如下：</p><p><img src="'+o+'" alt="image-20240815084022746"></p><p>为了能够再页面中发送请求时，使用async/await的形式。我们需要将请求逻辑放入到一个单独的函数中。代码和效果如下：</p><p><img src="'+_+'" alt="image-20240815084619448"></p><h3 id="_4-videoitem的具体展现" tabindex="-1"><a class="header-anchor" href="#_4-videoitem的具体展现" aria-hidden="true">#</a> 4，videoItem的具体展现</h3><p><img src="'+l+'" alt="image-20240815084838094"></p><p>1）将该每一个item项抽离到的组件video-item中。操作如下：</p><p><img src="'+b+'" alt="image-20240815091936104"></p>',36),u=[f];function j(v,B){return e(),i("div",null,u)}const w=a(x,[["render",j],["__file","22.html.vue"]]);export{w as default};

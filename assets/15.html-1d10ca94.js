import{_ as a,o as s,c as i,a as e}from"./app-382cdfb3.js";const p="/jixiang/assets/image-20240219092218082-26165066.png",t="/jixiang/assets/image-20240219092327373-ddbdbd8c.png",n="/jixiang/assets/image-20240219092353411-1386506f.png",g="/jixiang/assets/image-20240219092450523-a3e8799b.png",r="/jixiang/assets/image-20240219095144745-a2fb9c4d.png",m="/jixiang/assets/image-20240219095802234-eb35d6fd.png",c="/jixiang/assets/image-20240219100019292-0c920786.png",o="/jixiang/assets/image-20240219092526711-1b362464.png",l="/jixiang/assets/image-20240219115439797-3cfc48ab.png",d="/jixiang/assets/image-20240219115523466-5f2e84bc.png",_="/jixiang/assets/image-20240219115805363-a9d463f8.png",h="/jixiang/assets/image-20240219120332881-2a8e24d7.png",x="/jixiang/assets/image-20240219092606529-8b1d0d67.png",u="/jixiang/assets/image-20240219145419431-8181b02d.png",b="/jixiang/assets/image-20240219151150365-71b7c0e4.png",j="/jixiang/assets/image-20240219155245401-9a5389d4.png",f="/jixiang/assets/image-20240219154850714-2d50d545.png",v="/jixiang/assets/image-20240219155812550-01667f30.png",k="/jixiang/assets/image-20240219160012230-07d0b6fc.png",S="/jixiang/assets/image-20240219162007949-3d37d5c3.png",L="/jixiang/assets/image-20240219164324090-57410bf3.png",E="/jixiang/assets/image-20240219170406690-30019376.png",q="/jixiang/assets/image-20240219171616192-1e9be5a3.png",C="/jixiang/assets/image-20240219173141397-1d4c004b.png",V="/jixiang/assets/image-20240219173304253-de14b7cc.png",y="/jixiang/assets/image-20240219092727670-f4c1eb53.png",A="/jixiang/assets/image-20240219182726027-f0214da4.png",w="/jixiang/assets/image-20240219092752528-c7fc14e3.png",W="/jixiang/assets/image-20240219222845672-4d7de4e0.png",P="/jixiang/assets/image-20240219223107974-5702ac20.png",T="/jixiang/assets/image-20240219223555921-7dfb58d5.png",z="/jixiang/assets/image-20240219224241118-1dfffda1.png",J="/jixiang/assets/image-20240219224345305-59a794d1.png",M="/jixiang/assets/image-20240219224546669-171d1467.png",Q="/jixiang/assets/image-20240219224757583-bcede28b.png",B="/jixiang/assets/image-20240219225000448-4a65c431.png",I="/jixiang/assets/image-20240219092830436-a30744b8.png",N="/jixiang/assets/image-20240219225843010-9fab8948.png",D="/jixiang/assets/image-20240219230529430-22c8afd5.png",G="/jixiang/assets/image-20240219230707712-e2234f7b.png",O="/jixiang/assets/image-20240219231753411-5aae4153.png",X="/jixiang/assets/image-20240219231921251-335b5cf9.png",F="/jixiang/assets/image-20240220082429545-10ca8899.png",H="/jixiang/assets/image-20240220082503756-32d2fd9f.png",K="/jixiang/assets/image-20240220082719848-7261a281.png",R="/jixiang/assets/image-20240220084038920-206ba74f.png",U="/jixiang/assets/image-20240220083834833-3810e692.png",Y="/jixiang/assets/image-20240220091445248-d7646f87.png",Z="/jixiang/assets/image-20240220091512681-49071790.png",$="/jixiang/assets/image-20240220092327255-96b9393b.png",a2="/jixiang/assets/image-20240219092943841-395b61f3.png",s2="/jixiang/assets/image-20240220092800682-cb0bd661.png",i2="/jixiang/assets/image-20240220093015395-769c3edb.png",e2="/jixiang/assets/image-20240220093541238-a7aa7285.png",p2="/jixiang/assets/image-20240220094228799-404a8f79.png",t2="/jixiang/assets/image-20240220094827322-3c04244f.png",n2="/jixiang/assets/image-20240220100021575-280e1dfc.png",g2="/jixiang/assets/image-20240219093009584-b3d301d1.png",r2="/jixiang/assets/image-20240220100741141-5c820a28.png",m2="/jixiang/assets/image-20240220103644468-af9e4a78.png",c2="/jixiang/assets/image-20240220110052080-79fb2195.png",o2="/jixiang/assets/image-20240219093104378-e452e2ca.png",l2="/jixiang/assets/image-20240220134105080-868865ff.png",d2="/jixiang/assets/image-20240220143135256-9b44e148.png",_2="/jixiang/assets/image-20240220144613782-c3ab6196.png",h2="/jixiang/assets/image-20240220144640194-69c59c5f.png",x2="/jixiang/assets/image-20240220145531219-b76a84f1.png",u2="/jixiang/assets/image-20240220150003232-6ff1e65d.png",b2="/jixiang/assets/image-20240219093140108-97096115.png",j2="/jixiang/assets/image-20240220160957325-df54c0d7.png",f2="/jixiang/assets/image-20240220161210899-46352cc0.png",v2="/jixiang/assets/image-20240220161753132-49418c1a.png",k2="/jixiang/assets/image-20240220162028079-49233380.png",S2="/jixiang/assets/image-20240220163636700-bc8d1ec3.png",L2="/jixiang/assets/image-20240220163717033-1bb7830f.png",E2="/jixiang/assets/image-20240220164746495-3cfeeb08.png",q2="/jixiang/assets/image-20240220164930468-90231cad.png",C2="/jixiang/assets/image-20240220165229482-ebf3a288.png",V2="/jixiang/assets/image-20240220165345189-bf2b6eb0.png",y2="/jixiang/assets/image-20240220165447166-05f7411a.png",A2="/jixiang/assets/image-20240220170702476-e06863d1.png",w2="/jixiang/assets/image-20240220170928282-de3bf5a7.png",W2="/jixiang/assets/image-20240220171415680-e9bbd404.png",P2="/jixiang/assets/image-20240220171705796-6a910ce0.png",T2="/jixiang/assets/image-20240220171804646-8a858e8b.png",z2="/jixiang/assets/image-20240220172746133-6b539c99.png",J2="/jixiang/assets/image-20240220204716408-5cf2fc7b.png",M2="/jixiang/assets/image-20240220210148221-7d52a90c.png",Q2="/jixiang/assets/image-20240220210435758-8a656f3a.png",B2="/jixiang/assets/image-20240220211633466-5ea1dbe4.png",I2="/jixiang/assets/image-20240220212128445-9c583f7a.png",N2="/jixiang/assets/image-20240220211933096-73219aca.png",D2="/jixiang/assets/image-20240220213028476-8c71aaf4.png",G2="/jixiang/assets/image-20240220213206991-6f540f0f.png",O2="/jixiang/assets/image-20240220213554945-35033316.png",X2="/jixiang/assets/image-20240220213837425-7fa40b30.png",F2="/jixiang/assets/image-20240220214449695-36c46494.png",H2="/jixiang/assets/image-20240220214606983-a17d64c3.png",K2="/jixiang/assets/image-20240220215958518-0cb9bb97.png",R2="/jixiang/assets/image-20240220220454039-7c1a861f.png",U2="/jixiang/assets/image-20240220221414289-ee16e860.png",Y2="/jixiang/assets/image-20240220222524649-a120d094.png",Z2="/jixiang/assets/image-20240220223026472-e978800a.png",$2="/jixiang/assets/image-20240220223747391-614dc2ff.png",aa="/jixiang/assets/image-20240220225916013-9ad6b9c7.png",sa={},ia=e('<h2 id="一-项目介绍" tabindex="-1"><a class="header-anchor" href="#一-项目介绍" aria-hidden="true">#</a> 一，项目介绍</h2><h3 id="_1-技术栈" tabindex="-1"><a class="header-anchor" href="#_1-技术栈" aria-hidden="true">#</a> 1. 技术栈</h3><p><img src="'+p+'" alt="image-20240219092218082"></p><h3 id="_2-项目预览" tabindex="-1"><a class="header-anchor" href="#_2-项目预览" aria-hidden="true">#</a> 2. 项目预览</h3><p><img src="'+t+'" alt="image-20240219092327373"></p><p><img src="'+n+'" alt="image-20240219092353411"></p><h2 id="二-启动项目" tabindex="-1"><a class="header-anchor" href="#二-启动项目" aria-hidden="true">#</a> 二，启动项目</h2><h3 id="_1-创建vue项目" tabindex="-1"><a class="header-anchor" href="#_1-创建vue项目" aria-hidden="true">#</a> 1. 创建Vue项目</h3><p><img src="'+g+`" alt="image-20240219092450523"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> create vue@latest

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用上面的命令，创建一个vue3+ts的项目。操作如下：</p><p><img src="`+r+'" alt="image-20240219095144745"></p><p>安装依赖，如下：</p><p><img src="'+m+'" alt="image-20240219095802234"></p><p>接下来，我们需要安装vscode推荐的插件，如下：</p><p><img src="'+c+'" alt="image-20240219100019292"></p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2><h3 id="_1-配置项目环境" tabindex="-1"><a class="header-anchor" href="#_1-配置项目环境" aria-hidden="true">#</a> 1. 配置项目环境</h3><p><img src="'+o+'" alt="image-20240219092526711"></p><h3 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-hidden="true">#</a></h3><h2 id="三-项目基本配置" tabindex="-1"><a class="header-anchor" href="#三-项目基本配置" aria-hidden="true">#</a> 三，项目基本配置</h2><h3 id="_1-配置项目icon" tabindex="-1"><a class="header-anchor" href="#_1-配置项目icon" aria-hidden="true">#</a> 1. 配置项目icon</h3><p>将准备好的图标替换默认图标，如下：</p><p><img src="'+l+'" alt="image-20240219115439797"></p><p>重启项目，查看效果如下：</p><p><img src="'+d+'" alt="image-20240219115523466"></p><h3 id="_2-修改项目标题" tabindex="-1"><a class="header-anchor" href="#_2-修改项目标题" aria-hidden="true">#</a> 2. 修改项目标题</h3><p>打开index.html文件，修改标题。代码和效果如下：</p><p><img src="'+_+'" alt="image-20240219115805363"></p><h3 id="_3-配置项目别名-vite默认配置" tabindex="-1"><a class="header-anchor" href="#_3-配置项目别名-vite默认配置" aria-hidden="true">#</a> 3. 配置项目别名(vite默认配置)</h3><p>vite默认会帮我们配置好路径别名，这样我们在写代码时，会有更加友好的代码提示。</p><p><img src="'+h+'" alt="image-20240219120332881"></p><h2 id="四-配置项目代码规范" tabindex="-1"><a class="header-anchor" href="#四-配置项目代码规范" aria-hidden="true">#</a> 四，配置项目代码规范</h2><h3 id="_1-editorconfig配置" tabindex="-1"><a class="header-anchor" href="#_1-editorconfig配置" aria-hidden="true">#</a> 1. editorconfig配置</h3><p><img src="'+x+'" alt="image-20240219092606529"></p><p>editorconfig配置文件的作用：在不同编辑器之间，保持相同的代码风格。比如：字符格式，utf-8还是别的。</p><p>第一步：在VSCode中，安装EditorConfig for VS Code插件，操作如下：</p><p><img src="'+u+'" alt="image-20240219145419431"></p><p>在项目根目录中，创建.editorconfig文件，如下：</p><p><img src="'+b+`" alt="image-20240219151150365"></p><h3 id="_2-prettier配置文件" tabindex="-1"><a class="header-anchor" href="#_2-prettier配置文件" aria-hidden="true">#</a> 2. prettier配置文件</h3><p>Prettier 是一款强大的代码格式化工具，支持 JavaScript、TypeScript、CSS、SCSS、Less、JSX、Angular、Vue、GraphQL、JSON、Markdown 等语言，基本上前端能用到的文件格式它都可以搞定，是当下最流行的代码格式化工具。</p><p>1.安装prettier</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> prettier <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.配置.prettierrc文件：</p><ul><li>useTabs：使用tab缩进还是空格缩进，选择false；</li><li>tabWidth：tab是空格的情况下，是几个空格，选择2个；</li><li>printWidth：当行字符的长度，推荐80，也有人喜欢100或者120；</li><li>singleQuote：使用单引号还是双引号，选择true，使用单引号；</li><li>trailingComma：在多行输入的尾逗号是否添加，设置为 <code>none</code>，比如对象类型的最后一个属性后面是否加一个，；</li><li>semi：语句末尾是否要加分号，默认值true，选择false表示不加；</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;useTabs&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token property">&quot;tabWidth&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token property">&quot;printWidth&quot;</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>
  <span class="token property">&quot;singleQuote&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;trailingComma&quot;</span><span class="token operator">:</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;semi&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.VSCod中的配置</p><ul><li>settings =&gt;format on save =&gt; 勾选上</li><li>settings =&gt; editor default format =&gt; 选择 prettier</li></ul><ol start="4"><li>测试prettier是否生效</li></ol><ul><li>测试一：在代码中保存代码；</li><li>测试二：配置一次性修改的命令；</li></ul><p>5.VSCode需要安装prettier的插件</p><p>使用vite创建vue3项目时，已经安装了prettier插件，如下：</p><p><img src="`+j+'" alt="image-20240219155245401"></p><p>第三步：书写测试代码，ctrl+s保存，查看效果。prettier并没有帮我们格式化。代码和效果如下：</p><p><img src="'+f+'" alt="image-20240219154850714"></p><p>要想使用prettier格式化我们书写的代码，可以在命令行中，输入npx run format，如下：</p><p><img src="'+v+'" alt="image-20240219155812550"></p><p>但是我们希望ctrl+s保存代码后，自动对代码进行格式化。因此我们需要在VSCode中安装prettier插件，如下：</p><p><img src="'+k+'" alt="image-20240219160012230"></p><p>但是我们在安装完插件后，ctrl+s保存代码还是没有进行格式化。需要在vscode中进行设置，如下：</p><p><img src="'+S+'" alt="image-20240219162007949"></p><p>设置完之后，ctrl+s可以成功格式化代码。</p><p>但是目前代码格式化的风格，并不是我们想要的。将我们准备好的配置，对.prettierrc.json文件进行覆盖。</p><p>代码和效果如下：</p><p><img src="'+L+'" alt="image-20240219164324090"></p><h3 id="_3-esllint配置" tabindex="-1"><a class="header-anchor" href="#_3-esllint配置" aria-hidden="true">#</a> 3. ESLlint配置</h3><p>如果我们希望在我们书写代码时，就能提示我们哪些代码书写不规范。因此我们需要用到ESLint。</p><p>虽然我们在使用vite初始化项目时，已经安装过了ESLint，但是那个属于命令行级别。只有当我们在命令行输入命令时，才会对我们的代码进行检测。因此我们需要在VSCode中安装ESLInt插件。操作如下：</p><p><img src="'+E+'" alt="image-20240219170406690"></p><p>但是，我们在安装完插件，ctrl+s保存并格式化代码。ESLint会报错，因为prettier和ESlint的规则发生了冲突，例如：prettier中的配置是使用分号，但是ESLint在检测代码时，发现有分号，所以报错。因此我们需要修改.eslintrc.js文件，如下：</p><p><img src="'+q+'" alt="image-20240219171616192"></p><p>到此prettie和ESLint之间就不会在发生冲突。</p><p>但是如果我们希望ESLint忽视某条规则，我们可以将提示规则复制到.eslintrc.cjs中，对其关闭。代码如下：</p><p><img src="'+C+'" alt="image-20240219173141397"></p><p>重启编辑器后，可以看到之前定义的变量未使用的错误会消失。代码和效果如下：</p><p><img src="'+V+'" alt="image-20240219173304253"></p><h2 id="五-目录结构的划分" tabindex="-1"><a class="header-anchor" href="#五-目录结构的划分" aria-hidden="true">#</a> 五，目录结构的划分</h2><p><img src="'+y+'" alt="image-20240219092727670"></p><p>创建对应文件夹，结构如下：</p><p><img src="'+A+'" alt="image-20240219182726027"></p><h3 id="六-css样式重置" tabindex="-1"><a class="header-anchor" href="#六-css样式重置" aria-hidden="true">#</a> 六，CSS样式重置</h3><p><img src="'+w+'" alt="image-20240219092752528"></p><p>第一步：安装normalize.css，操作如下：</p><p><img src="'+W+'" alt="image-20240219222845672"></p><p>第二步：想要normalize.css生效，在main.ts中引入。代码如下：</p><p><img src="'+P+'" alt="image-20240219223107974"></p><p>第三步：在src/css文件夹下，创建reset.less、common.less和index.less。如下：</p><p><img src="'+T+'" alt="image-20240219223555921"></p><p>第四步：在index.less中，导入reset.less和common.less，代码如下：</p><p><img src="'+z+'" alt="image-20240219224241118"></p><p>第五步：将准备好的重置样式放入到reset.css中，代码如下：</p><p><img src="'+J+'" alt="image-20240219224345305"></p><p>第六步：为了让刚才的操作生效，在main.ts中引入index.ts，代码如下：</p><p><img src="'+M+'" alt="image-20240219224546669"></p><p>第七步：项目默认不能使用less，因此我们需要安装less。操作如下：</p><p><img src="'+Q+'" alt="image-20240219224757583"></p><p>第八步：书写测试代码，代码和效果如下：</p><p><img src="'+B+'" alt="image-20240219225000448"></p><h2 id="七-配置路由" tabindex="-1"><a class="header-anchor" href="#七-配置路由" aria-hidden="true">#</a> 七，配置路由</h2><p><img src="'+I+'" alt="image-20240219092830436"></p><p>第一步：安装路由</p><p><img src="'+N+'" alt="image-20240219225843010"></p><p>第二步：在src/router文件夹下，创建index.ts，书写基本代码。如下：</p><p><img src="'+D+'" alt="image-20240219230529430"></p><p>第三步：在man.ts中引入，并use来注册插件。代码如下：</p><p><img src="'+G+'" alt="image-20240219230707712"></p><p>第四步：为了配置路由的映射关系，在views文件夹下创建组件。代码如下：</p><p><img src="'+O+'" alt="image-20240219231753411"></p><p>第五步：为了避免使用一个单词作为组件名，代码ESLint报错。因此我们修改ESLint规则，代码如下：</p><p><img src="'+X+'" alt="image-20240219231921251"></p><p>第六步：每次新建.vue文件，生成基本结构，都要给script标签添加lang=ts，因此我们生成代码块。如下：</p><p><img src="'+F+'" alt="image-20240220082429545"></p><p><img src="'+H+'" alt="image-20240220082503756"></p><p>第七步：在src/views文件夹下，编写login和main组件的基本结构，如下：</p><p><img src="'+K+'" alt="image-20240220082719848"></p><p>第八步：给Login和Main组件配置路由规则，放置路由出口。并测试。代码和效果如下：</p><p><img src="'+R+'" alt="image-20240220084038920"></p><p><img src="'+U+'" alt="image-20240220083834833"></p><p>第八步：如果用户在地址栏输入不存在的路径，需要跳转到404页面。准备404页面，和配置对应的路由。代码和效果如下：</p><p><img src="'+Y+'" alt="image-20240220091445248"></p><p><img src="'+Z+'" alt="image-20240220091512681"></p><p><img src="'+$+'" alt="image-20240220092327255"></p><h2 id="八-状态管理" tabindex="-1"><a class="header-anchor" href="#八-状态管理" aria-hidden="true">#</a> 八，状态管理</h2><p><img src="'+a2+'" alt="image-20240219092943841"></p><p>第一步：安装pinia，操作如下：</p><p><img src="'+s2+'" alt="image-20240220092800682"></p><p>第二步：在src/store文件夹下，创建pinia，并导出。代码如下：</p><p><img src="'+i2+'" alt="image-20240220093015395"></p><p>第三步：在main.ts中引入，并挂载。代码如下：</p><p><img src="'+e2+'" alt="image-20240220093541238"></p><p>第四步：为了测试，创建一个counter仓库，并完成基本配置。如下：</p><p><img src="'+p2+'" alt="image-20240220094228799"></p><p>第五步：在Main组件中使用counter仓库，代码和效果如下：</p><p><img src="'+t2+'" alt="image-20240220094827322"></p><p><img src="'+n2+'" alt="image-20240220100021575"></p><h2 id="十-网络请求" tabindex="-1"><a class="header-anchor" href="#十-网络请求" aria-hidden="true">#</a> 十，网络请求</h2><p><img src="'+g2+'" alt="image-20240219093009584"></p><p>第一步：安装axios，操作如下：</p><p><img src="'+r2+'" alt="image-20240220100741141"></p><p>第二步：将之前封装好的请求相关代码，引入到src/service文件夹下。如下：</p><p><img src="'+m2+'" alt="image-20240220103644468"></p><p>第三步：在Login组件中，发送网络请求进行测试。代码和效果如下：</p><p><img src="'+c2+'" alt="image-20240220110052080"></p><p>到此网络请求模块搭建完毕。</p><h2 id="十一-区分环境" tabindex="-1"><a class="header-anchor" href="#十一-区分环境" aria-hidden="true">#</a> 十一，区分环境</h2><p><img src="'+o2+'" alt="image-20240219093104378"></p><p>为什么要区分开发环境和生产环境？因为有一些变量和标识符，在开发环境和生产环境中是不一样的。开发时，我们使用开发服务器。上线时，使用上线服务器。因为直接在线上服务器开发，可能会造成问题。</p><p>第一种：人为地根据开发环境还是生成环境修改变量的值，如下：</p><p><img src="'+l2+'" alt="image-20240220134105080"></p><p>第二种：使用vite给我们提供的环境变量来判断当前开发环境还是生产环境。先介绍一下vite提供的这些环境变量。</p><p><img src="'+d2+'" alt="image-20240220143135256"></p><p>第三种：Vite使用dotenv 从你的环境目录中的下列文件加载额外的环境变量。只有以 VITE_ 为前缀的变量才会暴露给经过 vite 处理的代码。并且会被添加到i<wbr>mport.meta.env中。</p><p>先在项目根目录创建.env文件，定义变量。然后vite就会读取该文件，你就可以在代码中使用该变量。如下：</p><p><img src="'+_2+'" alt="image-20240220144613782"></p><p>效果如下：</p><p><img src="'+h2+'" alt="image-20240220144640194"></p><p>注意：.env文件不管在开发还是生产环境都会被读取。.env.production只会在生产环境被读取，.env.development只会在开发环境被读取。来验证如下：</p><p><img src="'+x2+'" alt="image-20240220145531219"></p><p><img src="'+u2+'" alt="image-20240220150003232"></p><p>值得注意的是：.env文件名如果后面不加.local会被git所管理的。意味着当别人拉取你的代码时，也会有.env文件。</p><h2 id="十二-element-plus集成" tabindex="-1"><a class="header-anchor" href="#十二-element-plus集成" aria-hidden="true">#</a> 十二，Element-Plus集成</h2><p><img src="'+b2+'" alt="image-20240219093140108"></p><h3 id="_1-全部引入" tabindex="-1"><a class="header-anchor" href="#_1-全部引入" aria-hidden="true">#</a> 1. 全部引入</h3><p>第一步：安装element-plus，操作如下：</p><p><img src="'+j2+'" alt="image-20240220160957325"></p><p>第二步：全局引入，代码如下：</p><p><img src="'+f2+'" alt="image-20240220161210899"></p><p>第三步：在main.ts中，引入Elemtn-plus(包括样式)，并use进行挂载。代码如下：</p><p><img src="'+v2+'" alt="image-20240220161753132"></p><p>第四步：在App组件中，使用button组件。代码和效果如下：</p><p><img src="'+k2+'" alt="image-20240220162028079"></p><p>第五步：引入插件，以获得更加有好的提示，代码如下：</p><p>到目前位置，我们使用组件时，并不会有提示我们该组件包括哪些属性，也不能看到组件的类型，如下：</p><p><img src="'+S2+'" alt="image-20240220163636700"></p><p>因此我们需要配置一个插件，代码和效果如下：</p><p><img src="'+L2+'" alt="image-20240220163717033"></p><p>在tsconfig.app.json中配置，如下:</p><p><img src="'+E2+'" alt="image-20240220164746495"></p><p>在App组件中，查看效果如下：</p><p><img src="'+q2+'" alt="image-20240220164930468"></p><h3 id="_2-按需引入" tabindex="-1"><a class="header-anchor" href="#_2-按需引入" aria-hidden="true">#</a> 2. 按需引入</h3><p>第一步：首先你需要安装<code>unplugin-vue-components</code> 和 <code>unplugin-auto-import</code>这两款插件</p><p><img src="'+C2+'" alt="image-20240220165229482"></p><p>操作如下：</p><p><img src="'+V2+'" alt="image-20240220165345189"></p><p>第二步：然后把下列代码插入到你的 <code>Vite</code> 或 <code>Webpack</code> 的配置文件中，如下：</p><p><img src="'+y2+'" alt="image-20240220165447166"></p><p>在vite.config.ts中进行配置，代码和效果如下：</p><p><img src="'+A2+'" alt="image-20240220170702476"></p><p>第三步：注意此时，项目根目录会自动生成两个文件，如下：</p><p><img src="'+w2+'" alt="image-20240220170928282"></p><p>第四步：此时，我们在使用element-plus组件时，并没有提示。这是为什么呢？</p><p><img src="'+W2+'" alt="image-20240220171415680"></p><p><img src="'+P2+'" alt="image-20240220171705796"></p><p><img src="'+T2+'" alt="image-20240220171804646"></p><p>到此按需引入就配置完成。</p><p>需要注意的是：反馈组件，例如：弹窗，消息提示等。我们使用的那两个插件，并不会帮我们自动导入。因此我们需要手动导入或其他办法。</p><p><img src="'+z2+'" alt="image-20240220172746133"></p><h2 id="十三-登录页面开发" tabindex="-1"><a class="header-anchor" href="#十三-登录页面开发" aria-hidden="true">#</a> 十三，登录页面开发</h2><p>我们先来看看APP组件的大小，添加样式。代码和效果如下：</p><p><img src="'+J2+'" alt="image-20240220204716408"></p><p>这一类后台管理系统，首先要做的就是让根组件也就是App组件占满整个屏幕。并且在登录页中，也方便我们对登录表单进行居中。</p><p>方式一：由于挂载的#app元素是body、html的子元素。并且body和html都没有高度，因此想让App组件的根元素占满整个屏幕，他们三个高度都需要设置为百分之百。代码和效果如下：</p><p><img src="'+M2+'" alt="image-20240220210148221"></p><p>方式二：直接给App组件的给元素设置100vh，100vw。这样就不需要找它们的父元素进行设置。就能占满整个屏幕。代码和效果如下：</p><p><img src="'+Q2+'" alt="image-20240220210435758"></p><p>第一步：搭建登录页面的背景。预期效果如下：</p><p><img src="'+B2+'" alt="image-20240220211633466"></p><p>登录页面的背景图片占满整个屏幕，因此我们需要让Login组件的根元素占满整个屏幕。代码和效果如下：</p><p><img src="'+I2+'" alt="image-20240220212128445"></p><p>效果如下：</p><p><img src="'+N2+'" alt="image-20240220211933096"></p><p>第二步：将准备好的图片放入到src/assets/img中，并在代码中引入。代码和效果如下：</p><p><img src="'+D2+'" alt="image-20240220213028476"></p><p>第三步：书写样式，让登录页面中的登录表单模块，水平垂直居中。代码和效果如下：</p><p><img src="'+G2+'" alt="image-20240220213206991"></p><p>第四步：将登录表单抽取为一个单独的组件，并引入。</p><p>在src/views/login文件夹下，创建c-cpns文件夹。并在此文件夹中创建login-panel组件，搭建基本结构。如下：</p><p><img src="'+O2+'" alt="image-20240220213554945"></p><p>在Login组件中引入并使用，代码和效果如下：</p><p><img src="'+X2+'" alt="image-20240220213837425"></p><p>第五步：搭建登录表单基本结构，代码和效果如下：</p><p><img src="'+F2+'" alt="image-20240220214449695"></p><p>第六步：我们从易到难进行搭建，因此我们先单价记住密码，忘记密码部分。预期效果如下：</p><p><img src="'+H2+'" alt="image-20240220214606983"></p><p>该结构属于表单，因此我们直接在element组件库，找到对应的组件。引入到我们的代码中，如下：</p><p><img src="'+K2+'" alt="image-20240220215958518"></p><p>忘记密码模块属于超链接，因此在element组件库找到对应的组件。在代码中使用，如下：</p><p><img src="'+R2+'" alt="image-20240220220454039"></p><p>我们在login-panel组件中直接引入我们准备好的样式，代码和效果如下：</p><p><img src="'+U2+'" alt="image-20240220221414289"></p><p>第七步：搭建登录按钮。</p><p>在element组件库中找到按钮，Login-panel中使用。如下：</p><p><img src="'+Y2+'" alt="image-20240220222524649"></p><p>我们想要修改按钮的高度，查看button组件对应的样式，如下：</p><p><img src="'+Z2+'" alt="image-20240220223026472"></p><p>我们发现button的高度来资源--el-button-size这个变量。因此我们在src/assets/common.css中，重新定义这个变量，代码和效果如下：</p><p><img src="'+$2+'" alt="image-20240220223747391"></p><p>我们可以在自己定义的类中，重新定义这个CSS变量。如下：</p><p><img src="'+aa+'" alt="image-20240220225916013"></p>',241),ea=[ia];function pa(ta,na){return s(),i("div",null,ea)}const ra=a(sa,[["render",pa],["__file","15.html.vue"]]);export{ra as default};

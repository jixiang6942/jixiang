import{_ as a,o as i,c as e,a as s}from"./app-382cdfb3.js";const t="/jixiang/assets/image-20240505164516658-bef7497d.png",r="/jixiang/assets/image-20240505164834400-7025afd7.png",p="/jixiang/assets/image-20240505165855845-02d087ea.png",n="/jixiang/assets/image-20240505170028348-00304ff9.png",g="/jixiang/assets/image-20240505171019370-4672cfe3.png",c="/jixiang/assets/image-20240505171153036-62f3909a.png",d="/jixiang/assets/image-20240505171714905-4321a2e5.png",o="/jixiang/assets/image-20240505181242485-bc59a185.png",m="/jixiang/assets/image-20240505182212968-02d4d96f.png",h="/jixiang/assets/image-20240506192008604-d01ddb16.png",_="/jixiang/assets/image-20240506194630731-823837c4.png",l="/jixiang/assets/image-20240506200005029-66f49307.png",x="/jixiang/assets/image-20240506211031503-3074516f.png",b="/jixiang/assets/image-20240506213935590-495f6436.png",f="/jixiang/assets/image-20240506214853622-c800c1f4.png",j="/jixiang/assets/image-20240506220648389-fd8c0563.png",u="/jixiang/assets/image-20240506214959519-2200454c.png",y="/jixiang/assets/image-20240506215609055-86379dee.png",B="/jixiang/assets/image-20240506215846248-48a0ecfa.png",S="/jixiang/assets/image-20240506220449499-85027b3f.png",E="/jixiang/assets/image-20240506222907596-28969aeb.png",w="/jixiang/assets/image-20240506223413657-f730e5e0.png",A="/jixiang/assets/image-20240506225604376-1de28c96.png",O="/jixiang/assets/image-20240507103754129-fedd128f.png",P="/jixiang/assets/image-20240507105706777-283098dc.png",C="/jixiang/assets/image-20240507111209167-f0994331.png",D="/jixiang/assets/image-20240507111641809-9d0b7efb.png",F="/jixiang/assets/image-20240507111922403-8d44a703.png",k="/jixiang/assets/image-20240507121645548-2783d75b.png",v="/jixiang/assets/image-20240507123056229-ad44ce7d.png",N="/jixiang/assets/image-20240507132747529-a5f18c39.png",V="/jixiang/assets/image-20240507142022920-c207a67f.png",q="/jixiang/assets/image-20240507142326885-2bf48fa7.png",z="/jixiang/assets/image-20240507144405507-76bc2249.png",G="/jixiang/assets/image-20240507144429439-24f98096.png",H="/jixiang/assets/image-20240507144626482-e0436201.png",I="/jixiang/assets/image-20240507170128435-eab457e0.png",J="/jixiang/assets/image-20240507170853585-e85f63d3.png",K="/jixiang/assets/image-20240507171314070-d3e1f4b2.png",L="/jixiang/assets/image-20240507171937950-aeeb1932.png",M="/jixiang/assets/image-20240507175910989-1e7d6174.png",Q="/jixiang/assets/image-20240507191226226-52a97e30.png",R="/jixiang/assets/image-20240507223602966-aa349b4f.png",T="/jixiang/assets/image-20240507224106766-fac8b926.png",U="/jixiang/assets/image-20240507225003397-5b0365f5.png",W="/jixiang/assets/image-20240507225642059-2f11ea63.png",X="/jixiang/assets/image-20240508084230697-16221482.png",Y="/jixiang/assets/image-20240508090106323-98a69414.png",Z="/jixiang/assets/image-20240508095720796-5f5cdbdd.png",$="/jixiang/assets/image-20240508100755312-b2943a14.png",aa="/jixiang/assets/image-20240508101312083-60babadd.png",ia="/jixiang/assets/image-20240508105542647-838adad2.png",ea="/jixiang/assets/image-20240508105934877-b69eca2e.png",sa="/jixiang/assets/image-20240508110119963-1e335a81.png",ta="/jixiang/assets/image-20240508110952066-fb019f4a.png",ra="/jixiang/assets/image-20240508111441645-d113a6cf.png",pa="/jixiang/assets/image-20240508112533572-96d6d736.png",na="/jixiang/assets/image-20240508112558359-f11b9f95.png",ga="/jixiang/assets/image-20240508190516634-cf435b6d.png",ca="/jixiang/assets/image-20240508122524580-2961e2be.png",da="/jixiang/assets/image-20240508122405007-b1b8a35d.png",oa="/jixiang/assets/image-20240508122912200-255c3d62.png",ma="/jixiang/assets/image-20240508135040888-3f737a80.png",ha="/jixiang/assets/image-20240508222821153-9229a5b3.png",_a="/jixiang/assets/image-20240509101821550-f8bc5d10.png",la="/jixiang/assets/image-20240509103049804-7962c751.png",xa="/jixiang/assets/image-20240509101143291-ddf1ce1f.png",ba="/jixiang/assets/image-20240509102108910-990d7242.png",fa="/jixiang/assets/image-20240509102820584-febb6497.png",ja="/jixiang/assets/image-20240509105511208-aecf0612.png",ua="/jixiang/assets/image-20240509110633528-db2f4dfd.png",ya={},Ba=s('<h1 id="es5和es6实现继承" tabindex="-1"><a class="header-anchor" href="#es5和es6实现继承" aria-hidden="true">#</a> ES5和ES6实现继承</h1><h2 id="一-es5实现继承" tabindex="-1"><a class="header-anchor" href="#一-es5实现继承" aria-hidden="true">#</a> 一，ES5实现继承</h2><h3 id="_1-对象和函数的原型" tabindex="-1"><a class="header-anchor" href="#_1-对象和函数的原型" aria-hidden="true">#</a> 1，对象和函数的原型</h3><h4 id="a-认识对象的原型" tabindex="-1"><a class="header-anchor" href="#a-认识对象的原型" aria-hidden="true">#</a> A）认识对象的原型</h4><p><img src="'+t+'" alt="image-20240505164516658"></p><p>每个对象都有一个内置属性[[prototype]]，浏览器提供一种非标准的获取方法，通过对象的_ _ proto_ _ 获取到。如下：</p><p><img src="'+r+'" alt="image-20240505164834400"></p><p>还可以通过标准的方法，Object.prototypeof()。来获取一个对象的原型。如下：</p><p><img src="'+p+'" alt="image-20240505165855845"></p><p>疑问：那么这个原型有什么用呢？如下：</p><p><img src="'+n+'" alt="image-20240505170028348"></p><h4 id="b-函数的原型prototyp" tabindex="-1"><a class="header-anchor" href="#b-函数的原型prototyp" aria-hidden="true">#</a> B）函数的原型prototyp</h4><p><img src="'+g+'" alt="image-20240505171019370"></p><p>我们也可以将一个函数看作为对象，从而获取它的_ _ proto _ _ (称为隐式原型或对象原型)。如下：</p><p><img src="'+c+'" alt="image-20240505171153036"></p><p>函数特有的原型(prototype)，我们也称之为显式原型。而对象是没有prototype的。如下：</p><p><img src="'+d+'" alt="image-20240505171714905"></p><p>作用：用来构建对象时，给对象设置隐式原型。</p><h3 id="_2-new操作符和constructor" tabindex="-1"><a class="header-anchor" href="#_2-new操作符和constructor" aria-hidden="true">#</a> 2，new操作符和constructor</h3><h4 id="a-new" tabindex="-1"><a class="header-anchor" href="#a-new" aria-hidden="true">#</a> A）new</h4><p><img src="'+o+'" alt="image-20240505181242485"></p><p>将函数的prototype赋值给对象的隐式原型。因此函数的prototyp等于实例对象的_ _ proto _ _。并且多个实例对象之间，隐式原型也是相等的。如下：</p><p><img src="'+m+'" alt="image-20240505182212968"></p><p>那么为什么要这样做？答：当多个对象用于共同的值时，我们可以将它放到构造函数对象的显式原型上。由构造函数创建出来的所有对象，都会共享这些属性。如下：</p><p><img src="'+h+'" alt="image-20240506192008604"></p><h4 id="b-constructor" tabindex="-1"><a class="header-anchor" href="#b-constructor" aria-hidden="true">#</a> B）constructor</h4><p><img src="'+_+'" alt="image-20240506194630731"></p><p>函数的prototype上有个非常重要的属性：constructor。constructor又指向了函数的prototype。因此函数的prototyp和constructor造成了循环引用。如下：</p><p><img src="'+l+'" alt="image-20240506200005029"></p><p>通过实例对象的隐式原型(_ <em>proto</em> _ _)的constructor属性，也能找到。如下：</p><p><img src="'+x+'" alt="image-20240506211031503"></p><h4 id="c-创建对象过程内存" tabindex="-1"><a class="header-anchor" href="#c-创建对象过程内存" aria-hidden="true">#</a> C）创建对象过程内存</h4><p><img src="'+b+'" alt="image-20240506213935590"></p><h4 id="d-重写原型对象" tabindex="-1"><a class="header-anchor" href="#d-重写原型对象" aria-hidden="true">#</a> D） 重写原型对象</h4><p><img src="'+f+'" alt="image-20240506214853622"></p><p><img src="'+j+'" alt="image-20240506220648389"></p><p>当我们通过赋值的方式重写函数原型对象，如果希望constructor指向Person，那么可以手动添加。如下：</p><p><img src="'+u+'" alt="image-20240506214959519"></p><p>函数之前的原型对象的constructor属性，通过Object.keys是不能获取到的。如下：</p><p><img src="'+y+'" alt="image-20240506215609055"></p><p>但是通过对函数prototype赋值一个新对象的方式进行重写，那么通过Object.keys就可以获取到。如下：</p><p><img src="'+B+'" alt="image-20240506215846248"></p><p>但是我们想让重写的原型对象和之前的prototype一样，不能获取到constructor属性。我们可以通过</p><p>Object.defineProperty的数据属性描述符进行设置。如下：</p><p><img src="'+S+'" alt="image-20240506220449499"></p><h3 id="_3-原型链实现继承" tabindex="-1"><a class="header-anchor" href="#_3-原型链实现继承" aria-hidden="true">#</a> 3，原型链实现继承</h3><h4 id="a-什么是继承" tabindex="-1"><a class="header-anchor" href="#a-什么是继承" aria-hidden="true">#</a> A）什么是继承</h4><p><img src="'+E+'" alt="image-20240506222907596"></p><p>如果两个类中有很多相同的代码，那么我们就需要抽取到一个类中，通过继承实现代码复用。如下：</p><p><img src="'+w+'" alt="image-20240506223413657"></p><h4 id="b-什么是原型链" tabindex="-1"><a class="header-anchor" href="#b-什么是原型链" aria-hidden="true">#</a> B）什么是原型链</h4><p>那么如何在ES5中的代码，实现继承呢？通过自定义原型链实现。如下：</p><p><img src="'+A+'" alt="image-20240506225604376"></p><h4 id="c-通过原型链实现继承" tabindex="-1"><a class="header-anchor" href="#c-通过原型链实现继承" aria-hidden="true">#</a> C）通过原型链实现继承</h4><p>我们先来考虑方法的继承。如下：</p><p>方式一：将父类的显式原型直接赋值给子类的显式原型。</p><p>缺点：父类和子类共享同一个原型对象，修改任意一个，另一个也被修改。</p><p><img src="'+O+'" alt="image-20240507103754129"></p><p>方式二：创建一个父类的实例对象(new Person())，用这个实例对象作为子类的原型对象。如下：</p><p><img src="'+P+'" alt="image-20240507105706777"></p><h4 id="d-原型链继承弊端" tabindex="-1"><a class="header-anchor" href="#d-原型链继承弊端" aria-hidden="true">#</a> D）原型链继承弊端</h4><p><img src="'+C+'" alt="image-20240507111209167"></p><p><img src="'+D+'" alt="image-20240507111641809"></p><h3 id="_4-借用构造函数继承" tabindex="-1"><a class="header-anchor" href="#_4-借用构造函数继承" aria-hidden="true">#</a> 4，借用构造函数继承</h3><h4 id="a-实现" tabindex="-1"><a class="header-anchor" href="#a-实现" aria-hidden="true">#</a> A）实现</h4><p><img src="'+F+'" alt="image-20240507111922403"></p><p>借用构造函数解决属性继承逻辑。如下：</p><p><img src="'+k+'" alt="image-20240507121645548"></p><h4 id="b-组合借用继承的问题" tabindex="-1"><a class="header-anchor" href="#b-组合借用继承的问题" aria-hidden="true">#</a> B）组合借用继承的问题</h4><p><img src="'+v+'" alt="image-20240507123056229"></p><p>借用构造函数继承的问题：第一，会调用两次父类的构造函数。第一次：为了继承父类的方法，new出来的父类实例对象。第二次：为了继承属性，借用了父类的构造函数。第二，有两份相同的属性，一份在子类实例对象上，另一份在作为子类显式原型上。如下：</p><p><img src="'+N+'" alt="image-20240507132747529"></p><h3 id="_5-寄生组合实现继承" tabindex="-1"><a class="header-anchor" href="#_5-寄生组合实现继承" aria-hidden="true">#</a> 5，寄生组合实现继承</h3><p>我们希望创造一个对象，这个对象的隐式原型必须指向父类的显式原型。并将这个对象赋值给子类的显式原型。如下：</p><p><img src="'+V+'" alt="image-20240507142022920"></p><p>如果我们考虑兼容性问题，需要将Object.create方法替换。如下：</p><p><img src="'+q+'" alt="image-20240507142326885"></p><h3 id="_6-es5最终继承方案" tabindex="-1"><a class="header-anchor" href="#_6-es5最终继承方案" aria-hidden="true">#</a> 6. ES5最终继承方案</h3><p><img src="'+z+'" alt="image-20240507144405507"></p><p><img src="'+G+'" alt="image-20240507144429439"></p><p><img src="'+H+'" alt="image-20240507144626482"></p><h3 id="_7-对象的方法补充" tabindex="-1"><a class="header-anchor" href="#_7-对象的方法补充" aria-hidden="true">#</a> 7. 对象的方法补充</h3><p><img src="'+I+'" alt="image-20240507170128435"></p><h4 id="a-hasownproperty" tabindex="-1"><a class="header-anchor" href="#a-hasownproperty" aria-hidden="true">#</a> A）hasOwnProperty</h4><p>对象是否有某一个属于自己的属性（不是在原型上的属性）。</p><p><img src="'+J+'" alt="image-20240507170853585"></p><h4 id="b-in-for-in" tabindex="-1"><a class="header-anchor" href="#b-in-for-in" aria-hidden="true">#</a> B）in/for...in</h4><p>判断某个属性是否在某个对象或者对象的原型上。如下：</p><p><img src="'+K+'" alt="image-20240507171314070"></p><h4 id="c-instanceof" tabindex="-1"><a class="header-anchor" href="#c-instanceof" aria-hidden="true">#</a> C）instanceof</h4><p>用于检测构造函数（Person、Student类）的pototype，是否出现在某个实例对象的原型链上。如下：</p><p><img src="'+L+'" alt="image-20240507171937950"></p><h4 id="d-isprototypeof" tabindex="-1"><a class="header-anchor" href="#d-isprototypeof" aria-hidden="true">#</a> D）isPrototypeOf</h4><p>用于检测某个对象，是否出现在某个实例对象的原型链上。如下：</p><p><img src="'+M+'" alt="image-20240507175910989"></p><h2 id="二-es6实现继承" tabindex="-1"><a class="header-anchor" href="#二-es6实现继承" aria-hidden="true">#</a> 二，ES6实现继承</h2><h3 id="_1-原型继承关系图" tabindex="-1"><a class="header-anchor" href="#_1-原型继承关系图" aria-hidden="true">#</a> 1，原型继承关系图</h3><p><img src="'+Q+'" alt="image-20240507191226226"></p><p>注意：</p><p>1&gt; 所有的构造函数的隐式原型都指向Function的显式原型。</p><p>2&gt; 所有构造函数的显式原型的_ _ proto _ _ 都指向Object的显式原型。只有Object的显式原型的 _ _ proto _ _ 指向null。</p><p>2&gt; Function的隐式原型指向Function的显式原型。</p><h3 id="_2-class方式定义类" tabindex="-1"><a class="header-anchor" href="#_2-class方式定义类" aria-hidden="true">#</a> 2，class方式定义类</h3><h4 id="a-class关键字的使用" tabindex="-1"><a class="header-anchor" href="#a-class关键字的使用" aria-hidden="true">#</a> A）class关键字的使用</h4><p><img src="'+R+'" alt="image-20240507223602966"></p><p>在ES6中，我们可以使用class关键字来定义一个类。如下：</p><p><img src="'+T+'" alt="image-20240507224106766"></p><h4 id="b-类的构造函数" tabindex="-1"><a class="header-anchor" href="#b-类的构造函数" aria-hidden="true">#</a> B）类的构造函数</h4><p><img src="'+U+'" alt="image-20240507225003397"></p><p><img src="'+W+'" alt="image-20240507225642059"></p><h4 id="c-类的访问器" tabindex="-1"><a class="header-anchor" href="#c-类的访问器" aria-hidden="true">#</a> C）类的访问器</h4><p><img src="'+X+'" alt="image-20240508084230697"></p><h4 id="d-类的静态方法" tabindex="-1"><a class="header-anchor" href="#d-类的静态方法" aria-hidden="true">#</a> D）类的静态方法</h4><p><img src="'+Y+'" alt="image-20240508090106323"></p><h3 id="_3-extends实现继承" tabindex="-1"><a class="header-anchor" href="#_3-extends实现继承" aria-hidden="true">#</a> 3， extends实现继承</h3><h4 id="a-extends关键字" tabindex="-1"><a class="header-anchor" href="#a-extends关键字" aria-hidden="true">#</a> A）extends关键字</h4><p><img src="'+Z+'" alt="image-20240508095720796"></p><p><img src="'+$+'" alt="image-20240508100755312"></p><h4 id="b-super关键字" tabindex="-1"><a class="header-anchor" href="#b-super关键字" aria-hidden="true">#</a> B）super关键字</h4><p><img src="'+aa+'" alt="image-20240508101312083"></p><p>super关键字不仅可以在constructor函数中使用。也可以在子类的实例方法中调用父类的实例方法。如下：</p><p><img src="'+ia+'" alt="image-20240508105542647"></p><p>子类也可以继承父类的静态方法，如果不满意还可以在子类中重写父类的静态方法。如下：</p><p><img src="'+ea+'" alt="image-20240508105934877"></p><h4 id="b-继承内置类" tabindex="-1"><a class="header-anchor" href="#b-继承内置类" aria-hidden="true">#</a> B）继承内置类</h4><p><img src="'+sa+'" alt="image-20240508110119963"></p><p>我们还可以继承内置类，以便于进行扩展。获取第一个和最后一个元素。如下：</p><p><img src="'+ta+'" alt="image-20240508110952066"></p><p>我们还可以直接对内置类Array进行扩展，如下：</p><p><img src="'+ra+'" alt="image-20240508111441645"></p><h4 id="d-类的混入" tabindex="-1"><a class="header-anchor" href="#d-类的混入" aria-hidden="true">#</a> D）类的混入</h4><p><img src="'+pa+'" alt="image-20240508112533572"></p><h3 id="_4-babel的es6转es5" tabindex="-1"><a class="header-anchor" href="#_4-babel的es6转es5" aria-hidden="true">#</a> 4，Babel的ES6转ES5</h3><p><img src="'+na+'" alt="image-20240508112558359"></p><h4 id="a-仅有class的es6代码转es5" tabindex="-1"><a class="header-anchor" href="#a-仅有class的es6代码转es5" aria-hidden="true">#</a> A）仅有class的ES6代码转ES5</h4><p>当ES6代码中只使用了class关键字的情况，转换如下：</p><p><img src="'+ga+'" alt="image-20240508190516634"></p><p>通过Babel进行转换如下：</p><p><img src="'+ca+'" alt="image-20240508122524580"></p><p><img src="'+da+'" alt="image-20240508122405007"></p><p><img src="'+oa+'" alt="image-20240508122912200"></p><p><img src="'+ma+'" alt="image-20240508135040888"></p><h4 id="b-使用extends和super关键字" tabindex="-1"><a class="header-anchor" href="#b-使用extends和super关键字" aria-hidden="true">#</a> B）使用extends和super关键字</h4><h3 id="_5-面向对象多态理解" tabindex="-1"><a class="header-anchor" href="#_5-面向对象多态理解" aria-hidden="true">#</a> 5，面向对象多态理解</h3><p><img src="'+ha+'" alt="image-20240508222821153"></p><h3 id="_6-手写call、apply和bind" tabindex="-1"><a class="header-anchor" href="#_6-手写call、apply和bind" aria-hidden="true">#</a> 6，手写call、apply和bind</h3><h4 id="a-实现apply函数" tabindex="-1"><a class="header-anchor" href="#a-实现apply函数" aria-hidden="true">#</a> A）实现apply函数</h4><p><img src="'+_a+'" alt="image-20240509101821550"></p><p>同样，将抽离出来的函数放到Function的显式原型上，到此抽离完毕。如下：</p><p><img src="'+la+'" alt="image-20240509103049804"></p><h4 id="b-实现call函数" tabindex="-1"><a class="header-anchor" href="#b-实现call函数" aria-hidden="true">#</a> B）实现call函数</h4><p><img src="'+xa+'" alt="image-20240509101143291"></p><p>我们会发现无论是手写的call方法还是apply方法，都有很多相同的逻辑。因此我们考虑将相同的逻辑抽离出来。如下：</p><p><img src="'+ba+'" alt="image-20240509102108910"></p><p>但是我们又发现抽离出来的函数和我们实现的函数，相互独立。因此我们将抽离的函数放到Function的显式原型上。如下：</p><p><img src="'+fa+'" alt="image-20240509102820584"></p><h4 id="c-实现bind函数" tabindex="-1"><a class="header-anchor" href="#c-实现bind函数" aria-hidden="true">#</a> C）实现bind函数</h4><p>第一步：先实现bind函数返回一个新函数，并修改this指向。如下：</p><p><img src="'+ja+'" alt="image-20240509105511208"></p><p>第二步：修改代码，让mybind函数可以接收其他参数。如下：</p><p><img src="'+ua+'" alt="image-20240509110633528"></p>',161),Sa=[Ba];function Ea(wa,Aa){return i(),e("div",null,Sa)}const Pa=a(ya,[["render",Ea],["__file","05.html.vue"]]);export{Pa as default};

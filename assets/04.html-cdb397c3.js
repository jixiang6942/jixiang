import{_ as a,o as n,c as s,a as t}from"./app-fbcf72b1.js";const p="/jixiang/assets/image-20240115173130947-3def8ef1.png",e="/jixiang/assets/image-20240115173246007-6b292f25.png",i="/jixiang/assets/image-20240115173448422-5f0706d4.png",c="/jixiang/assets/image-20240115183051771-58c6ef50.png",o="/jixiang/assets/image-20240115174612260-fdb21244.png",l="/jixiang/assets/image-20240115175520296-50e5d7bb.png",r="/jixiang/assets/image-20240115182921406-e8a88f96.png",u="/jixiang/assets/image-20240115183409938-9247495a.png",d="/jixiang/assets/image-20240115183510748-7935c03a.png",g="/jixiang/assets/image-20240115184029324-9fda5dfe.png",m="/jixiang/assets/image-20240115184134165-22d8f02d.png",k="/jixiang/assets/image-20240115184530932-3efb0c95.png",h="/jixiang/assets/image-20240115184922451-bce57d54.png",b="/jixiang/assets/image-20240115185955644-13c3bcde.png",_="/jixiang/assets/image-20240115190103457-3a8781e4.png",v="/jixiang/assets/image-20240115190931079-e5e368ed.png",f="/jixiang/assets/image-20240115192048086-b374d30e.png",x="/jixiang/assets/image-20240115192526585-5362a800.png",j="/jixiang/assets/image-20240115192731506-f1d50d2d.png",w="/jixiang/assets/image-20240115193612707-70d8f57b.png",y="/jixiang/assets/image-20240116084952326-b2083801.png",O="/jixiang/assets/image-20240116085507765-bf1c3fa0.png",D="/jixiang/assets/image-20240116090131322-3d69ce90.png",T="/jixiang/assets/image-20240116091010842-ab7ead04.png",S="/jixiang/assets/image-20240116092739981-48d50213.png",C="/jixiang/assets/image-20240116093131766-7f1f677e.png",q="/jixiang/assets/image-20240116093359898-cf36aa9f.png",A="/jixiang/assets/image-20240116094024222-5694d0ce.png",M="/jixiang/assets/image-20240116094302068-144e1dc1.png",B="/jixiang/assets/image-20240116095419036-13cec1f1.png",E="/jixiang/assets/image-20240116110608859-dce55c9c.png",P="/jixiang/assets/image-20240116134058339-fd7fd350.png",V="/jixiang/assets/image-20240116123725880-70accecf.png",N="/jixiang/assets/image-20240116124331759-e895699d.png",R="/jixiang/assets/image-20240116124726414-00096762.png",J="/jixiang/assets/image-20240116130017246-835e1a05.png",F="/jixiang/assets/image-20240116133742157-4dbe0cf6.png",z="/jixiang/assets/image-20240116095524962-951087ab.png",G="/jixiang/assets/image-20240116095951059-e83e5f56.png",L="/jixiang/assets/image-20240116104543875-7fd259cb.png",U="/jixiang/assets/image-20240116095602132-b6b24ecc.png",H="/jixiang/assets/image-20240116105027250-2a83003f.png",Y="/jixiang/assets/image-20240116105622161-9ddb56e7.png",W="/jixiang/assets/image-20240116105937652-66f4b0c7.png",I="/jixiang/assets/image-20240116110441352-8ec510b9.png",K="/jixiang/assets/image-20240116134139621-46b79b21.png",Q="/jixiang/assets/image-20240116135403689-1b630dbf.png",X="/jixiang/assets/image-20240116134211723-6dc90c62.png",Z="/jixiang/assets/image-20240116145723292-d9c4d623.png",$="/jixiang/assets/image-20240116134233193-639946e2.png",aa="/jixiang/assets/image-20240116154845167-60ee6c83.png",na="/jixiang/assets/image-20240116134257130-c0f5cc20.png",sa="/jixiang/assets/image-20240116161203527-016a7cb0.png",ta="/jixiang/assets/image-20240117093821847-924766d0.png",pa="/jixiang/assets/image-20240117100043361-c12de0b5.png",ea="/jixiang/assets/image-20240117100643840-5f438b7d.png",ia="/jixiang/assets/image-20240117101048018-0e883c79.png",ca="/jixiang/assets/image-20240117105048932-7d45c9d8.png",oa="/jixiang/assets/image-20240117105830788-7dca5f25.png",la="/jixiang/assets/image-20240117105918047-0d8b0d0f.png",ra="/jixiang/assets/image-20240117110816797-62c1defc.png",ua="/jixiang/assets/image-20240117112355320-1595b106.png",da="/jixiang/assets/image-20240117215325113-44c5ae8d.png",ga="/jixiang/assets/image-20240117230509512-c2a64b35.png",ma="/jixiang/assets/image-20240117230726677-2d80651c.png",ka="/jixiang/assets/image-20240117231057385-6964e3fa.png",ha="/jixiang/assets/image-20240117231555429-ce53123c.png",ba="/jixiang/assets/image-20240117231657666-5cf7aeb6.png",_a="/jixiang/assets/image-20240118085031694-40c11cad.png",va="/jixiang/assets/image-20240118091804098-c5644f72.png",fa="/jixiang/assets/image-20240118101001288-af235c7d.png",xa="/jixiang/assets/image-20240118101110201-c7a094dc.png",ja="/jixiang/assets/image-20240118101849057-2d03cf7f.png",wa="/jixiang/assets/image-20240118102557216-a6e97e32.png",ya="/jixiang/assets/image-20240118102758733-b178948f.png",Oa="/jixiang/assets/image-20240118103100517-1ad5d228.png",Da="/jixiang/assets/image-20240118103721089-3287cfb3.png",Ta="/jixiang/assets/image-20240118140644593-62f7a520.png",Sa="/jixiang/assets/image-20240118140724886-ca510172.png",Ca="/jixiang/assets/image-20240118145025238-29c3f291.png",qa="/jixiang/assets/image-20240118145728206-263cd0f4.png",Aa="/jixiang/assets/image-20240118162349059-f5b61cea.png",Ma="/jixiang/assets/image-20240118170715894-ed6b4269.png",Ba="/jixiang/assets/image-20240118175419465-e8b1995d.png",Ea="/jixiang/assets/image-20240118175837312-9d196f43.png",Pa="/jixiang/assets/image-20240118175910766-6d50d7f3.png",Va="/jixiang/assets/image-20240118175934097-6360f9cd.png",Na="/jixiang/assets/image-20240118191426070-ea4900cf.png",Ra="/jixiang/assets/image-20240118191732718-16167a53.png",Ja="/jixiang/assets/image-20240118191817427-2f0f2310.png",Fa="/jixiang/assets/image-20240118191848940-1d9c4f36.png",za="/jixiang/assets/image-20240118191906304-120adfb7.png",Ga="/jixiang/assets/image-20240118191929784-9da1db14.png",La="/jixiang/assets/image-20240118192259684-8d8380b8.png",Ua="/jixiang/assets/image-20240118192130253-0f69dafc.png",Ha="/jixiang/assets/image-20240118192217979-c3933c56.png",Ya="/jixiang/assets/image-20240118192555945-34452f85.png",Wa="/jixiang/assets/image-20240118231301998-68c3d339.png",Ia="/jixiang/assets/image-20240118231349346-1f4995b2.png",Ka="/jixiang/assets/image-20240118231453145-c49618e9.png",Qa="/jixiang/assets/image-20240118231623480-a25321b3.png",Xa="/jixiang/assets/image-20240118231653973-da789fe4.png",Za="/jixiang/assets/image-20240118231749041-421fc6e6.png",$a="/jixiang/assets/image-20240119092635107-6b7c5706.png",an="/jixiang/assets/image-20240119095540595-7d014999.png",nn="/jixiang/assets/image-20240119102448586-23dfcd85.png",sn="/jixiang/assets/image-20240119103738149-4150304c.png",tn="/jixiang/assets/image-20240119121314584-4b4c0054.png",pn="/jixiang/assets/image-20240119121338492-4ae581fa.png",en="/jixiang/assets/image-20240119121502197-23ed2ca2.png",cn="/jixiang/assets/image-20240119123125508-796b31d2.png",on="/jixiang/assets/image-20240119123432853-ffb28d10.png",ln="/jixiang/assets/image-20240119123803911-8d2b29f0.png",rn="/jixiang/assets/image-20240119124154789-08b2224a.png",un="/jixiang/assets/image-20240119124841207-9d79d393.png",dn="/jixiang/assets/image-20240119125149771-7f75a8e7.png",gn="/jixiang/assets/image-20240119130135894-fb02646d.png",mn="/jixiang/assets/image-20240119130401892-7cb2dfbf.png",kn="/jixiang/assets/image-20240119130435652-d83d9c2c.png",hn="/jixiang/assets/image-20240119130938922-b288583b.png",bn="/jixiang/assets/image-20240119140420078-ec0986e0.png",_n="/jixiang/assets/image-20240119131221256-efd3b5b2.png",vn="/jixiang/assets/image-20240119131353929-d3f5068f.png",fn="/jixiang/assets/image-20240119140630974-dedb9145.png",xn="/jixiang/assets/image-20240119141018064-ddc3acd5.png",jn="/jixiang/assets/image-20240119141228238-e55f080e.png",wn="/jixiang/assets/image-20240119142123027-a0a5c6e9.png",yn="/jixiang/assets/image-20240119142736297-bf805dfd.png",On="/jixiang/assets/image-20240119145532094-b73a844d.png",Dn="/jixiang/assets/image-20240119150001322-8ae6a8ff.png",Tn="/jixiang/assets/image-20240119151708581-2a17ad74.png",Sn="/jixiang/assets/image-20240119150049085-8f472711.png",Cn="/jixiang/assets/image-20240119152218796-b4cc3115.png",qn="/jixiang/assets/image-20240119162356863-db3aa565.png",An="/jixiang/assets/image-20240119162540615-be531d6c.png",Mn="/jixiang/assets/image-20240119163013828-9879cffc.png",Bn="/jixiang/assets/image-20240119163232423-97f838da.png",En="/jixiang/assets/image-20240119164653149-2ecf86a3.png",Pn="/jixiang/assets/image-20240119165041375-f425268a.png",Vn="/jixiang/assets/image-20240119165629713-41ca2353.png",Nn="/jixiang/assets/image-20240119165124538-2d67bafe.png",Rn="/jixiang/assets/image-20240119170306668-8b1baf37.png",Jn="/jixiang/assets/image-20240119170438809-9b650175.png",Fn="/jixiang/assets/image-20240119174552668-e3d79f69.png",zn="/jixiang/assets/image-20240119175618637-4b1530f4.png",Gn="/jixiang/assets/image-20240119174644817-662c7cb9.png",Ln="/jixiang/assets/image-20240119180014902-eccbb735.png",Un="/jixiang/assets/image-20240119181224701-6d64a868.png",Hn="/jixiang/assets/image-20240119181436894-9a790329.png",Yn="/jixiang/assets/image-20240119185512830-ccad8341.png",Wn="/jixiang/assets/image-20240119192913093-1e9a02e8.png",In="/jixiang/assets/image-20240119192941125-c5a06abc.png",Kn="/jixiang/assets/image-20240119200233281-c75bffd5.png",Qn="/jixiang/assets/image-20240119200524733-d5c71060.png",Xn="/jixiang/assets/image-20240119200614899-66501d2e.png",Zn="/jixiang/assets/image-20240119200813195-7d7d29f8.png",$n="/jixiang/assets/image-20240119201042395-9465c692.png",as="/jixiang/assets/image-20240119230539746-6196d5c4.png",ns="/jixiang/assets/image-20240119231319166-183dbd54.png",ss="/jixiang/assets/image-20240119231400321-ca74fb4e.png",ts="/jixiang/assets/image-20240119231531846-68ace186.png",ps="/jixiang/assets/image-20240119232313964-8ea2b8cf.png",es="/jixiang/assets/image-20240119232818229-33d50497.png",is="/jixiang/assets/image-20240120075727320-174d70a4.png",cs="/jixiang/assets/image-20240120080026288-d01abd5e.png",os="/jixiang/assets/image-20240120080632504-890306db.png",ls="/jixiang/assets/image-20240120081310623-dc5c3f1c.png",rs="/jixiang/assets/image-20240120082115906-929eae39.png",us="/jixiang/assets/image-20240120090147786-c0382835.png",ds="/jixiang/assets/image-20240120090232513-b9f337d3.png",gs="/jixiang/assets/image-20240120090626390-f30a85d8.png",ms="/jixiang/assets/image-20240120090907534-1e2ba19f.png",ks="/jixiang/assets/image-20240120091030648-67b099e9.png",hs="/jixiang/assets/image-20240120091324531-869be9bb.png",bs="/jixiang/assets/image-20240120091613560-1bceba67.png",_s="/jixiang/assets/image-20240120091813939-7f2abede.png",vs={},fs=t('<h1 id="js高级" tabindex="-1"><a class="header-anchor" href="#js高级" aria-hidden="true">#</a> JS高级</h1><h2 id="一-函数中this指向" tabindex="-1"><a class="header-anchor" href="#一-函数中this指向" aria-hidden="true">#</a> 一，函数中this指向</h2><p>总结：</p><ul><li>函数在调用时，JavaScript会默认给this绑定一个值。</li><li>this的绑定和定义的位置(编写的位置)没有关系</li><li>this的绑定和调用方式以及调用位置有关系</li><li>this是在运行时被绑定的</li></ul><h3 id="_1-this的绑定规则" tabindex="-1"><a class="header-anchor" href="#_1-this的绑定规则" aria-hidden="true">#</a> 1. this的绑定规则</h3><p><img src="'+p+'" alt="image-20240115173130947"></p><p>我们定义一个函数，直接调用并查看this指向，如下：</p><p><img src="'+e+'" alt="image-20240115173246007"></p><p>接下来我们通过对象调用并查看this指向，如下：</p><p><img src="'+i+'" alt="image-20240115173448422"></p><p>this有四种绑定规则如下：</p><ul><li>默认绑定</li><li>隐式绑定</li><li>显示绑定</li><li>new绑定</li></ul><p>接下来我们来一个个研究，如下：</p><h4 id="a-规则一-默认绑定" tabindex="-1"><a class="header-anchor" href="#a-规则一-默认绑定" aria-hidden="true">#</a> A）规则一：默认绑定</h4><p><img src="'+c+'" alt="image-20240115183051771"></p><p>那么什么情况下使用默认绑定呢？独立函数调用。</p><p>示例一：普通的函数被独立调用，如下：</p><p><img src="'+o+'" alt="image-20240115174612260"></p><p>示例二：函数定义在对象中，但是独立调用，如下：</p><p><img src="'+l+'" alt="image-20240115175520296"></p><p>示例三：有一种情况比较特殊，在严格模式下，独立调用的函数中的this指向的时undefined，如下：</p><p><img src="'+r+'" alt="image-20240115182921406"></p><p>示例四：高阶函数，如下：</p><p><img src="'+u+'" alt="image-20240115183409938"></p><h4 id="b-规则二-隐式绑定" tabindex="-1"><a class="header-anchor" href="#b-规则二-隐式绑定" aria-hidden="true">#</a> B）规则二：隐式绑定</h4><p><img src="'+d+'" alt="image-20240115183510748"></p><p><img src="'+g+'" alt="image-20240115184029324"></p><h4 id="c-规则三-new绑定" tabindex="-1"><a class="header-anchor" href="#c-规则三-new绑定" aria-hidden="true">#</a> C）规则三：new绑定</h4><p><img src="'+m+'" alt="image-20240115184134165"></p><p>new绑定：this指向创建出来的空对象，如下：</p><p><img src="'+k+'" alt="image-20240115184530932"></p><h4 id="d-规则三-显示绑定" tabindex="-1"><a class="header-anchor" href="#d-规则三-显示绑定" aria-hidden="true">#</a> D）规则三：显示绑定</h4><p><img src="'+h+'" alt="image-20240115184922451"></p><p>我们如果想执行函数并且函数中的this指向obj对象，就要先给对象添加属性并把这个函数赋值给它，但是这样做很麻烦，我们想执行函数，并且强制this就是obj对象，如下：</p><p><img src="'+b+'" alt="image-20240115185955644"></p><h3 id="_2-apply-call-bind" tabindex="-1"><a class="header-anchor" href="#_2-apply-call-bind" aria-hidden="true">#</a> 2. apply/call/bind</h3><h4 id="a-call和apply" tabindex="-1"><a class="header-anchor" href="#a-call和apply" aria-hidden="true">#</a> A）call和apply</h4><p>call和apply都是改变this指向并且立即执行该函数，不同点在于call第二个参数是参数列表，而apply第二个参数必须是数组。</p><p><img src="'+_+'" alt="image-20240115190103457"></p><p><img src="'+v+'" alt="image-20240115190931079"></p><h4 id="b-bind" tabindex="-1"><a class="header-anchor" href="#b-bind" aria-hidden="true">#</a> B）bind</h4><p>bind和call/apply最大的区别在于，call/apply会立即执行该函数，而bind会返回一个新函数，如下：</p><p><img src="'+f+'" alt="image-20240115192048086"></p><p>我们在使用bind函数时，还可以传递参数，如下：</p><p><img src="'+x+'" alt="image-20240115192526585"></p><h3 id="_3-内置函数的调用绑定" tabindex="-1"><a class="header-anchor" href="#_3-内置函数的调用绑定" aria-hidden="true">#</a> 3. 内置函数的调用绑定</h3><p><img src="'+j+'" alt="image-20240115192731506"></p><p><img src="'+w+'" alt="image-20240115193612707"></p><h3 id="_3-this绑定优先级" tabindex="-1"><a class="header-anchor" href="#_3-this绑定优先级" aria-hidden="true">#</a> 3. this绑定优先级</h3><p><img src="'+y+'" alt="image-20240116084952326"></p><h4 id="a-显式绑定的优先级高于隐式绑定" tabindex="-1"><a class="header-anchor" href="#a-显式绑定的优先级高于隐式绑定" aria-hidden="true">#</a> A) 显式绑定的优先级高于隐式绑定</h4><p>测试一：apply高于默认绑定，如下：</p><p><img src="'+O+'" alt="image-20240116085507765"></p><p>测试二：bind高于隐式绑定，如下：</p><p><img src="'+D+'" alt="image-20240116090131322"></p><h4 id="b-new绑定的优先级高于隐式绑定" tabindex="-1"><a class="header-anchor" href="#b-new绑定的优先级高于隐式绑定" aria-hidden="true">#</a> B) new绑定的优先级高于隐式绑定</h4><p>代码测试如下：</p><p><img src="'+T+'" alt="image-20240116091010842"></p><h4 id="c-new绑定和显式绑定比较" tabindex="-1"><a class="header-anchor" href="#c-new绑定和显式绑定比较" aria-hidden="true">#</a> C) new绑定和显式绑定比较</h4><p>结论：</p><ul><li>new不可以和apply/call一起使用</li><li>new的优先级高于bind</li></ul><p>new绑定的优先级高于bind，代码如下：</p><p><img src="'+S+'" alt="image-20240116092739981"></p><h4 id="d-bind和apply的优先级比较" tabindex="-1"><a class="header-anchor" href="#d-bind和apply的优先级比较" aria-hidden="true">#</a> D) bind和apply的优先级比较</h4><p><img src="'+C+'" alt="image-20240116093131766"></p><p>总结this绑定优先级：new &gt; bind &gt; call/apply &gt; 隐式 &gt; 默认</p><h3 id="_4-绑定之外的情况" tabindex="-1"><a class="header-anchor" href="#_4-绑定之外的情况" aria-hidden="true">#</a> 4. 绑定之外的情况</h3><h4 id="a-情况一-忽略显式绑定" tabindex="-1"><a class="header-anchor" href="#a-情况一-忽略显式绑定" aria-hidden="true">#</a> A）情况一：忽略显式绑定</h4><p><img src="'+q+'" alt="image-20240116093359898"></p><p>情况一：在显式绑定中，传入一个null或者undefined，那么这个显示绑定会被忽略，使用默认规则，如下：</p><p><img src="'+A+'" alt="image-20240116094024222"></p><p><img src="'+M+'" alt="image-20240116094302068"></p><h4 id="b-间接函数引用" tabindex="-1"><a class="header-anchor" href="#b-间接函数引用" aria-hidden="true">#</a> B）间接函数引用</h4><ul><li>(obj2.foo = obj1.foo)的结果是foo函数。</li><li>foo函数被直接调用，那么是默认绑定。</li></ul><p>创建一个函数的间接引用，这种情况使用默认绑定规则。</p><p><img src="'+B+'" alt="image-20240116095419036"></p><h4 id="c-箭头函数中的this" tabindex="-1"><a class="header-anchor" href="#c-箭头函数中的this" aria-hidden="true">#</a> C）箭头函数中的this</h4><p>箭头函数中根本没有绑定this</p><p><img src="'+E+'" alt="image-20240116110608859"></p><p><img src="'+P+'" alt="image-20240116134058339"></p><p>箭头函数中是没有this的，我们可以进行验证，代码如下：</p><p><img src="'+V+'" alt="image-20240116123725880"></p><p>我们可以通过以下几个示例，来确定this的指向。</p><p>示例一，代码如下：</p><p><img src="'+N+'" alt="image-20240116124331759"></p><p><img src="'+R+'" alt="image-20240116124726414"></p><p>那么在实际开发中，箭头函数可以应用在哪里呢？举个例子，网络请求，代码如下：</p><p><img src="'+J+'" alt="image-20240116130017246"></p><p>我们可以使用箭头函数，从而让函数中的this指向obj对象，代码如下：</p><p><img src="'+F+'" alt="image-20240116133742157"></p><h3 id="_5-箭头函数的使用" tabindex="-1"><a class="header-anchor" href="#_5-箭头函数的使用" aria-hidden="true">#</a> 5. 箭头函数的使用</h3><p>注意事项：</p><ul><li>箭头函数不会绑定this、arguments属性。</li><li>箭头函数不能作为构造函数来使用(不能和new一起来使用，会抛出错误)。因为箭头函数没有原型。</li></ul><p><img src="'+z+'" alt="image-20240116095524962"></p><h4 id="a-箭头函数的基本使用" tabindex="-1"><a class="header-anchor" href="#a-箭头函数的基本使用" aria-hidden="true">#</a> A）箭头函数的基本使用</h4><p>箭头函数的基本使用，代码如下：</p><p><img src="'+G+'" alt="image-20240116095951059"></p><p>还有很多地方都可以使用箭头函数，如下：</p><p><img src="'+L+'" alt="image-20240116104543875"></p><h4 id="b-箭头函数的优化" tabindex="-1"><a class="header-anchor" href="#b-箭头函数的优化" aria-hidden="true">#</a> B）箭头函数的优化</h4><p><img src="'+U+'" alt="image-20240116095602132"></p><p>优化规则一：只有一个参数时，小括号可以省略，如下：</p><p><img src="'+H+'" alt="image-20240116105027250"></p><p>优化规则二：如果函数执行体中只有一行代码，那么可以省略大括号，代码如下：</p><p><img src="'+Y+'" alt="image-20240116105622161"></p><p>优化三：只有一行代码时，这行代码的表达式结果会作为函数的返回值默认返回，代码如下：</p><p><img src="'+W+'" alt="image-20240116105937652"></p><p>注意点：如果默认返回值是一个对象，那么这个对象必须加()，代码如下：</p><p><img src="'+I+'" alt="image-20240116110441352"></p><h3 id="_6-this面试题分析" tabindex="-1"><a class="header-anchor" href="#_6-this面试题分析" aria-hidden="true">#</a> 6. this面试题分析</h3><p><img src="'+K+`" alt="image-20240116134139621"></p><p>代码如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;window&#39;</span>

    <span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;person&#39;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">sayName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> sss <span class="token operator">=</span> person<span class="token punctuation">.</span>sayName
      <span class="token function">sss</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 默认绑定：this -&gt; window</span>

      person<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 隐式绑定：this -&gt; person</span>

      <span class="token punctuation">(</span>person<span class="token punctuation">.</span>sayName<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 隐式绑定：this -&gt; person  .语法优先级很高</span>

      <span class="token punctuation">(</span>b <span class="token operator">=</span> person<span class="token punctuation">.</span>sayName<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 术语：间接函数引用， this -&gt; window</span>
    <span class="token punctuation">}</span>
    <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果如下：</p><p><img src="`+Q+'" alt="image-20240116135403689"></p><p><img src="'+X+`" alt="image-20240116134211723"></p><p>代码如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;window&#39;</span>

    <span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;person1&#39;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">foo1</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function-variable function">foo2</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function-variable function">foo3</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function-variable function">foo4</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;person2&#39;</span> <span class="token punctuation">}</span>

    person1<span class="token punctuation">.</span><span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// person1</span>
    person1<span class="token punctuation">.</span><span class="token function">foo1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment">// person2</span>

    person1<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// window</span>
    person1<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment">// window</span>

    person1<span class="token punctuation">.</span><span class="token function">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// window</span>
    person1<span class="token punctuation">.</span><span class="token function">foo3</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// window</span>
    person1<span class="token punctuation">.</span><span class="token function">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment">// person2</span>

    person1<span class="token punctuation">.</span><span class="token function">foo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// person1</span>
    person1<span class="token punctuation">.</span><span class="token function">foo4</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// person2</span>
    person1<span class="token punctuation">.</span><span class="token function">foo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment">// person1</span>

  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果如下：</p><p><img src="`+Z+'" alt="image-20240116145723292"></p><p><img src="'+$+`" alt="image-20240116134233193"></p><p>代码如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;window&#39;</span>

    <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">foo1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">foo2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">foo3</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">foo4</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;person1&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;person2&#39;</span><span class="token punctuation">)</span>

    person1<span class="token punctuation">.</span><span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// person1</span>
    person1<span class="token punctuation">.</span><span class="token function">foo1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment">// person2</span>

    person1<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// person1</span>
    person1<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment">// person1</span>

    person1<span class="token punctuation">.</span><span class="token function">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// window</span>
    person1<span class="token punctuation">.</span><span class="token function">foo3</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// window</span>
    person1<span class="token punctuation">.</span><span class="token function">foo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment">// person2</span>

    person1<span class="token punctuation">.</span><span class="token function">foo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// person1 </span>
    person1<span class="token punctuation">.</span><span class="token function">foo4</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// person2</span>
    person1<span class="token punctuation">.</span><span class="token function">foo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment">// person1</span>

    
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+aa+'" alt="image-20240116154845167"></p><p><img src="'+na+`" alt="image-20240116134257130"></p><p>代码如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;window&#39;</span>

    <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
      <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;obj&#39;</span><span class="token punctuation">,</span>
        <span class="token function-variable function">foo1</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function-variable function">foo2</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;person1&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;person2&#39;</span><span class="token punctuation">)</span>

    person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 默认绑定：window</span>
    person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">foo1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 默认绑定：window</span>
    person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment">// 显式绑定：person2</span>

    person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 上层作用域查找：obj(隐式绑定)</span>
    person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 上层作用域查找：person2(显式绑定)</span>
    person1<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment">// 上层作用域查找：obj(隐式绑定)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果如下：</p><p><img src="`+sa+'" alt="image-20240116161203527"></p><h2 id="二-浏览器的渲染原理" tabindex="-1"><a class="header-anchor" href="#二-浏览器的渲染原理" aria-hidden="true">#</a> 二，浏览器的渲染原理</h2><h3 id="_1-网页的解析过程" tabindex="-1"><a class="header-anchor" href="#_1-网页的解析过程" aria-hidden="true">#</a> 1. 网页的解析过程</h3><p>当我们在网页地址栏输入地址回车后发生了什么？</p><p>输入地址 -&gt; DNS解析 -&gt; 请求服务器 -&gt; 加载index.html -&gt; 加载css或js</p><p><img src="'+ta+'" alt="image-20240117093821847"></p><p>总结：先下载index.html，解析过程中遇到link元素再下载css文件，遇到script元素再下载js文件。</p><h3 id="_2-浏览器渲染流程" tabindex="-1"><a class="header-anchor" href="#_2-浏览器渲染流程" aria-hidden="true">#</a> 2. 浏览器渲染流程</h3><h4 id="a-浏览器内核" tabindex="-1"><a class="header-anchor" href="#a-浏览器内核" aria-hidden="true">#</a> A）浏览器内核</h4><p>浏览器内核也成为排版引擎、浏览器引擎，页面渲染引擎或样板引擎。</p><p><img src="'+pa+'" alt="image-20240117100043361"></p><h4 id="b-渲染页面" tabindex="-1"><a class="header-anchor" href="#b-渲染页面" aria-hidden="true">#</a> B）渲染页面</h4><p><img src="'+ea+'" alt="image-20240117100643840"></p><p>逐行解析html，遇到link元素去下载(并不会阻塞html解析)，html解析最后生成DOM树，将解析完成的style附加到DOM tree上。</p><p>我们可以看看详细流程，</p><p><img src="'+ia+'" alt="image-20240117101048018"></p><p>该图片来自于一篇文章，地址：https://www.html5rocks.com/en/tutorials/internals/howbrowserswork</p><ul><li><p>Render Tree 和 DOM Tree 并不是一一对应的，因为某些元素并不会显示。</p></li><li><p>Render Tree上的节点是没有大小和位置信息的，需要经过layout。</p></li><li><p>经过layout之后，进行painting，然后再进行展示。</p></li></ul><h4 id="c-解析一-html解析过程" tabindex="-1"><a class="header-anchor" href="#c-解析一-html解析过程" aria-hidden="true">#</a> C）解析一：HTML解析过程</h4><p><img src="'+ca+'" alt="image-20240117105048932"></p><h4 id="d-解析二-生成css规则" tabindex="-1"><a class="header-anchor" href="#d-解析二-生成css规则" aria-hidden="true">#</a> D）解析二：生成CSS规则</h4><p><img src="'+oa+'" alt="image-20240117105830788"></p><p>下载和解析CSS时，并不会阻塞DOM Tree的解析，但是如果DOM解析完成了，Style Rules没有生产完，这个时候并不会生成Render Tree。</p><p>总结：</p><ul><li>CSS下载和解析并不会影响DOM Tree的解析。</li><li>会影响Render Tree的生成。</li><li>CSS下载完成后，会对CSS文件进行解析，解析出对应的规则树(CSSOM)，成为CSS对象模型。</li></ul><h4 id="e-解析三-构建render-tree" tabindex="-1"><a class="header-anchor" href="#e-解析三-构建render-tree" aria-hidden="true">#</a> E）解析三：构建Render Tree</h4><p><img src="'+la+'" alt="image-20240117105918047"></p><ul><li>注意一：link元素不会阻塞DOM Tree的构建过程，但是会阻塞Render Tree的构建</li><li>注意二：Render Tree 和 DOM Tree并不是一一对应的关系，有些元素display为none。</li></ul><h4 id="f-布局-layout-和绘制-painting" tabindex="-1"><a class="header-anchor" href="#f-布局-layout-和绘制-painting" aria-hidden="true">#</a> F）布局(layout)和绘制(Painting)</h4><p><img src="'+ra+'" alt="image-20240117110816797"></p><ul><li>layout过程：确定Render Tree上所有节点的大小和位置信息。</li></ul><h3 id="_3-回流和重绘解析" tabindex="-1"><a class="header-anchor" href="#_3-回流和重绘解析" aria-hidden="true">#</a> 3. 回流和重绘解析</h3><p><img src="'+ua+'" alt="image-20240117112355320"></p><h4 id="a-回流" tabindex="-1"><a class="header-anchor" href="#a-回流" aria-hidden="true">#</a> A）回流</h4><p>什么是回流？第一次确定节点的大小和位置，称之为布局(layout)。之后对节点的大小、位置修改重新计算重置为回流。</p><p>什么情况下引起回流？</p><ul><li>改变DOM结构，比如添加新的节点或者移除节点。</li><li>改变了布局，比如修改了width、height、padding、font-size等值。</li><li>修改窗口尺寸。</li><li>调用getComputed方法获取尺寸、位置信息。</li></ul><h4 id="b-重绘" tabindex="-1"><a class="header-anchor" href="#b-重绘" aria-hidden="true">#</a> B）重绘</h4><p>什么是重绘repaint？第一次渲染内容称之为绘制，之后重新渲染称之为重绘。</p><p>什么情况下会引起重绘呢？</p><ul><li>修改背景颜色、文字颜色、边框颜色、样式等。</li></ul><h4 id="c-避免回流" tabindex="-1"><a class="header-anchor" href="#c-避免回流" aria-hidden="true">#</a> C）避免回流</h4><p>回流一定引起重绘，所以回流非常消耗性能，所以在开发中要尽量避免回流。</p><p>如何避免回流，如下：</p><ul><li>修改样式尽量一次修改，比如通过classText或添加class。</li><li>尽量避免频繁地操作DOM，可以在一个DocumentFragment或父元素中将要进行的DOM操作完成。</li><li>尽量避免通过getComputedStyle获取尺寸、位置等信息。</li><li>对某些元素使用position或fixed，并不是说不会引起回流，而是开销相对较小，因为不会对其他元素造成影响。</li></ul><h3 id="_4-合成和性能优化" tabindex="-1"><a class="header-anchor" href="#_4-合成和性能优化" aria-hidden="true">#</a> 4. 合成和性能优化</h3><p><img src="'+da+'" alt="image-20240117215325113"></p><p>通过浏览器开发者工具，我们可以看到标准流元素都在同一个图层中，如下：</p><p><img src="'+ga+'" alt="image-20240117230509512"></p><p>给其中一个元素设置绝对定位，他们还是在同一个图层中，如下：</p><p><img src="'+ma+'" alt="image-20240117230726677"></p><p>接下来我们将绝对定位修改为固定定位，他们就不在同一个图层中，如下：</p><p><img src="'+ka+'" alt="image-20240117231057385"></p><p>当我们使用transform2D转换时，还是和标准流元素在同一个图层中，如下：</p><p><img src="'+ha+'" alt="image-20240117231555429"></p><p>但是当我们使用transform3D转换时，则会产生新的图层，如下：</p><p><img src="'+ba+'" alt="image-20240117231657666"></p><h3 id="_5-defer和async属性" tabindex="-1"><a class="header-anchor" href="#_5-defer和async属性" aria-hidden="true">#</a> 5. defer和async属性</h3><p><img src="'+_a+'" alt="image-20240118085031694"></p><h4 id="a-defer属性" tabindex="-1"><a class="header-anchor" href="#a-defer属性" aria-hidden="true">#</a> A）defer属性</h4><p>总结：</p><ul><li>defer在DOM Tree构建完成之后，DOMContentLoaded回调之前，执行。</li><li>多个defer之间可以保持正确的实行顺序。</li><li>建议放在header标签内，提前告诉浏览器，让其下载。</li><li>defer只适用于外部脚本。</li></ul><p><img src="'+va+'" alt="image-20240118091804098"></p><p>浏览器遇到script会等待其下载完成并解析，会影响后面的HTML解析，如下</p><p><img src="'+fa+'" alt="image-20240118101001288"></p><p>我们对script标签添加defer属性后，就不会阻塞后面html元素的解析，如下：</p><p><img src="'+xa+'" alt="image-20240118101110201"></p><p>在DOM Tree构建完成，然后执行defer中的代码，然后再回调DOMContentLoaded事件，如下：</p><p><img src="'+ja+'" alt="image-20240118101849057"></p><p>多个defer脚本可以保持正确的执行顺序，如下：</p><p><img src="'+wa+'" alt="image-20240118102557216"></p><h4 id="b-async属性" tabindex="-1"><a class="header-anchor" href="#b-async属性" aria-hidden="true">#</a> B）async属性</h4><p>总结：</p><ul><li>不会阻塞 DOM Tree的构建</li><li>下载完成立刻执行，不会等待DOM Tree构建的完成</li><li>没有正确的执行顺序</li></ul><p><img src="'+ya+'" alt="image-20240118102758733"></p><p>async属性也是不会阻塞DOM Tree的构建，如下：</p><p><img src="'+Oa+'" alt="image-20240118103100517"></p><p>async属性的script脚本完全独立，只要下载完成立马执行，不管DOM Tree是否构建完成。并且多个async之间的执行顺序不确定，如下：</p><p><img src="'+Da+'" alt="image-20240118103721089"></p><h3 id="三-javascript执行原理" tabindex="-1"><a class="header-anchor" href="#三-javascript执行原理" aria-hidden="true">#</a> 三，JavaScript执行原理</h3><h3 id="_1-深入v8引擎原理" tabindex="-1"><a class="header-anchor" href="#_1-深入v8引擎原理" aria-hidden="true">#</a> 1. 深入V8引擎原理</h3><p><img src="'+Ta+'" alt="image-20240118140644593"></p><p><img src="'+Sa+'" alt="image-20240118140724886"></p><p><img src="'+Ca+'" alt="image-20240118145025238"></p><p><img src="'+qa+'" alt="image-20240118145728206"></p><h3 id="_2-js执行上下文" tabindex="-1"><a class="header-anchor" href="#_2-js执行上下文" aria-hidden="true">#</a> 2. JS执行上下文</h3><p><img src="'+Aa+'" alt="image-20240118162349059"></p><h4 id="a-初始化全局对象" tabindex="-1"><a class="header-anchor" href="#a-初始化全局对象" aria-hidden="true">#</a> A）初始化全局对象</h4><ul><li>js引擎在执行代码之前，会创建一个全局对象(Global Object)，所有作用域都可以访问到。</li><li>该对象包含，Date、Array、String、Number、setTimeout等。</li></ul><p><img src="'+Ma+'" alt="image-20240118170715894"></p><h4 id="b-执行上下文-execution-context" tabindex="-1"><a class="header-anchor" href="#b-执行上下文-execution-context" aria-hidden="true">#</a> B）执行上下文(Execution Context)</h4><p><img src="'+Ba+'" alt="image-20240118175419465"></p><h4 id="c-vo对象-variabal-object" tabindex="-1"><a class="header-anchor" href="#c-vo对象-variabal-object" aria-hidden="true">#</a> C）VO对象(Variabal Object)</h4><p><img src="'+Ea+'" alt="image-20240118175837312"></p><ul><li>要执行代码就要创建一个执行上下文，全局代码会创建一个全局执行上下文(GEC)。</li><li>每一个执行上下文(EC)都会关联一个VO(Variable Object，变量对象)。</li><li>变量和函数的声明会添加到这个VO对象中。</li><li>全局执行上下文的VO就是GO。</li></ul><p>创建执行上下文 -&gt; 将变量和函数存放在VO(变量没有赋值) -&gt; 执行代码，给变量赋值。</p><h3 id="_3-全局代码执行过程" tabindex="-1"><a class="header-anchor" href="#_3-全局代码执行过程" aria-hidden="true">#</a> 3. 全局代码执行过程</h3><p><img src="'+Pa+'" alt="image-20240118175910766"></p><p><img src="'+Va+'" alt="image-20240118175934097"></p><p><img src="'+Na+'" alt="image-20240118191426070"></p><p><img src="'+Ra+'" alt="image-20240118191732718"></p><p><img src="'+Ja+'" alt="image-20240118191817427"></p><h3 id="_4-函数代码执行过程" tabindex="-1"><a class="header-anchor" href="#_4-函数代码执行过程" aria-hidden="true">#</a> 4. 函数代码执行过程</h3><p><img src="'+Fa+'" alt="image-20240118191848940"></p><p><img src="'+za+'" alt="image-20240118191906304"></p><p><img src="'+Ga+'" alt="image-20240118191929784"></p><p><img src="'+La+'" alt="image-20240118192259684"></p><p><img src="'+Ua+'" alt="image-20240118192130253"></p><p><img src="'+Ha+'" alt="image-20240118192217979"></p><p>总结：</p><ul><li>要执行代码块就要创建一个执行上下文</li><li>每一个执行上下文都会有一个VO(Variable Object)。</li><li>执行代码前，会创建一个AO，并于VO关连。将变量的声明放入AO中，但是没有赋值。</li><li>执行代码，对AO中的变量进行赋值。</li><li>代码块执行完毕，执行上下文出栈，并销毁AO。</li></ul><h3 id="_5-作用域和作用域链" tabindex="-1"><a class="header-anchor" href="#_5-作用域和作用域链" aria-hidden="true">#</a> 5. 作用域和作用域链</h3><ul><li>每个执行上下文都会关联一个作用域链</li><li>执行全局代码，作用域链里只有GO，执行函数代码，函数创建的那一刻已经知道自己的作用域链，执行代码时，会把作用连赋值给执行上下文中的scope chain。</li><li>函数的作用域链在函数声明时就已经确定了。</li></ul><p><img src="'+Ya+'" alt="image-20240118192555945"></p><h2 id="四-内存管理和闭包" tabindex="-1"><a class="header-anchor" href="#四-内存管理和闭包" aria-hidden="true">#</a> 四，内存管理和闭包</h2><h3 id="_1-javascript内存管理" tabindex="-1"><a class="header-anchor" href="#_1-javascript内存管理" aria-hidden="true">#</a> 1. JavaScript内存管理</h3><p><img src="'+Wa+'" alt="image-20240118231301998"></p><p><img src="'+Ia+'" alt="image-20240118231349346"></p><h3 id="_2-垃圾回收机制算法" tabindex="-1"><a class="header-anchor" href="#_2-垃圾回收机制算法" aria-hidden="true">#</a> 2. 垃圾回收机制算法</h3><p><img src="'+Ka+'" alt="image-20240118231453145"></p><p><img src="'+Qa+'" alt="image-20240118231623480"></p><p><img src="'+Xa+'" alt="image-20240118231653973"></p><p><img src="'+Za+'" alt="image-20240118231749041"></p><h3 id="_3-闭包的概念" tabindex="-1"><a class="header-anchor" href="#_3-闭包的概念" aria-hidden="true">#</a> 3. 闭包的概念</h3><p><img src="'+$a+'" alt="image-20240119092635107"></p><p><img src="'+an+'" alt="image-20240119095540595"></p><ul><li>闭包是一个结构体，它存储了一个函数和关联体的环境。</li><li>一个函数和对其周围状态的引用捆绑在一起，这样的组合就是闭包。</li><li>也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域。</li><li>在js中，每创建一个函数，闭包就会在函数创建的同时被创建出来。</li></ul><p><img src="'+nn+'" alt="image-20240119102448586"></p><p>面试回答：</p><ul><li>一个普通函数，如果它可以访问外层作用域的自由变量，那么这个函数和周围环境就是一个闭包。</li><li>从广义角度来说，JavaScript中的函数都是闭包。</li><li>从狭义的角度来说，JavaScript中一个函数，如果访问了外层作用域的变量，那么它是一个闭包。</li></ul><h3 id="_4-闭包的形成过程" tabindex="-1"><a class="header-anchor" href="#_4-闭包的形成过程" aria-hidden="true">#</a> 4. 闭包的形成过程</h3><p><img src="'+sn+'" alt="image-20240119103738149"></p><h3 id="_5-闭包的内存泄漏" tabindex="-1"><a class="header-anchor" href="#_5-闭包的内存泄漏" aria-hidden="true">#</a> 5. 闭包的内存泄漏</h3><p><img src="'+tn+'" alt="image-20240119121314584"></p><h4 id="a-内存泄漏测试" tabindex="-1"><a class="header-anchor" href="#a-内存泄漏测试" aria-hidden="true">#</a> A）内存泄漏测试</h4><p><img src="'+pn+'" alt="image-20240119121338492"></p><h4 id="b-优化闭包内存泄漏" tabindex="-1"><a class="header-anchor" href="#b-优化闭包内存泄漏" aria-hidden="true">#</a> B）优化闭包内存泄漏</h4><p><img src="'+en+'" alt="image-20240119121502197"></p><h2 id="五-函数的增强知识" tabindex="-1"><a class="header-anchor" href="#五-函数的增强知识" aria-hidden="true">#</a> 五，函数的增强知识</h2><h3 id="_1-函数属性" tabindex="-1"><a class="header-anchor" href="#_1-函数属性" aria-hidden="true">#</a> 1. 函数属性</h3><ul><li>name属性是函数名</li><li>length是函数的形参个数，不包括默认值参数，和剩余参数。</li></ul><p><img src="'+cn+'" alt="image-20240119123125508"></p><p>我们知道可以给一个对象添加属性，并进行操作。然而函数也是一个对象，我们可以对其添加自定义属性，如下：</p><p><img src="'+on+'" alt="image-20240119123432853"></p><p>函数默认有自己的属性，name属性存放函数名字，如下：</p><p><img src="'+ln+'" alt="image-20240119123803911"></p><p>我们还可以通过函数的默认属性length获取到函数的形参数个数，如下：</p><p><img src="'+rn+'" alt="image-20240119124154789"></p><p>注意：函数的length属性不会包括剩余参数和有默认值的参数，如下：</p><p><img src="'+un+'" alt="image-20240119124841207"></p><h3 id="_2-arguments" tabindex="-1"><a class="header-anchor" href="#_2-arguments" aria-hidden="true">#</a> 2. arguments</h3><ul><li>arguments是伪数组，可以通过索引获取元素或遍历，但是不能调用数组方法。</li><li>arguments是一个可迭代对象，可以使用for of。</li></ul><h4 id="a-什么是arguments" tabindex="-1"><a class="header-anchor" href="#a-什么是arguments" aria-hidden="true">#</a> A）什么是arguments</h4><p><img src="'+dn+'" alt="image-20240119125149771"></p><p>arguments是一个伪数组，可以通过索引获取元素，但是不能使用数组方法。同时它也是一个可迭代对象，可以使用forof，如下：</p><p><img src="'+gn+'" alt="image-20240119130135894"></p><p><img src="'+mn+'" alt="image-20240119130401892"></p><h4 id="b-arguments转array" tabindex="-1"><a class="header-anchor" href="#b-arguments转array" aria-hidden="true">#</a> B）arguments转Array</h4><p><img src="'+kn+'" alt="image-20240119130435652"></p><p>但是我们有时候需要将argumens转换为数组，从而使用数组的一些方法。</p><p>方式一：遍历放入新数组，如下：</p><p><img src="'+hn+'" alt="image-20240119130938922"></p><p>方式二：使用slice，如下：</p><p><img src="'+bn+'" alt="image-20240119140420078"></p><p>方式三：使用ES6的方法，如下：</p><p><img src="'+_n+'" alt="image-20240119131221256"></p><p><img src="'+vn+'" alt="image-20240119131353929"></p><h4 id="b-箭头函数中没有arguments" tabindex="-1"><a class="header-anchor" href="#b-箭头函数中没有arguments" aria-hidden="true">#</a> B）箭头函数中没有arguments</h4><p><img src="'+fn+'" alt="image-20240119140630974"></p><p>箭头函数中不绑定arguments，如下：</p><p><img src="'+xn+'" alt="image-20240119141018064"></p><p>当普通函数嵌套箭头函数时，箭头函数中可以访问到arguments，如下：</p><p><img src="'+jn+'" alt="image-20240119141228238"></p><h3 id="c-函数的剩余参数" tabindex="-1"><a class="header-anchor" href="#c-函数的剩余参数" aria-hidden="true">#</a> C）函数的剩余参数</h3><ul><li>剩余参数只包含对应没有形参的实参，而arguments包含传给函数的所有实参。</li><li>剩余参数是一个真正的数组</li></ul><p><img src="'+wn+'" alt="image-20240119142123027"></p><p>如果要接收多个实参，可以使用ES6的剩余参数，如下：</p><p><img src="'+yn+'" alt="image-20240119142736297"></p><p>注意事项：剩余参数需要写到其他参数的最后，如下：</p><p><img src="'+On+'" alt="image-20240119145532094"></p><h3 id="_3-纯函数的理解和应用" tabindex="-1"><a class="header-anchor" href="#_3-纯函数的理解和应用" aria-hidden="true">#</a> 3. 纯函数的理解和应用</h3><h3 id="a-什么是纯函数" tabindex="-1"><a class="header-anchor" href="#a-什么是纯函数" aria-hidden="true">#</a> A）什么是纯函数</h3><ul><li>确定的输入，一定会产生确定的输出。</li><li>函数在执行过程中，不能产生副作用。</li></ul><p><img src="'+Dn+'" alt="image-20240119150001322"></p><p><img src="'+Tn+'" alt="image-20240119151708581"></p><h4 id="b-什么是副作用" tabindex="-1"><a class="header-anchor" href="#b-什么是副作用" aria-hidden="true">#</a> B）什么是副作用</h4><ul><li>使用了外部变量。</li><li>修改了外部变量。</li><li>副作用是产生bug的温床。</li></ul><p><img src="'+Sn+'" alt="image-20240119150049085"></p><h4 id="c-纯函数的案例" tabindex="-1"><a class="header-anchor" href="#c-纯函数的案例" aria-hidden="true">#</a> C）纯函数的案例</h4><p><img src="'+Cn+'" alt="image-20240119152218796"></p><p><img src="'+qn+'" alt="image-20240119162356863"></p><h4 id="d-纯函数的左右和优势" tabindex="-1"><a class="header-anchor" href="#d-纯函数的左右和优势" aria-hidden="true">#</a> D）纯函数的左右和优势</h4><p><img src="'+An+'" alt="image-20240119162540615"></p><p><img src="'+Mn+'" alt="image-20240119163013828"></p><h3 id="_4-柯里化的理解和应用" tabindex="-1"><a class="header-anchor" href="#_4-柯里化的理解和应用" aria-hidden="true">#</a> 4. 柯里化的理解和应用</h3><h3 id="_5-组合函数理解和应用" tabindex="-1"><a class="header-anchor" href="#_5-组合函数理解和应用" aria-hidden="true">#</a> 5. 组合函数理解和应用</h3><h4 id="a-什么是组合函数" tabindex="-1"><a class="header-anchor" href="#a-什么是组合函数" aria-hidden="true">#</a> A）什么是组合函数</h4><p><img src="'+Bn+'" alt="image-20240119163232423"></p><p>我们有一个需求对一个数字先乘2，再给他平方，如下：</p><p><img src="'+En+'" alt="image-20240119164653149"></p><h4 id="b-实现组合函数" tabindex="-1"><a class="header-anchor" href="#b-实现组合函数" aria-hidden="true">#</a> B）实现组合函数</h4><h3 id="_6-with、eval的使用" tabindex="-1"><a class="header-anchor" href="#_6-with、eval的使用" aria-hidden="true">#</a> 6. with、eval的使用</h3><h4 id="a-with" tabindex="-1"><a class="header-anchor" href="#a-with" aria-hidden="true">#</a> A）with</h4><ul><li>with会修改作用域链。</li><li>存在兼容性问题。</li><li>开发中不建议使用。</li></ul><p><img src="'+Pn+'" alt="image-20240119165041375"></p><p><img src="'+Vn+'" alt="image-20240119165629713"></p><h4 id="b-eval函数" tabindex="-1"><a class="header-anchor" href="#b-eval函数" aria-hidden="true">#</a> B）eval函数</h4><ul><li>将传入的字符串当作js代码执行。</li><li>将最后一个语句的执行结果，作为返回值。</li></ul><p><img src="'+Nn+'" alt="image-20240119165124538"></p><p><img src="'+Rn+'" alt="image-20240119170306668"></p><h3 id="_7-严格模式的使用" tabindex="-1"><a class="header-anchor" href="#_7-严格模式的使用" aria-hidden="true">#</a> 7. 严格模式的使用</h3><h4 id="a-认识严格模式" tabindex="-1"><a class="header-anchor" href="#a-认识严格模式" aria-hidden="true">#</a> A）认识严格模式</h4><p><img src="'+Jn+'" alt="image-20240119170438809"></p><h4 id="b-开启严格模式" tabindex="-1"><a class="header-anchor" href="#b-开启严格模式" aria-hidden="true">#</a> B）开启严格模式</h4><p><img src="'+Fn+'" alt="image-20240119174552668"></p><p>我们可以颗粒度地控制严格模式，如下：</p><p><img src="'+zn+'" alt="image-20240119175618637"></p><h4 id="c-严格模式限制" tabindex="-1"><a class="header-anchor" href="#c-严格模式限制" aria-hidden="true">#</a> C）严格模式限制</h4><p><img src="'+Gn+'" alt="image-20240119174644817"></p><p>开启严格模式后，不会意外地创建全局变量，如下：</p><p><img src="'+Ln+'" alt="image-20240119180014902"></p><p>严格模式下，会抛出静默错误，如下：</p><p><img src="'+Un+'" alt="image-20240119181224701"></p><p><img src="'+Hn+'" alt="image-20240119181436894"></p><p>严格模式下，函数形参名称不能相同，如下：</p><p><img src="'+Yn+'" alt="image-20240119185512830"></p><p>严格模式下，不允许0开头的八进制，如下：</p><p><img src="'+Wn+'" alt="image-20240119192913093"></p><p><img src="'+In+'" alt="image-20240119192941125"></p><p>严格模式下，eval函数不能为上层创建变量，如下：</p><p><img src="'+Kn+'" alt="image-20240119200233281"></p><p>严格模式下，this绑定不会默认转成对象，如下：</p><p><img src="'+Qn+'" alt="image-20240119200524733"></p><p><img src="'+Xn+'" alt="image-20240119200614899"></p><p>严格模式下，可以显式绑定undefi和null，如下：</p><p><img src="'+Zn+'" alt="image-20240119200813195"></p><p>严格模式下，this默认绑定不会指向window，而是指向undefined。如下：</p><p><img src="'+$n+'" alt="image-20240119201042395"></p><h2 id="六-对象增强" tabindex="-1"><a class="header-anchor" href="#六-对象增强" aria-hidden="true">#</a> 六，对象增强</h2><h3 id="_1-object-defineproperty" tabindex="-1"><a class="header-anchor" href="#_1-object-defineproperty" aria-hidden="true">#</a> 1. Object.defineProperty</h3><p><img src="'+as+'" alt="image-20240119230539746"></p><p><img src="'+ns+'" alt="image-20240119231319166"></p><p><img src="'+ss+'" alt="image-20240119231400321"></p><h3 id="_2-数据属性描述符" tabindex="-1"><a class="header-anchor" href="#_2-数据属性描述符" aria-hidden="true">#</a> 2. 数据属性描述符</h3><p><img src="'+ts+'" alt="image-20240119231531846"></p><h4 id="a-configurable" tabindex="-1"><a class="header-anchor" href="#a-configurable" aria-hidden="true">#</a> A）configurable</h4><p>通过数据属性描述符，我们可以对属性精准控制，如下：</p><p><img src="'+ps+'" alt="image-20240119232313964"></p><p><img src="'+es+'" alt="image-20240119232818229"></p><h4 id="b-enumerable" tabindex="-1"><a class="header-anchor" href="#b-enumerable" aria-hidden="true">#</a> B）Enumerable</h4><p>控制该属性是否可以被枚举(遍历)，如下：</p><p><img src="'+is+'" alt="image-20240120075727320"></p><h4 id="c-writable" tabindex="-1"><a class="header-anchor" href="#c-writable" aria-hidden="true">#</a> C）Writable</h4><p>控制属性书否可以被修改，如下：</p><p><img src="'+cs+'" alt="image-20240120080026288"></p><h4 id="d-value" tabindex="-1"><a class="header-anchor" href="#d-value" aria-hidden="true">#</a> D）value</h4><p>属性的value值，读取属性时会返回该值，修改属性时，会对其进行修改。 默认情况下这个值是undefined，如下：</p><p><img src="'+os+'" alt="image-20240120080632504"></p><h3 id="_3-存取属性描述符" tabindex="-1"><a class="header-anchor" href="#_3-存取属性描述符" aria-hidden="true">#</a> 3. 存取属性描述符</h3><p><img src="'+ls+'" alt="image-20240120081310623"></p><h4 id="a-set" tabindex="-1"><a class="header-anchor" href="#a-set" aria-hidden="true">#</a> A）set</h4><p><img src="'+rs+'" alt="image-20240120082115906"></p><h4 id="b-get" tabindex="-1"><a class="header-anchor" href="#b-get" aria-hidden="true">#</a> B）get</h4><p><img src="'+us+'" alt="image-20240120090147786"></p><h3 id="_4-object-defineproperties" tabindex="-1"><a class="header-anchor" href="#_4-object-defineproperties" aria-hidden="true">#</a> 4. Object.defineProperties</h3><p><img src="'+ds+'" alt="image-20240120090232513"></p><p><img src="'+gs+'" alt="image-20240120090626390"></p><h3 id="_5-对象的其他方法补充" tabindex="-1"><a class="header-anchor" href="#_5-对象的其他方法补充" aria-hidden="true">#</a> 5. 对象的其他方法补充</h3><h4 id="a-getownpropertydescriptor" tabindex="-1"><a class="header-anchor" href="#a-getownpropertydescriptor" aria-hidden="true">#</a> A）getOwnPropertyDescriptor</h4><p>获取对象的属性描述符，如下：</p><p><img src="'+ms+'" alt="image-20240120090907534"></p><h4 id="b-getownpropertydescriptors" tabindex="-1"><a class="header-anchor" href="#b-getownpropertydescriptors" aria-hidden="true">#</a> B）getOwnPropertyDescriptors</h4><p>获取对象的多个属性描述符，如下：</p><p><img src="'+ks+'" alt="image-20240120091030648"></p><h4 id="c-preventextensions" tabindex="-1"><a class="header-anchor" href="#c-preventextensions" aria-hidden="true">#</a> C）preventExtensions</h4><p>给一个对象添加新的属性会失败（在严格模式下会报错）,如下：</p><p><img src="'+hs+'" alt="image-20240120091324531"></p><h4 id="d-seal" tabindex="-1"><a class="header-anchor" href="#d-seal" aria-hidden="true">#</a> D）seal</h4><p>实际是调用preventExtensions，并且将现有属性的configurable:false，如下：</p><p><img src="'+bs+'" alt="image-20240120091613560"></p><h4 id="e-freeze" tabindex="-1"><a class="header-anchor" href="#e-freeze" aria-hidden="true">#</a> E）freeze</h4><p>实际上是调用seal， 并且将现有属性的writable: false，如下：</p><p><img src="'+_s+'" alt="image-20240120091813939"></p>',411),xs=[fs];function js(ws,ys){return n(),s("div",null,xs)}const Ds=a(vs,[["render",js],["__file","04.html.vue"]]);export{Ds as default};

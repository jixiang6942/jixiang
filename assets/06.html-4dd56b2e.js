import{_ as n,o as s,c as a,a as t}from"./app-fbcf72b1.js";const p="/jixiang/assets/1695781456785.3ce3758b-efff1bdc.png",e="/jixiang/assets/image-20240108223410423-2f3dadfa.png",o="/jixiang/assets/1695782071338.d6443604-a853112e.png",c="/jixiang/assets/image-20240109083002670-5a4c03f0.png",i="/jixiang/assets/1695785766858.08ef87a4-09b7974c.png",l="/jixiang/assets/1695786003900.9dfbeac1-4df4646b.png",u="/jixiang/assets/1695786276825.dc0a89e6-217e6d14.png",r="/jixiang/assets/1695786370262.64a400bd-3d044c5c.png",k="/jixiang/assets/1695786502112.f85c21c4-de9f3587.png",d="/jixiang/assets/1695786574977.c9edc002-6c91f035.png",m="/jixiang/assets/1695786675603.6da6c9a7-0ba33c1f.png",v="/jixiang/assets/image-20240109094729633-1c6f2aff.png",g="/jixiang/assets/image-20240109095003977-070a887c.png",b="/jixiang/assets/image-20240109095446433-61688980.png",h="/jixiang/assets/image-20240109100253603-fbef6347.png",f="/jixiang/assets/image-20240109100437892-a6e094a1.png",_="/jixiang/assets/image-20240109100823398-3666756c.png",w="/jixiang/assets/image-20240109101021597-7b8e0f7b.png",y="/jixiang/assets/image-20240109102205310-3fa04ac4.png",x="/jixiang/assets/image-20240109103103851-a0dc9fcb.png",j="/jixiang/assets/image-20240109103231956-e627aeca.png",q="/jixiang/assets/image-20240109103523049-93c08461.png",P="/jixiang/assets/image-20240109104145188-f44b2f12.png",T="/jixiang/assets/image-20240109105605560-285f52c2.png",S="/jixiang/assets/image-20240109110013086-805fcf42.png",J="/jixiang/assets/image-20240109110720117-8b123360.png",D="/jixiang/assets/image-20240109111003430-69d047b6.png",O="/jixiang/assets/image-20240109111153737-d4431219.png",U="/jixiang/assets/image-20240109111336680-36b9d94d.png",E="/jixiang/assets/image-20240109123110193-a4c650e9.png",F="/jixiang/assets/image-20240109132250453-0a016fe9.png",B="/jixiang/assets/image-20240109132548330-32ea9603.png",I="/jixiang/assets/image-20240109133814006-f4d0d437.png",M="/jixiang/assets/1695865495907.07f273b8-6476f248.png",N="/jixiang/assets/1695865805439.cb3f8b9c-19e98a3d.png",C="/jixiang/assets/1695868311178.14debdbb-854db593.png",V="/jixiang/assets/1695868673517.7d47b8b5-9b17f1e2.png",z="/jixiang/assets/image-20240110080718963-c46f04d0.png",A="/jixiang/assets/image-20240110081631296-24677133.png",G="/jixiang/assets/image-20240110083227831-4aed8462.png",H="/jixiang/assets/image-20240110083940920-040cf91d.png",K={},L=t('<h2 id="一-最早解决异步" tabindex="-1"><a class="header-anchor" href="#一-最早解决异步" aria-hidden="true">#</a> 一，最早解决异步</h2><h3 id="_1-代码分类" tabindex="-1"><a class="header-anchor" href="#_1-代码分类" aria-hidden="true">#</a> 1，代码分类</h3><p><strong>JS中的代码，分两类</strong></p><ul><li>同步代码 <ul><li>我们写的绝大代码都是从上到下执行的，也就是说代码的书写顺序和代码的执行顺序是一样的，这样的代码是同步代码，也就说，你看到的98%的代码都是同步代码。</li></ul></li><li>异步代码 <ul><li>还有一部分代码，是异步代码，异步代码的书写顺序和代码的执行顺序不一样，这样的代码很少，我们学一类，说一类，前面学的定时器，就是异步代码。</li></ul></li></ul><p>看如下的代码：</p><p><img src="'+p+'" alt="1695781456785.3ce3758b"></p><p>计算从0到某个数的和，三秒后出结果，给的数可以是正确的，也可能是不正确。实现之，如下：</p><p><img src="'+e+'" alt="image-20240108223410423"></p><p>如果异步任务嵌套了多层，会导致回调地狱，如下：</p><p><img src="'+o+`" alt="1695782071338.d6443604"></p><p>回调地狱的代码，功能是没有问题的，但是代码不优雅。如何更加优雅解决异步问题，就需要学习我们今天的promise。promise知识也是原生的JS的知识点。说白了，学习的还是原生JS。</p><h2 id="二-promise" tabindex="-1"><a class="header-anchor" href="#二-promise" aria-hidden="true">#</a> 二，Promise</h2><h3 id="_1-promise介绍" tabindex="-1"><a class="header-anchor" href="#_1-promise介绍" aria-hidden="true">#</a> 1，Promise介绍</h3><p><strong>Promise是ES6中的一个类，翻译是承诺，许诺的意思。</strong></p><ul><li>new Promise就可以得到一个对象，new Promise时，需要传入一个回调函数，这个回调函数是立即执行，叫执行器，这个执行器中有两个参数，分别是resolve和reject，在执行器，可以写代码代码，代码如下：</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">

  <span class="token comment">// 函数也是数据</span>
  <span class="token comment">// p叫promise对象</span>
  <span class="token comment">// new Promise时，写的那个函数，叫执行器，执行器会立即执行</span>
  <span class="token comment">// Promise有三个状态  当new出来时，是处于等状态</span>
  <span class="token comment">// 调用resolve可以把等待状态的promise变成成功态</span>
  <span class="token comment">// 调用reject可以把等待状态的promise变成失败态</span>
  <span class="token comment">// 一个promise只能从等待到成功或从等待到失败</span>
  <span class="token comment">// 一但成功了，就不能失败了</span>
  <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是执行器，我立即执行了...&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 在执行器中通常写异步代码，我们说的异步指的是定时器中的回调函数</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是定时器&#39;</span><span class="token punctuation">)</span>
      <span class="token comment">// 在异步代码中，可以调用resovle或reject</span>
      <span class="token comment">// resolve,reject是一个函数</span>
      <span class="token comment">// resolve中的值，就是成功的值，也就是终值  value</span>
      <span class="token comment">// resolve(&#39;包包&#39;) // 就是把等待的promise变成成功的promise</span>

      <span class="token comment">// reject中的值，就是失败的值，也就是失败的原因  reason</span>
      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;没钱&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 就是把等待的promise变成失败的promise</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">// pending 是等待的意思</span>

  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">// rejected 表示失败了  fulfilled表示成功状态</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Promise有三种状态:</strong></p><ul><li>等待状态：pending 默认你创建出来的promise是处于等待状态</li><li>成功状态：fulfulled 当调用resolve时，就可以把promise从等待变成成功</li><li>失败状态：rejected 当调用reject时，就可以把promise从等待变成失败</li></ul><p>改造一下上面的写的案例，如下：</p><p><img src="`+c+`" alt="image-20240109083002670"></p><h3 id="_2-resolve的实参问题" tabindex="-1"><a class="header-anchor" href="#_2-resolve的实参问题" aria-hidden="true">#</a> 2，resolve的实参问题</h3><p>调用resolve，pormise不一定都是成功的promise，分三种情况：</p><ul><li>传递一个普通的数据，promise是成功的promise</li><li>传递一个p(promise)，最终的promise是成功还是失败取决于p。</li><li>传递一个thenable，最终的promise是成功还是失败取决于thenable。</li></ul><p>代码演示：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// const p = new Promise((resolve, reject) =&gt; {</span>
    <span class="token comment">//   setTimeout(() =&gt; {</span>
    <span class="token comment">//     // resolve(&quot;p的resolve&quot;)</span>
    <span class="token comment">//     reject(&quot;没钱&quot;)</span>
    <span class="token comment">//   }, 2000)</span>
    <span class="token comment">// })</span>

    <span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">//  1）参数是普通的数据</span>
        <span class="token comment">// resolve(&#39;包包&#39;)</span>
        <span class="token comment">// resolve(111)</span>
        <span class="token comment">// resolve([&quot;a&quot;,&quot;b&quot;,&quot;c&quot;])</span>
        <span class="token comment">// resolve({ name: &quot;ml&quot; })</span>

        <span class="token comment">// 2）参数是promise </span>
        <span class="token comment">// 如果resolve的参数是promise，最终结果由p决定</span>
        <span class="token comment">// resolve(p)</span>

        <span class="token comment">// 3）参数是thenable(就是一个对象中有一个then函数)</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// resolve(&quot;包包&quot;)</span>
                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&quot;没钱&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;value:&quot;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;err:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-then方法" tabindex="-1"><a class="header-anchor" href="#_3-then方法" aria-hidden="true">#</a> 3，then方法</h3><p>一个promise对象，都有一个then方法，只要是一个promise，都有一个then方法，代码演示：</p><p><img src="`+i+'" alt="1695785766858.08ef87a4"></p><h3 id="_4-then函数的返回值" tabindex="-1"><a class="header-anchor" href="#_4-then函数的返回值" aria-hidden="true">#</a> 4，then函数的返回值</h3><p>then方法是有返回值的，它返回一个新的promise，只要你敢then，就返回一个新的promise。代码如下：</p><p><img src="'+l+'" alt="1695786003900.9dfbeac1"></p><p>现在我们需要研究新的promsie是成功的还是失败的，新的promise是成功的还是失败的，取决于上一个then做了什么，当上一个then方法中的回调函数在执行时，新promise处于等待状态，当上一个then返回一个结果时，那这个结果就决定了新的promise的状态，情况有下面四种：</p><ul><li>上一个then返回一个普通的值（包含und） 新的promise是成功的promsie</li><li>上一个then返回一个promise</li><li>上一个then返回一个thenable值</li><li>上一个then抛出一个错误</li></ul><p>上一个then返回一个普通的值（包含und） 新的promise是成功的promsie，代码演示：</p><p><img src="'+u+'" alt="1695786276825.dc0a89e6"></p><p>看如下的题目：</p><p><img src="'+r+'" alt="1695786370262.64a400bd"></p><p>上一个then返回一个promise，代码演示：</p><p><img src="'+k+'" alt="1695786502112.f85c21c4"></p><p>上一个then返回一个thenable值，代码演示：</p><p><img src="'+d+'" alt="1695786574977.c9edc002"></p><p>上一个then抛出一个错误，新的promise就是一个失败的promise，如下：</p><p><img src="'+m+'" alt="1695786675603.6da6c9a7"></p><h3 id="_5-then的顺延" tabindex="-1"><a class="header-anchor" href="#_5-then的顺延" aria-hidden="true">#</a> 5，then的顺延</h3><p>当我们调用then方法时，可以传递两个函数，第一个函数是pormise成功的时候调用，第二个函数是promise失败的时候调用。我们要考虑，这两个函数，能不能就传递一个呢？如下：</p><p><img src="'+v+'" alt="image-20240109094729633"></p><p>测试一个失败的promise是否可以顺延迟，如下：</p><p><img src="'+g+'" alt="image-20240109095003977"></p><p>根据then的顺延，引出catch，如下：</p><p><img src="'+b+'" alt="image-20240109095446433"></p><p>在开发中一般是这么玩的，在then中获取成功的结果，在catch中获取失败的结果，如下：</p><p><img src="'+h+'" alt="image-20240109100253603"></p><h3 id="_6-finally" tabindex="-1"><a class="header-anchor" href="#_6-finally" aria-hidden="true">#</a> 6，finally</h3><p>在ES9中，新增了finally方法，无论promise是成功的，还是失败的，最终都会执行finally，直接上代码，如下：</p><p><img src="'+f+'" alt="image-20240109100437892"></p><h3 id="_7-promise的静态方法" tabindex="-1"><a class="header-anchor" href="#_7-promise的静态方法" aria-hidden="true">#</a> 7，Promise的静态方法</h3><p>前面学习的then，catch，finally都是promise实例上的方法，其实在Promise这个类上面，还有一些，这些方法，叫静态方法，代码如下：</p><p><img src="'+_+'" alt="image-20240109100823398"></p><p><img src="'+w+'" alt="image-20240109101021597"></p><p>还有一个all方法，all的作用：</p><ul><li>所有promise都成功后，得到所有成功后的promise结果</li><li>如果有一个先失败了，直接得到最先失败promise的结果</li></ul><p>代码演示：</p><p><img src="'+y+'" alt="image-20240109102205310"></p><p>还有一个方法，叫allSettled，作用：</p><ul><li>获取所有的promise的结果，不管成功还是失败</li></ul><p>代码演示：</p><p><img src="'+x+'" alt="image-20240109103103851"></p><p><img src="'+j+'" alt="image-20240109103231956"></p><p>还有一个方法，叫race，race是比赛的意思，作用：</p><ul><li>会等到第一个Promise有结果(无论这个结果是fulfilled还是rejected)</li></ul><p>代码演示：</p><p><img src="'+q+'" alt="image-20240109103523049"></p><p>最后一个，叫any，作用：</p><ul><li>返回第1个成功的 或者 返回所有都失败了</li></ul><p>代码演示：</p><p><img src="'+P+'" alt="image-20240109104145188"></p><h2 id="三-async函数" tabindex="-1"><a class="header-anchor" href="#三-async函数" aria-hidden="true">#</a> 三，async函数</h2><h3 id="_1-什么是async函数" tabindex="-1"><a class="header-anchor" href="#_1-什么是async函数" aria-hidden="true">#</a> 1，什么是async函数</h3><p>async是一个关键字，用于声明一个异步函数，async是asynchronous简写，是异步的意思。直接上代码演示：</p><p><img src="'+T+'" alt="image-20240109105605560"></p><h3 id="_2-async函数的返回值" tabindex="-1"><a class="header-anchor" href="#_2-async函数的返回值" aria-hidden="true">#</a> 2，async函数的返回值</h3><p><strong>记住：异步函数的结果永远都是promise</strong></p><p>异步函数内部代码的执行过程和普通函数是一样的，默认也是同步执行。异步函数和普通函数的区别，如下：</p><ul><li>异步函数可以有返回值，但是不管返回什么普通值，都会包裹在Pormise.resolve中</li><li>如果异步函数自己返回了promise，得到的Promies状态由这个promise决定</li><li>如果我们异步函数返回值是一个对象并且实现thenable，得到的Promies状态由then方法中做了什么才能决定</li><li>如果在async函数中抛出一个错误，得到的promise是一个失败的promsie</li></ul><p>异步函数可以有返回值，但是不管返回什么普通值，都会包裹在Pormise.resolve中，代码如下：</p><p><img src="'+S+'" alt="image-20240109110013086"></p><p>如果异步函数自己返回了promise，得到的Promies状态由这个promise决定，代码演示：</p><p><img src="'+J+'" alt="image-20240109110720117"></p><p>如果我们异步函数返回值是一个对象并且实现thenable，得到的Promies状态由then方法中做了什么才能决定，代码演示：</p><p><img src="'+D+'" alt="image-20240109111003430"></p><p>如果在async函数中抛出一个错误，得到的promise是一个失败的promsie，代码演示：</p><p><img src="'+O+'" alt="image-20240109111153737"></p><p>async函数返回一个promise，如何得到的成功的结果，如何得到失败的结果，如下：</p><p><img src="'+U+'" alt="image-20240109111336680"></p><h2 id="四-await关键字" tabindex="-1"><a class="header-anchor" href="#四-await关键字" aria-hidden="true">#</a> 四，await关键字</h2><h3 id="_1-await关键字介绍" tabindex="-1"><a class="header-anchor" href="#_1-await关键字介绍" aria-hidden="true">#</a> 1，await关键字介绍</h3><p>async关键字可以单独使用，在异步函数内部可以使用await关键字，但是在普通函数中不能使用await关键字，await关键字有什么作用？</p><ul><li>await后面跟一个表达式，这个表达式通常是一个promise</li><li>这个await可以等待它后面的promise成功后，拿到成功的结果，得到之后，才会执行后面的代码。</li></ul><p>await后面可以跟不同的数据：</p><ul><li>如果await后面跟一个普通值，那么会直接返回这个值。</li><li>如果await后面跟一个thenable对象，那么要看你这个thenable中的then做了什么。</li><li>如果await后面的promise是失败的，需要通过try catch来获取失败的结果。</li></ul><p>如果await后面跟一个普通值，那么会直接返回这个值。代码演示：</p><p><img src="'+E+'" alt="image-20240109123110193"></p><p>await后面通常跟promise，代码演示：</p><p><img src="'+F+'" alt="image-20240109132250453"></p><p>如何获取失败的结果呢？如下：</p><p><img src="'+B+'" alt="image-20240109132548330"></p><h3 id="_2-使用async-await处理异步问题" tabindex="-1"><a class="header-anchor" href="#_2-使用async-await处理异步问题" aria-hidden="true">#</a> 2，使用async+await处理异步问题</h3><p><img src="'+I+`" alt="image-20240109133814006"></p><h2 id="五-浏览器事件环" tabindex="-1"><a class="header-anchor" href="#五-浏览器事件环" aria-hidden="true">#</a> 五，浏览器事件环</h2><h3 id="_1-进程与线程" tabindex="-1"><a class="header-anchor" href="#_1-进程与线程" aria-hidden="true">#</a> 1，进程与线程</h3><p><strong>进程：</strong></p><p>计算机已经运行直来的程序，是操作系统操作程序的一种方式。当一个软件运行起来后，就是一个进程，电脑上可以运行很多软件，在OS上，有很多的进程，进程是OS分配资源（CPU和内存）的基本单位。OS可以当在一个工厂，一个个的车间就是进程。</p><p><strong>线程：</strong></p><p>操作系统能够运行运算调度的最小单位，一个进程中，至少要包含一个线程，用来执行程序中的代码，这个线程叫主线程，线程才是真正干活的，类似于工厂中的工人。一个车间如果只有一个工人，就是单线程，如果一个车间中有N个工人，就是多线程。</p><p><strong>浏览器是多进程：</strong></p><p>浏览器是一个多进程的软件，一个选项卡，就是一个进程，进程之间一般是独立的。在每一个进程中，包含了很多的线程，其中就包括JS代码执行线程。</p><p><strong>JS主线程是单线程：</strong></p><p>执行JS代码的线程就一个，也就是说，同一个时刻，只能做一件事，那么我们就说JS是单线程的。如果遇到了一个非常耗时的任务，线程不会阻塞，此时，JS的主线程不会等待，浏览器会开一些其它线程去执行耗时任务，主线程，会把所有的同步代码都执行完毕，浏览器会开一些其它线程去执行耗时任务，我们说的JS是单线程的，是指主线程是单线程的，浏览器内部还可以开一些其它线程，如定时器线程，如ajax数据请求线程。</p><p><strong>异步代码分两类：</strong></p><ul><li>宏任务：ajax，setTimeout，setInterval，DOM事件监听，UI渲染....</li><li>微任务：promies中的then回调 Mutaion Observer ...</li></ul><h3 id="_2-js代码的执行顺序" tabindex="-1"><a class="header-anchor" href="#_2-js代码的执行顺序" aria-hidden="true">#</a> 2，JS代码的执行顺序</h3><p><strong>JS代码的执行顺序：</strong></p><ol><li>从代码段开始执行，先所有的同步任务执行完毕。</li><li>如果遇到一个宏任务，会把这个任务放到一个宏任务队列，如果遇到一个微任务，就把这个微任务放到微任务任务中。</li><li>当同步代码执行完毕后，先去清空微任务队列。</li><li>当微任务队列清空完毕后，从宏任务队列中取出一个宏任务，去执行，在执行过程中，你的宏任务中可能还有同步代码或宏任务或微任务，重复上面的步骤，执行完一个宏任务，肯定要清空微任务队列。</li><li>上面的这个循环就构成了浏览器的事件环。</li></ol><h3 id="_3-事件环练习题" tabindex="-1"><a class="header-anchor" href="#_3-事件环练习题" aria-hidden="true">#</a> 3，事件环练习题</h3><p>第一个题目：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>

  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>
    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 5</span>
    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 6</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// 1 6 2 3 4 5</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+M+`" alt="1695865495907.07f273b8"></p><p>第二个题目：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 答案：script start script end  promise1  promise2  setTimeout</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析：</p><p><img src="`+N+`" alt="1695865805439.cb3f8b9c"></p><p>第三个题目：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;setTimeout1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;then4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;then2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;promise1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;then1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;setTimeout2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;then3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 答案：promise1  2  then1 then3  setTimeout1 then2 then4  setTimeout2</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析：</p><p><img src="`+C+`" alt="1695868311178.14debdbb"></p><p>第四个题目：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;22222&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;111111&quot;</span><span class="token punctuation">)</span>

        <span class="token keyword">await</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;33333&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;444444&quot;</span><span class="token punctuation">)</span>
    <span class="token comment">// 答案： 111 222 444 333</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+V+`" alt="1695868673517.7d47b8b5"></p><p>第五个题目：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 start&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 end&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async2&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script start&#39;</span><span class="token punctuation">)</span>

    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise1&#39;</span><span class="token punctuation">)</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise2&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script end&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// &#39;script start&#39;  &#39;async1 start&#39;  &#39;async2&#39;  &#39;promise1&#39;  &#39;script end&#39;  &#39;async1 end&#39;  &#39;promise2&#39;   setTimeout</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第七个题目：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;哈哈&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> end <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;111&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> start1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;呵呵&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> end1 <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>end1 <span class="token operator">-</span> start1<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// while(true){}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六-总结异步的解决方案" tabindex="-1"><a class="header-anchor" href="#六-总结异步的解决方案" aria-hidden="true">#</a> 六，总结异步的解决方案</h2><h3 id="_1-回调函数解决异步" tabindex="-1"><a class="header-anchor" href="#_1-回调函数解决异步" aria-hidden="true">#</a> 1，回调函数解决异步</h3><p>要搞清异步解决方案，你需要掌握的知识点：</p><ul><li>promise</li><li>迭代器</li><li>可迭代对象</li><li>生成器</li></ul><p>最早的异步方案，就是回调函数，嵌套过多的话，导致回调地狱。有如个的需求：</p><ol><li>发送一次网络请求, 等到这次网络请求的结果 传学生的编号 得到 学生的姓名</li><li>发送第二次网络请求, 等待这次网络请求的结果 传学生的姓名 得到 学生的成绩</li><li>发送第三次网络请求, 等待这次网络请求的结果 传学生的成绩 得到 成绩的等级</li></ol><p>写代码实现上面的需求：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 一层层嵌套  不优雅</span>
  <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 第一次ajax请求</span>
    <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">&#39;001&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res1是学生的姓名&#39;</span><span class="token punctuation">)</span>
      <span class="token comment">// 第二次ajax请求</span>
      <span class="token function">ajax</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res2是学生的成绩&#39;</span><span class="token punctuation">)</span>
        <span class="token comment">// 第三次ajax请求</span>
        <span class="token function">ajax</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res3是学生的等级&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器测试之，如下：</p><p><img src="`+z+'" alt="image-20240110080718963"></p><h3 id="_2-使用then链进行优化" tabindex="-1"><a class="header-anchor" href="#_2-使用then链进行优化" aria-hidden="true">#</a> 2，使用then链进行优化</h3><p>上面的代码不优雅，进行优化，如下：</p><p><img src="'+A+'" alt="image-20240110081631296"></p><h3 id="_3-使用生成器函数" tabindex="-1"><a class="header-anchor" href="#_3-使用生成器函数" aria-hidden="true">#</a> 3，使用生成器函数</h3><p><img src="'+G+'" alt="image-20240110083227831"></p><h3 id="_4-终级方案-async-await" tabindex="-1"><a class="header-anchor" href="#_4-终级方案-async-await" aria-hidden="true">#</a> 4，终级方案（async + await）</h3><p><img src="'+H+'" alt="image-20240110083940920"></p>',159),Q=[L];function R(W,X){return s(),a("div",null,Q)}const Z=n(K,[["render",R],["__file","06.html.vue"]]);export{Z as default};

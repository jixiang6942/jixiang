import{_ as a,o as i,c as s,a as e}from"./app-382cdfb3.js";const p="/jixiang/assets/image-20240831234033495-20c27876.png",t="/jixiang/assets/image-20240831234111333-883129b1.png",g="/jixiang/assets/image-20240831234139180-fc06bb91.png",n="/jixiang/assets/image-20240831234215192-01475a11.png",m="/jixiang/assets/image-20240831234247826-84a8d101.png",r="/jixiang/assets/image-20240901125325461-acb0cb0b.png",c="/jixiang/assets/image-20240901001643201-dbc22252.png",o="/jixiang/assets/image-20240901002931518-77b5abd5.png",d="/jixiang/assets/image-20240901003237178-0ce10b5b.png",_="/jixiang/assets/image-20240901004232257-99d98407.png",h="/jixiang/assets/image-20240901004641940-88c1545d.png",l="/jixiang/assets/image-20240901072631220-eeef3476.png",x="/jixiang/assets/image-20240901075539335-ff4c20cf.png",b="/jixiang/assets/image-20240901080442218-30559e26.png",j="/jixiang/assets/image-20240901080519788-8c2d5bf3.png",f="/jixiang/assets/image-20240901082102304-4cf484fb.png",u="/jixiang/assets/image-20240901082424790-829eec53.png",k="/jixiang/assets/image-20240901080557215-1a9269b4.png",y="/jixiang/assets/image-20240901082642413-19d83ebb.png",q="/jixiang/assets/image-20240901082928553-61f71e8f.png",B="/jixiang/assets/image-20240901091030909-f58ce278.png",S="/jixiang/assets/image-20240901092534731-894d0892.png",w="/jixiang/assets/image-20240901093214105-53c942a6.png",A="/jixiang/assets/image-20240901093519512-dc629fef.png",L="/jixiang/assets/image-20240901123631420-630839d8.png",E="/jixiang/assets/image-20240901124348971-f217ec0b.png",C="/jixiang/assets/image-20240901125029531-3a55d224.png",R="/jixiang/assets/image-20240901130639983-0ca305d7.png",v="/jixiang/assets/image-20240901130824980-7951ff08.png",D="/jixiang/assets/image-20240901131411766-f4d5c2c6.png",Q="/jixiang/assets/image-20240901131750541-a888205c.png",M="/jixiang/assets/image-20240901131838878-643c6890.png",N="/jixiang/assets/image-20240901164843734-c40eac82.png",U="/jixiang/assets/image-20240901132603318-10faaf45.png",H="/jixiang/assets/image-20240901132938198-69e80cda.png",O="/jixiang/assets/image-20240901133536816-29ccf3e6.png",F="/jixiang/assets/image-20240901133932529-8691a38b.png",T="/jixiang/assets/image-20240901164926771-024ac684.png",G="/jixiang/assets/image-20240901170005260-0190bc86.png",W="/jixiang/assets/image-20240901170030932-a4c14de7.png",P="/jixiang/assets/image-20240901185745418-c5ff7ee0.png",K="/jixiang/assets/image-20240901170054549-eb271742.png",Y="/jixiang/assets/image-20240901190209054-e84100db.png",z="/jixiang/assets/image-20240901190630497-de4fbad5.png",I="/jixiang/assets/image-20240901191233989-35093fbd.png",J="/jixiang/assets/image-20240901191627195-97e7404f.png",V="/jixiang/assets/image-20240901191817436-bcf135f2.png",X="/jixiang/assets/image-20240901211359652-c0456f73.png",Z="/jixiang/assets/image-20240901211740885-87487d31.png",$="/jixiang/assets/image-20240901213541237-a7995656.png",aa="/jixiang/assets/image-20240901213623674-5abdb186.png",ia="/jixiang/assets/image-20240901221834629-a9b8017f.png",sa="/jixiang/assets/image-20240901222245684-a2e373da.png",ea="/jixiang/assets/image-20240901222410618-67cc6cf2.png",pa="/jixiang/assets/image-20240901225123929-3131207c.png",ta="/jixiang/assets/image-20240901225145768-dc15db75.png",ga="/jixiang/assets/image-20240901225212503-b86128e9.png",na="/jixiang/assets/image-20240901230426112-fec5bdea.png",ma="/jixiang/assets/image-20240901230458256-324d67b6.png",ra="/jixiang/assets/image-20240901231457571-8262cce5.png",ca="/jixiang/assets/image-20240901234825303-b204045f.png",oa="/jixiang/assets/image-20240901233232386-3857fcc6.png",da="/jixiang/assets/image-20240901233723115-e954699c.png",_a="/jixiang/assets/image-20240901234156822-d444d0e8.png",ha="/jixiang/assets/image-20240901235131397-32bc377a.png",la="/jixiang/assets/image-20240902000111267-69ffea7f.png",xa="/jixiang/assets/image-20240903174227599-06020655.png",ba="/jixiang/assets/image-20240903182615146-eb275c39.png",ja="/jixiang/assets/image-20240903174253331-fcd729eb.png",fa="/jixiang/assets/image-20240903183111074-f8c43bcc.png",ua="/jixiang/assets/image-20240903183808952-07cba860.png",ka="/jixiang/assets/image-20240903184033275-4c303c7f.png",ya="/jixiang/assets/image-20240903174319429-b4c0e64c.png",qa="/jixiang/assets/image-20240903184459927-a7cdd7da.png",Ba="/jixiang/assets/image-20240903185128379-a6d15489.png",Sa="/jixiang/assets/image-20240903185419967-843f3eb6.png",wa="/jixiang/assets/image-20240903190004639-36d83884.png",Aa="/jixiang/assets/image-20240903174341679-bd33c864.png",La="/jixiang/assets/image-20240903191304370-adaf066f.png",Ea="/jixiang/assets/image-20240903192350816-7547ca1d.png",Ca="/jixiang/assets/image-20240903192908346-97b56057.png",Ra="/jixiang/assets/image-20240903194733973-fc6595db.png",va="/jixiang/assets/image-20240903195354525-c55fc21a.png",Da="/jixiang/assets/image-20240902001450728-cb14be45.png",Qa="/jixiang/assets/image-20240902001510192-378539da.png",Ma="/jixiang/assets/image-20240902134952198-3579288b.png",Na="/jixiang/assets/image-20240902135016188-78f5983f.png",Ua="/jixiang/assets/image-20240902135316121-6f4af779.png",Ha="/jixiang/assets/image-20240902142034858-c58c7da3.png",Oa="/jixiang/assets/image-20240902200659497-5c8ad7c0.png",Fa="/jixiang/assets/image-20240902201136028-7e05c613.png",Ta="/jixiang/assets/image-20240902201723455-f9f1158e.png",Ga="/jixiang/assets/image-20240902201810408-ed93ed98.png",Wa="/jixiang/assets/image-20240902202018178-212469a0.png",Pa="/jixiang/assets/image-20240902202657509-0bf545ea.png",Ka="/jixiang/assets/image-20240902202833876-2392d9a6.png",Ya="/jixiang/assets/image-20240902223832624-de851ca9.png",za="/jixiang/assets/image-20240902203650514-b3c2d476.png",Ia="/jixiang/assets/image-20240902204333935-326ffa98.png",Ja="/jixiang/assets/image-20240902204515923-54519ee3.png",Va="/jixiang/assets/image-20240902220043432-623e49ae.png",Xa="/jixiang/assets/image-20240902221007899-8a57e75f.png",Za="/jixiang/assets/image-20240902223534464-655a75c8.png",$a="/jixiang/assets/image-20240902224102564-2f80cece.png",a2="/jixiang/assets/image-20240902224143733-1a8f177e.png",i2="/jixiang/assets/image-20240902225539529-f2d96a01.png",s2="/jixiang/assets/image-20240902230220763-d24c6c59.png",e2="/jixiang/assets/image-20240902235338126-63675d91.png",p2="/jixiang/assets/image-20240902235723095-274b4c72.png",t2="/jixiang/assets/image-20240903001110637-16183c96.png",g2="/jixiang/assets/image-20240903001525016-9d0de433.png",n2="/jixiang/assets/image-20240902235825041-637287e1.png",m2="/jixiang/assets/image-20240903002521835-f01f499d.png",r2="/jixiang/assets/image-20240903002921524-2776da42.png",c2="/jixiang/assets/image-20240902235850108-6b5f735d.png",o2="/jixiang/assets/image-20240903093044681-82ce76e7.png",d2="/jixiang/assets/image-20240903094452292-ec0a495c.png",_2="/jixiang/assets/image-20240903094657807-8a6639a3.png",h2="/jixiang/assets/image-20240903095026618-04a1c02d.png",l2="/jixiang/assets/image-20240903095548156-0a57c556.png",x2="/jixiang/assets/image-20240903095651959-51430022.png",b2="/jixiang/assets/image-20240903140648714-87c746ab.png",j2="/jixiang/assets/image-20240903150835073-2696ba40.png",f2="/jixiang/assets/image-20240903151234259-06ef63f1.png",u2="/jixiang/assets/image-20240903095732290-5b5049df.png",k2="/jixiang/assets/image-20240903172326262-c385bae2.png",y2="/jixiang/assets/image-20240903172717778-eb0d4c2d.png",q2="/jixiang/assets/image-20240903173820568-1a552972.png",B2="/jixiang/assets/image-20240903095800046-bd047dcd.png",S2="/jixiang/assets/image-20240903100023161-4342ff3b.png",w2="/jixiang/assets/image-20240903222620733-5ae7fe42.png",A2="/jixiang/assets/image-20240903222659091-d463a962.png",L2="/jixiang/assets/image-20240903230132738-e39781ac.png",E2="/jixiang/assets/image-20240903230245084-307d35b7.png",C2="/jixiang/assets/image-20240903222721190-d403e3f5.png",R2="/jixiang/assets/image-20240903231447044-869f0169.png",v2="/jixiang/assets/image-20240903231526082-f067a89e.png",D2="/jixiang/assets/image-20240903231550947-d080c819.png",Q2="/jixiang/assets/image-20240903235908088-892e54f4.png",M2="/jixiang/assets/image-20240903231613813-5d6ae869.png",N2="/jixiang/assets/image-20240904102614933-7ab2d7f5.png",U2="/jixiang/assets/image-20240904103756692-241bf30d.png",H2="/jixiang/assets/image-20240904104032871-8ac6a384.png",O2="/jixiang/assets/image-20240904111912578-b4f85098.png",F2="/jixiang/assets/image-20240904112921238-e3255433.png",T2="/jixiang/assets/image-20240904124421366-a06fd846.png",G2="/jixiang/assets/image-20240904131211324-5980027b.png",W2="/jixiang/assets/image-20240904142402406-1070bfaa.png",P2="/jixiang/assets/image-20240904154746315-ebe7de02.png",K2="/jixiang/assets/image-20240903231636618-6ab5b0ce.png",Y2="/jixiang/assets/image-20240904170111178-e54a2fb8.png",z2="/jixiang/assets/image-20240904164138747-7d36d139.png",I2="/jixiang/assets/image-20240904164406804-f1bec4cb.png",J2="/jixiang/assets/image-20240904165848170-11ef48b3.png",V2="/jixiang/assets/image-20240904172952536-c09935c3.png",X2="/jixiang/assets/image-20240904175028394-5d7544a7.png",Z2="/jixiang/assets/image-20240904175430565-43025385.png",$2="/jixiang/assets/image-20240904175620656-e4e95cf6.png",a0="/jixiang/assets/image-20240904225301708-6610f8ce.png",i0="/jixiang/assets/image-20240904231147217-dd3cad1d.png",s0="/jixiang/assets/image-20240904232415266-776ba956.png",e0="/jixiang/assets/image-20240905083053626-d1406fa9.png",p0="/jixiang/assets/image-20240905002042740-c8ed2f9b.png",t0="/jixiang/assets/image-20240905082756391-2eda137d.png",g0="/jixiang/assets/image-20240905082912549-cf938c10.png",n0="/jixiang/assets/image-20240905084210188-dd0271a8.png",m0="/jixiang/assets/image-20240905092102417-b5550df6.png",r0="/jixiang/assets/image-20240905092237026-b0ef987d.png",c0="/jixiang/assets/image-20240905092318494-033973d9.png",o0="/jixiang/assets/image-20240905105919336-7dc509be.png",d0="/jixiang/assets/image-20240905110658576-420fcffb.png",_0="/jixiang/assets/image-20240905092348883-1b1f8e04.png",h0="/jixiang/assets/image-20240905115855774-ef2bd6fd.png",l0="/jixiang/assets/image-20240905120421649-29a05f2a.png",x0="/jixiang/assets/image-20240905171955535-398c75de.png",b0="/jixiang/assets/image-20240905172824221-145f2161.png",j0="/jixiang/assets/image-20240905174231668-3aec926f.png",f0="/jixiang/assets/image-20240905174713573-21e73569.png",u0="/jixiang/assets/image-20240905174926486-145d59e1.png",k0="/jixiang/assets/image-20240905172026830-86084ecf.png",y0="/jixiang/assets/image-20240905230043690-a91199ce.png",q0="/jixiang/assets/image-20240905231114075-422680a8.png",B0="/jixiang/assets/image-20240905172052809-e25da817.png",S0="/jixiang/assets/image-20240906090633872-c6c197a4.png",w0="/jixiang/assets/image-20240906093309720-1d217ba7.png",A0="/jixiang/assets/image-20240906093618249-37214498.png",L0="/jixiang/assets/image-20240906093643546-66459545.png",E0="/jixiang/assets/image-20240906093709310-7c4a0b2b.png",C0="/jixiang/assets/image-20240906093730163-0b3df01b.png",R0="/jixiang/assets/image-20240906120948435-dbf2778d.png",v0="/jixiang/assets/image-20240906121010438-573e104b.png",D0="/jixiang/assets/image-20240906121808582-ba08f11c.png",Q0="/jixiang/assets/image-20240906122844355-159d4421.png",M0="/jixiang/assets/image-20240906134316753-53edb115.png",N0="/jixiang/assets/image-20240906134505739-259ce455.png",U0="/jixiang/assets/image-20240906135251399-6a9ad30f.png",H0="/jixiang/assets/image-20240906140211553-9382e4c5.png",O0="/jixiang/assets/image-20240906140431384-f2a8ff45.png",F0="/jixiang/assets/image-20240906140918465-029a0314.png",T0="/jixiang/assets/image-20240906163524472-04afec27.png",G0="/jixiang/assets/image-20240906164819989-ad5667b5.png",W0="/jixiang/assets/image-20240906170242214-51691f40.png",P0="/jixiang/assets/image-20240906170357677-a31a5218.png",K0="/jixiang/assets/image-20240906175806639-b13e6d0c.png",Y0="/jixiang/assets/image-20240906173144864-edeaf104.png",z0="/jixiang/assets/image-20240906175524299-428bd804.png",I0="/jixiang/assets/image-20240906175912874-abc77999.png",J0="/jixiang/assets/image-20240906180921322-91791109.png",V0="/jixiang/assets/image-20240906181331844-1f18b2c8.png",X0="/jixiang/assets/image-20240906183354109-82b3c34f.png",Z0="/jixiang/assets/image-20240906183552868-5aefac41.png",$0="/jixiang/assets/image-20240906184557968-eb9a0bb4.png",ai="/jixiang/assets/image-20240906184759257-b35b1340.png",ii="/jixiang/assets/image-20240906190502428-ac5b0e5a.png",si="/jixiang/assets/image-20240906221932784-6377ea89.png",ei="/jixiang/assets/image-20240906224409675-5561ed6f.png",pi="/jixiang/assets/image-20240906225758438-e3ac2673.png",ti="/jixiang/assets/image-20240906230646786-033566c2.png",gi="/jixiang/assets/image-20240906231104056-4bc382b4.png",ni="/jixiang/assets/image-20240906231336066-57552f68.png",mi="/jixiang/assets/image-20240906233008323-a6b137ca.png",ri="/jixiang/assets/image-20240906233145870-57f3993e.png",ci="/jixiang/assets/image-20240906234618886-f1527ce3.png",oi="/jixiang/assets/image-20240909190457839-69cfc847.png",di="/jixiang/assets/image-20240909191451040-57e675e9.png",_i="/jixiang/assets/image-20240909192032004-e84e2321.png",hi="/jixiang/assets/image-20240909203109292-24db6d78.png",li="/jixiang/assets/image-20240909203556050-531614b1.png",xi="/jixiang/assets/image-20240909203849600-c6ac0e91.png",bi="/jixiang/assets/image-20240906233230190-b1536ef9.png",ji="/jixiang/assets/image-20240909213426910-01c34a77.png",fi="/jixiang/assets/image-20240909213538276-dc7f2df8.png",ui="/jixiang/assets/image-20240909215629747-55b2c1e5.png",ki="/jixiang/assets/image-20240909230213339-369543e3.png",yi="/jixiang/assets/image-20240909230253065-3af67726.png",qi="/jixiang/assets/image-20240910233935178-11f993dd.png",Bi="/jixiang/assets/image-20240911122749884-7bccb0d8.png",Si="/jixiang/assets/image-20240911130947653-8a352dad.png",wi="/jixiang/assets/image-20240911131646100-1d3716f0.png",Ai="/jixiang/assets/image-20240911211040750-e1b81999.png",Li="/jixiang/assets/image-20240911220536558-42f26802.png",Ei="/jixiang/assets/image-20240911221246497-b5adb0ab.png",Ci="/jixiang/assets/image-20240911222019787-75aed7bb.png",Ri="/jixiang/assets/image-20240911222143013-e318014f.png",vi="/jixiang/assets/image-20240909233506222-05f26c82.png",Di="/jixiang/assets/image-20240909233546949-fe0f65f2.png",Qi="/jixiang/assets/image-20240909233652582-ba1688fd.png",Mi="/jixiang/assets/image-20240910100637143-8555c10e.png",Ni="/jixiang/assets/image-20240910100658436-f3849a72.png",Ui="/jixiang/assets/image-20240910102220399-7b3e489a.png",Hi="/jixiang/assets/image-20240910103047298-809e6993.png",Oi="/jixiang/assets/image-20240910103219430-7070d4b3.png",Fi="/jixiang/assets/image-20240910103347014-4c5eb4fb.png",Ti="/jixiang/assets/image-20240910103558763-6fe0c1e7.png",Gi="/jixiang/assets/image-20240910103845337-ccd696d7.png",Wi="/jixiang/assets/image-20240910103948501-05550db5.png",Pi="/jixiang/assets/image-20240910104117381-ac8e7657.png",Ki="/jixiang/assets/image-20240910104410681-047e4529.png",Yi="/jixiang/assets/image-20240910104450904-2caf4742.png",zi="/jixiang/assets/image-20240910104644077-5836a399.png",Ii="/jixiang/assets/image-20240910114921248-80ee018a.png",Ji="/jixiang/assets/image-20240910104855236-739fef9b.png",Vi="/jixiang/assets/image-20240910105408465-2bf0977e.png",Xi="/jixiang/assets/image-20240910105712685-27179f18.png",Zi="/jixiang/assets/image-20240910112525524-bc6dcde4.png",$i="/jixiang/assets/image-20240910112624361-bedecc70.png",as="/jixiang/assets/image-20240910113225388-6888185b.png",is="/jixiang/assets/image-20240910113531666-8acb60fb.png",ss="/jixiang/assets/image-20240910113844085-25d70956.png",es="/jixiang/assets/image-20240910114220726-913a3804.png",ps="/jixiang/assets/image-20240910115124078-87aac656.png",ts="/jixiang/assets/image-20240910115531909-36c744b7.png",gs="/jixiang/assets/image-20240910115553685-025eee41.png",ns="/jixiang/assets/image-20240910120831380-6462549c.png",ms="/jixiang/assets/image-20240910122135319-38d6cc45.png",rs="/jixiang/assets/image-20240910122827140-53b57c37.png",cs="/jixiang/assets/image-20240910132618903-939f6a96.png",os="/jixiang/assets/image-20240910205703498-13deae90.png",ds="/jixiang/assets/image-20240910205743643-b1a45045.png",_s="/jixiang/assets/image-20240910212101949-810c6a4a.png",hs="/jixiang/assets/image-20240910212130685-6a0d53ee.png",ls="/jixiang/assets/image-20240910214140820-177f7e5d.png",xs="/jixiang/assets/image-20240910214205774-ea70f2e2.png",bs="/jixiang/assets/image-20240910214534118-9b03dbfa.png",js="/jixiang/assets/image-20240910215051696-0e4a7e2e.png",fs="/jixiang/assets/image-20240910215305799-81d0bfaf.png",us="/jixiang/assets/image-20240910215544581-4292876e.png",ks="/jixiang/assets/image-20240910215616840-942337ba.png",ys="/jixiang/assets/image-20240910220027658-99a1d079.png",qs="/jixiang/assets/image-20240910220232599-da13a4bb.png",Bs="/jixiang/assets/image-20240910220319479-5fbec9bd.png",Ss="/jixiang/assets/image-20240910224826823-16e50c77.png",ws="/jixiang/assets/image-20240911231526835-0688f143.png",As="/jixiang/assets/image-20240911232041146-25616d0f.png",Ls="/jixiang/assets/image-20240911232211158-1c710e3b.png",Es="/jixiang/assets/image-20240911232411705-447367f0.png",Cs="/jixiang/assets/image-20240911233321125-d80ee155.png",Rs="/jixiang/assets/image-20240911233847387-01e707f5.png",vs="/jixiang/assets/image-20240911231555491-628b31db.png",Ds="/jixiang/assets/image-20240911231616061-fef5786f.png",Qs="/jixiang/assets/image-20240912080755789-22693d6b.png",Ms="/jixiang/assets/image-20240912080915462-7d34d5c9.png",Ns="/jixiang/assets/image-20240912085114095-b871a2eb.png",Us="/jixiang/assets/image-20240912092635471-c58efe8f.png",Hs="/jixiang/assets/image-20240912101338444-b36b6695.png",Os="/jixiang/assets/image-20240912101706825-1c21be17.png",Fs="/jixiang/assets/image-20240912092704064-3fa083bb.png",Ts="/jixiang/assets/image-20240912102214205-432d5873.png",Gs="/jixiang/assets/image-20240912103047198-c949c8a3.png",Ws="/jixiang/assets/image-20240912103626804-5d9795ba.png",Ps="/jixiang/assets/image-20240912111542972-61b250ca.png",Ks="/jixiang/assets/image-20240912111818296-f8303570.png",Ys="/jixiang/assets/image-20240912092753379-dc1c0fe8.png",zs="/jixiang/assets/image-20240912133317240-cded7569.png",Is="/jixiang/assets/image-20240912135025190-3ff686fa.png",Js="/jixiang/assets/image-20240912112651762-1f45d009.png",Vs="/jixiang/assets/image-20240912142114368-3c5c97d4.png",Xs="/jixiang/assets/image-20240912142753293-ac2ceeb5.png",Zs="/jixiang/assets/image-20240912145000468-47f379ca.png",$s="/jixiang/assets/image-20240912151939618-1047dd2e.png",ae="/jixiang/assets/image-20240912152117757-fa80c740.png",ie="/jixiang/assets/image-20240912174229376-38293e73.png",se="/jixiang/assets/image-20240912174431317-f8742cf4.png",ee="/jixiang/assets/image-20240912175019148-c86a9a6f.png",pe="/jixiang/assets/image-20240912175918824-c8454df9.png",te="/jixiang/assets/image-20240912180103151-796393d2.png",ge="/jixiang/assets/image-20240912180620506-c92b2877.png",ne="/jixiang/assets/image-20240912181007695-15f9ac1c.png",me="/jixiang/assets/image-20240912181458594-869e71fa.png",re="/jixiang/assets/image-20240912180152436-2439d87e.png",ce="/jixiang/assets/image-20240912182141363-fbd98097.png",oe="/jixiang/assets/image-20240912182524784-152be8d2.png",de="/jixiang/assets/image-20240912182752027-fa6e808e.png",_e="/jixiang/assets/image-20240912180221484-392b5f34.png",he="/jixiang/assets/image-20240912184007303-77e991fa.png",le="/jixiang/assets/image-20240912184342368-f7fe3546.png",xe="/jixiang/assets/image-20240912184803647-c1a4466a.png",be="/jixiang/assets/image-20240912185232250-5823e7ed.png",je="/jixiang/assets/image-20240912185326961-760a6287.png",fe="/jixiang/assets/image-20240912190006091-771b2396.png",ue="/jixiang/assets/image-20240912190356904-fe2efb52.png",ke="/jixiang/assets/image-20240912190733977-bf7d9810.png",ye="/jixiang/assets/image-20240912190912100-4f48857a.png",qe="/jixiang/assets/image-20240912191415586-e9534d5d.png",Be="/jixiang/assets/image-20240912191522140-d94d6346.png",Se="/jixiang/assets/image-20240912191710415-6f4b0005.png",we="/jixiang/assets/image-20240912201640032-48dd9c3d.png",Ae="/jixiang/assets/image-20240912202128571-e8de5a3b.png",Le="/jixiang/assets/image-20240912202352638-a9d6cd7f.png",Ee="/jixiang/assets/image-20240912202727464-b43ea451.png",Ce="/jixiang/assets/image-20240912214959725-6abe8070.png",Re="/jixiang/assets/image-20240912215302464-54a8027d.png",ve="/jixiang/assets/image-20240912215529157-c09e95e1.png",De="/jixiang/assets/image-20240912215821766-64f6afac.png",Qe="/jixiang/assets/image-20240912220143522-9ea170cc.png",Me="/jixiang/assets/image-20240912220429355-780a1ef5.png",Ne="/jixiang/assets/image-20240912220714145-0108de37.png",Ue="/jixiang/assets/image-20240912202803686-0961dac3.png",He="/jixiang/assets/image-20240912222129406-caa8746c.png",Oe="/jixiang/assets/image-20240912222433638-3398771b.png",Fe="/jixiang/assets/image-20240912222737385-27c06357.png",Te="/jixiang/assets/image-20240912222937118-bbf41a99.png",Ge="/jixiang/assets/image-20240912223137339-1b4a3f2a.png",We="/jixiang/assets/image-20240912223241286-0e37861b.png",Pe="/jixiang/assets/image-20240912223932544-ce869221.png",Ke="/jixiang/assets/image-20240912224209164-b5b8f3f6.png",Ye="/jixiang/assets/image-20240912224424309-155f9f76.png",ze="/jixiang/assets/image-20240912224449235-3a9a1fdf.png",Ie="/jixiang/assets/image-20240912224518345-9112e96c.png",Je="/jixiang/assets/image-20240912230825686-bfb62906.png",Ve="/jixiang/assets/image-20240912231148393-b2768e1a.png",Xe="/jixiang/assets/image-20240912231727004-d82f9a3a.png",Ze="/jixiang/assets/image-20240912233819085-ec916800.png",$e="/jixiang/assets/image-20240912234522930-4e7fcc89.png",a1="/jixiang/assets/image-20240912235059591-54fb8f17.png",i1="/jixiang/assets/image-20240912235314898-d1f68f41.png",s1="/jixiang/assets/image-20240913095707347-fba4eb27.png",e1="/jixiang/assets/image-20240913101651802-f679e756.png",p1="/jixiang/assets/image-20240913101915691-65ce4e5e.png",t1="/jixiang/assets/image-20240913102350303-91417d2a.png",g1="/jixiang/assets/image-20240913103202299-2dcf0333.png",n1="/jixiang/assets/image-20240913103434454-ebfa3417.png",m1="/jixiang/assets/image-20240913104203146-f1f545af.png",r1="/jixiang/assets/image-20240913104224231-57c72499.png",c1="/jixiang/assets/image-20240913110403210-353264d4.png",o1="/jixiang/assets/image-20240913110659351-1bef2724.png",d1="/jixiang/assets/image-20240913111006036-f39b8bc7.png",_1="/jixiang/assets/image-20240913111101438-2a954c5c.png",h1="/jixiang/assets/image-20240913112356132-edb6ecdf.png",l1="/jixiang/assets/image-20240913112712348-12504966.png",x1="/jixiang/assets/image-20240913111134073-5cfac6b7.png",b1="/jixiang/assets/image-20240913115359768-7a8a72f8.png",j1="/jixiang/assets/image-20240913120057973-082afead.png",f1="/jixiang/assets/image-20240913111211600-7368b669.png",u1="/jixiang/assets/image-20240913120959381-7ba3749b.png",k1="/jixiang/assets/image-20240913111238156-eac0cd8b.png",y1="/jixiang/assets/image-20240913121709538-272fbb49.png",q1="/jixiang/assets/多对多关系的表结构-e3f4baa7.png",B1="/jixiang/assets/image-20240913121828713-4101e9ee.png",S1="/jixiang/assets/image-20240913142201208-0480ec3e.png",w1="/jixiang/assets/image-20240913142428149-670267d6.png",A1="/jixiang/assets/image-20240913143020520-e04e6516.png",L1="/jixiang/assets/image-20240913143329326-abcf926b.png",E1="/jixiang/assets/image-20240913121856684-7abc8723.png",C1="/jixiang/assets/image-20240913151037271-769c6519.png",R1="/jixiang/assets/image-20240913151612313-ec0e7e4a.png",v1="/jixiang/assets/image-20240913121937019-9a76b878.png",D1="/jixiang/assets/image-20240913221415390-88e615ac.png",Q1="/jixiang/assets/image-20240913221826464-413159a4.png",M1="/jixiang/assets/image-20240913222255735-568c826a.png",N1="/jixiang/assets/image-20240913122004231-d13b2de6.png",U1="/jixiang/assets/image-20240913222641483-7c5bc55e.png",H1="/jixiang/assets/image-20240913223042183-81fdafef.png",O1="/jixiang/assets/image-20240913223203789-d2e1e025.png",F1="/jixiang/assets/image-20240913122040591-b07b07c3.png",T1="/jixiang/assets/image-20240913225259066-f9681384.png",G1="/jixiang/assets/image-20240913225828138-9154c594.png",W1="/jixiang/assets/image-20240913230301713-1c0ac4f7.png",P1="/jixiang/assets/image-20240913230420067-5e008bdb.png",K1="/jixiang/assets/image-20240914145744598-f1c57e5d.png",Y1="/jixiang/assets/image-20240913230444530-d7e42546.png",z1="/jixiang/assets/image-20240914172900905-3023e064.png",I1="/jixiang/assets/image-20240914173534116-81faeb15.png",J1="/jixiang/assets/image-20240913230512266-9b1199be.png",V1="/jixiang/assets/image-20240913230555613-a3a96a4c.png",X1="/jixiang/assets/image-20240914232723895-178dc038.png",Z1="/jixiang/assets/image-20240913230635505-08ebc0d9.png",$1="/jixiang/assets/image-20240915104252072-03c2ba28.png",ap="/jixiang/assets/image-20240913230656007-e93bd4cc.png",ip="/jixiang/assets/image-20240915183721586-17058a13.png",sp="/jixiang/assets/image-20240913230719655-bbbd9b5a.png",ep="/jixiang/assets/image-20240915201724622-56a86def.png",pp="/jixiang/assets/image-20240915205144108-424a613f.png",tp="/jixiang/assets/image-20240915205207442-3b3f9a48.png",gp="/jixiang/assets/image-20240915212128056-a6aee782.png",np="/jixiang/assets/image-20240915212326244-132c1129.png",mp="/jixiang/assets/image-20240915213441072-6edb7214.png",rp="/jixiang/assets/image-20240915213805611-d15130d1.png",cp="/jixiang/assets/image-20240915214048775-9df3f5e5.png",op="/jixiang/assets/image-20240915214751608-543610e6.png",dp="/jixiang/assets/image-20240915220646321-429d7826.png",_p="/jixiang/assets/image-20240915222853671-116f671e.png",hp="/jixiang/assets/image-20240915224329769-f9aba66c.png",lp="/jixiang/assets/image-20240915225518551-2c22cc10.png",xp="/jixiang/assets/image-20240915205244046-aca25783.png",bp="/jixiang/assets/image-20240915205324368-5da1b4c7.png",jp="/jixiang/assets/image-20240916120503217-28632cd2.png",fp="/jixiang/assets/image-20240916120613011-5f01ccdd.png",up="/jixiang/assets/image-20240916121349925-569c9315.png",kp="/jixiang/assets/image-20240916122436173-7108c938.png",yp="/jixiang/assets/image-20240916123253198-548a1c04.png",qp="/jixiang/assets/image-20240916123445300-6d876016.png",Bp="/jixiang/assets/image-20240916131309532-ba3f02e2.png",Sp="/jixiang/assets/image-20240916131702819-e111d48f.png",wp="/jixiang/assets/image-20240916132845197-77468b48.png",Ap="/jixiang/assets/image-20240916141319159-09fd2b39.png",Lp="/jixiang/assets/image-20240916141433309-4c27e382.png",Ep="/jixiang/assets/image-20240916154431987-ff85d1a5.png",Cp="/jixiang/assets/image-20240916164848251-b9dc4b12.png",Rp="/jixiang/assets/image-20240916164800178-0ee564ff.png",vp="/jixiang/assets/image-20240916182625378-6ae81057.png",Dp="/jixiang/assets/image-20240916182946912-040b2973.png",Qp="/jixiang/assets/image-20240916184110429-a085dcc3.png",Mp="/jixiang/assets/image-20240916184238800-62e395c1.png",Np="/jixiang/assets/image-20240916185131746-09fd6edb.png",Up="/jixiang/assets/image-20240916185229061-29157280.png",Hp="/jixiang/assets/image-20240916220207654-0075bd93.png",Op="/jixiang/assets/image-20240916224336569-a9f6e858.png",Fp="/jixiang/assets/image-20240916224527997-27905cc3.png",Tp="/jixiang/assets/image-20240915205435068-9d6bbecf.png",Gp="/jixiang/assets/image-20240915205454969-f62dfc26.png",Wp="/jixiang/assets/image-20240915205534668-52352aee.png",Pp="/jixiang/assets/image-20240915205554909-3180dcd8.png",Kp="/jixiang/assets/image-20240916232836495-46835eb6.png",Yp="/jixiang/assets/image-20240916232929592-a83841fa.png",zp="/jixiang/assets/image-20240917072754731-feebf317.png",Ip="/jixiang/assets/image-20240915205615565-8eb64cfd.png",Jp="/jixiang/assets/image-20240917081743930-f2f15afd.png",Vp="/jixiang/assets/image-20240917081924860-6d094e8f.png",Xp="/jixiang/assets/image-20240915205634239-b3c144c3.png",Zp="/jixiang/assets/image-20240917094407698-0fd7d4d6.png",$p="/jixiang/assets/image-20240917094431579-d5a9e1db.png",at="/jixiang/assets/image-20240915205654190-268be9b5.png",it="/jixiang/assets/image-20240915205713527-2afb8ee4.png",st="/jixiang/assets/image-20240915205744372-64bf7673.png",et="/jixiang/assets/image-20240917120408634-f6edaa37.png",pt="/jixiang/assets/image-20240917123859713-bac5399a.png",tt="/jixiang/assets/image-20240917124159757-b812c0ef.png",gt="/jixiang/assets/image-20240917125808359-f7f72bc6.png",nt="/jixiang/assets/image-20240917130145216-6b9787dd.png",mt="/jixiang/assets/image-20240917130406677-53075e93.png",rt="/jixiang/assets/image-20240915225822650-3826b184.png",ct="/jixiang/assets/image-20240915225846702-b17cc433.png",ot="/jixiang/assets/image-20240915225950256-535fb600.png",dt="/jixiang/assets/image-20240917194228546-7828aa35.png",_t="/jixiang/assets/image-20240917194341436-e0d8d44f.png",ht="/jixiang/assets/image-20240917191757499-dc873ba6.png",lt="/jixiang/assets/image-20240917192116887-0a6263b9.png",xt="/jixiang/assets/image-20240917195217240-7cf45d76.png",bt="/jixiang/assets/image-20240917195311197-5cd59a15.png",jt="/jixiang/assets/image-20240917195402626-aed22867.png",ft="/jixiang/assets/image-20240915205358564-42450e67.png",ut="/jixiang/assets/image-20240917203725745-aa309859.png",kt="/jixiang/assets/image-20240917203925858-24d0b4f6.png",yt="/jixiang/assets/image-20240917210405449-e3f453c5.png",qt="/jixiang/assets/image-20240917210434652-52c8b2da.png",Bt="/jixiang/assets/image-20240917212037020-e480f5a7.png",St="/jixiang/assets/image-20240917212700440-ee8db8b0.png",wt="/jixiang/assets/image-20240917213637502-6af1dcb3.png",At="/jixiang/assets/image-20240917214147597-dda0355c.png",Lt="/jixiang/assets/image-20240917215059517-cb602a08.png",Et="/jixiang/assets/image-20240917215235426-d8f89c58.png",Ct="/jixiang/assets/image-20240917221134370-955f54f2.png",Rt="/jixiang/assets/image-20240917222126578-5d3d47d5.png",vt="/jixiang/assets/image-20240917222350114-7e5eeb2f.png",Dt="/jixiang/assets/image-20240917223003537-21ec0aec.png",Qt="/jixiang/assets/image-20240917223859858-23ed6b52.png",Mt="/jixiang/assets/image-20240917230645204-6cbc0081.png",Nt="/jixiang/assets/image-20240917231151904-1a5d51eb.png",Ut="/jixiang/assets/image-20240917232014419-92e9c7ae.png",Ht="/jixiang/assets/image-20240917232254810-a49a3eac.png",Ot="/jixiang/assets/image-20240918144500780-57dbb350.png",Ft="/jixiang/assets/image-20240918144948065-2b4ff494.png",Tt="/jixiang/assets/image-20240918145244812-dc5055fc.png",Gt="/jixiang/assets/image-20240918151637717-7bf12a37.png",Wt="/jixiang/assets/image-20240918151752852-89b1661c.png",Pt="/jixiang/assets/image-20240918153605075-b32fe16d.png",Kt="/jixiang/assets/image-20240918153745290-2f649c35.png",Yt="/jixiang/assets/image-20240918155717656-a0e42005.png",zt="/jixiang/assets/image-20240918162650244-22e32a11.png",It="/jixiang/assets/image-20240918162800511-ff5a26e0.png",Jt="/jixiang/assets/image-20240915230014502-3de3ac89.png",Vt="/jixiang/assets/image-20240918181015245-171978e9.png",Xt="/jixiang/assets/image-20240918182344620-95fc11f2.png",Zt="/jixiang/assets/image-20240918182548103-5d16f4cf.png",$t="/jixiang/assets/image-20240918183434816-31500d34.png",ag="/jixiang/assets/image-20240918185748449-04a8d5e1.png",ig="/jixiang/assets/image-20240918185952171-167b6cc1.png",sg="/jixiang/assets/image-20240915230039048-1203684d.png",eg="/jixiang/assets/image-20240918215321533-c1d80667.png",pg="/jixiang/assets/image-20240918215541414-dfcca108.png",tg="/jixiang/assets/image-20240918220729613-8bab7537.png",gg="/jixiang/assets/image-20240918222611273-bac029f8.png",ng="/jixiang/assets/image-20240918222746187-3779c180.png",mg="/jixiang/assets/image-20240918223041833-16a31508.png",rg="/jixiang/assets/image-20240918223128311-20fd3a26.png",cg="/jixiang/assets/image-20240918224255050-e8e26457.png",og="/jixiang/assets/image-20240918225100826-37f7834e.png",dg="/jixiang/assets/image-20240918225643625-d2588fa6.png",_g="/jixiang/assets/image-20240918231446809-81372cef.png",hg="/jixiang/assets/image-20240918231807011-90e5784e.png",lg="/jixiang/assets/image-20240918232207051-1709b283.png",xg="/jixiang/assets/image-20240919103400665-c370957c.png",bg="/jixiang/assets/image-20240919103635665-3b281661.png",jg="/jixiang/assets/image-20240919103958846-5991879b.png",fg="/jixiang/assets/image-20240919113539827-6e7ccd35.png",ug="/jixiang/assets/image-20240919113942850-16aad05d.png",kg="/jixiang/assets/image-20240919131402531-027ac4ee.png",yg="/jixiang/assets/image-20240919131953147-9733fa31.png",qg="/jixiang/assets/image-20240919132300068-618f19a1.png",Bg="/jixiang/assets/image-20240919132733488-ea6c288f.png",Sg="/jixiang/assets/image-20240919132840144-ff54b793.png",wg="/jixiang/assets/image-20240919133118700-df596004.png",Ag="/jixiang/assets/image-20240915230039048-1203684d.png",Lg="/jixiang/assets/image-20240919153652765-0ab8dc75.png",Eg="/jixiang/assets/image-20240919154055365-20d11ed5.png",Cg="/jixiang/assets/image-20240919154841035-cac78b40.png",Rg="/jixiang/assets/image-20240919155043854-f8a050ae.png",vg="/jixiang/assets/image-20240919155159338-c3bffa23.png",Dg="/jixiang/assets/image-20240919211650970-7c13c1be.png",Qg="/jixiang/assets/image-20240919212032655-ac55cd6a.png",Mg="/jixiang/assets/image-20240919212508532-63c20679.png",Ng="/jixiang/assets/image-20240915230105824-4cc918af.png",Ug="/jixiang/assets/image-20240919222335907-8bbcfd40.png",Hg="/jixiang/assets/image-20240919223936596-ea77db5d.png",Og="/jixiang/assets/image-20240919224037180-8e3a32ab.png",Fg="/jixiang/assets/image-20240919225141652-b90b1727.png",Tg="/jixiang/assets/image-20240919225446612-20354b48.png",Gg="/jixiang/assets/image-20240919232101983-10672895.png",Wg="/jixiang/assets/image-20240919232428459-52a86471.png",Pg="/jixiang/assets/image-20240919233651026-05da52af.png",Kg="/jixiang/assets/image-20240919234039116-b5fe0373.png",Yg="/jixiang/assets/image-20240915230128884-006fa897.png",zg="/jixiang/assets/image-20240920133935056-ced0e826.png",Ig="/jixiang/assets/image-20240920145732200-feedfd21.png",Jg="/jixiang/assets/image-20240920150329359-6641fef4.png",Vg="/jixiang/assets/image-20240920150445121-52926f56.png",Xg="/jixiang/assets/image-20240920151030445-c66be145.png",Zg="/jixiang/assets/image-20240920151300778-245e3ebe.png",$g="/jixiang/assets/image-20240920152150746-92b64215.png",a4="/jixiang/assets/image-20240920172852686-5b47ad2b.png",i4="/jixiang/assets/image-20240920173020729-8d33cbe4.png",s4="/jixiang/assets/image-20240920173216337-7626d9db.png",e4="/jixiang/assets/image-20240920174019017-bc7b13a8.png",p4="/jixiang/assets/image-20240920174429733-ed8811c7.png",t4="/jixiang/assets/image-20240915230151786-43cb5dd4.png",g4="/jixiang/assets/image-20240920175539566-2c0245fc.png",n4="/jixiang/assets/image-20240920181157132-0881fe36.png",m4="/jixiang/assets/image-20240920181423896-3b8ad56a.png",r4="/jixiang/assets/image-20240920181617791-7a297f48.png",c4="/jixiang/assets/image-20240920191815852-a8d2ba7c.png",o4="/jixiang/assets/image-20240920215048027-c5bd70cf.png",d4="/jixiang/assets/image-20240920225908471-1f109a64.png",_4="/jixiang/assets/image-20240920230040714-4c4dfbbe.png",h4="/jixiang/assets/image-20240921075710182-e390e4db.png",l4="/jixiang/assets/image-20240921134754653-c2bdb622.png",x4="/jixiang/assets/image-20240921141139321-2d501ecb.png",b4="/jixiang/assets/image-20240921141259157-472e3ea8.png",j4="/jixiang/assets/image-20240921142910275-08536f57.png",f4="/jixiang/assets/image-20240921144139313-15139f5d.png",u4="/jixiang/assets/image-20240921144319450-8bc04962.png",k4="/jixiang/assets/image-20240921144424501-fc121e38.png",y4="/jixiang/assets/image-20240922202424460-dea7af6b.png",q4="/jixiang/assets/image-20240922202554763-625ad1de.png",B4="/jixiang/assets/image-20240915230224160-16471381.png",S4="/jixiang/assets/image-20240915230239330-0d299a19.png",w4={},A4=e('<h1 id="node高级" tabindex="-1"><a class="header-anchor" href="#node高级" aria-hidden="true">#</a> Node高级</h1><h2 id="一-初识node" tabindex="-1"><a class="header-anchor" href="#一-初识node" aria-hidden="true">#</a> 一，初识Node</h2><h3 id="_1-node服务器开发" tabindex="-1"><a class="header-anchor" href="#_1-node服务器开发" aria-hidden="true">#</a> 1，Node服务器开发</h3><p><img src="'+p+'" alt="image-20240831234033495"></p><h3 id="_2-node-js是什么" tabindex="-1"><a class="header-anchor" href="#_2-node-js是什么" aria-hidden="true">#</a> 2，Node.js是什么</h3><p><img src="'+t+'" alt="image-20240831234111333"></p><h3 id="_3-浏览器和node的区别" tabindex="-1"><a class="header-anchor" href="#_3-浏览器和node的区别" aria-hidden="true">#</a> 3，浏览器和Node的区别</h3><p><img src="'+g+'" alt="image-20240831234139180"></p><h3 id="_4-node-js架构" tabindex="-1"><a class="header-anchor" href="#_4-node-js架构" aria-hidden="true">#</a> 4，Node.js架构</h3><p><img src="'+n+'" alt="image-20240831234215192"></p><h2 id="二-fs文件模块" tabindex="-1"><a class="header-anchor" href="#二-fs文件模块" aria-hidden="true">#</a> 二，FS文件模块</h2><p><img src="'+m+'" alt="image-20240831234247826"></p><p><img src="'+r+'" alt="image-20240901125325461"></p><h3 id="_1-文件的读取" tabindex="-1"><a class="header-anchor" href="#_1-文件的读取" aria-hidden="true">#</a> 1，文件的读取</h3><p><img src="'+c+'" alt="image-20240901001643201"></p><p>方式一： 同步读取</p><p><img src="'+o+'" alt="image-20240901002931518"></p><p>但是我们读取出文件的内容是16进制，我们想看到文件中原始内容，我们可以项readFileSync方法中传入一个配置项，或对进行进行toString()。代码如下：</p><p><img src="'+d+'" alt="image-20240901003237178"></p><p>方式二：异步读取(回调函数)</p><p><img src="'+_+'" alt="image-20240901004232257"></p><p>方式三：promise异步读取</p><p><img src="'+h+'" alt="image-20240901004641940"></p><h3 id="_2-文件描述符" tabindex="-1"><a class="header-anchor" href="#_2-文件描述符" aria-hidden="true">#</a> 2，文件描述符</h3><p><img src="'+l+'" alt="image-20240901072631220"></p><p><img src="'+x+'" alt="image-20240901075539335"></p><h3 id="_3-文件的写入" tabindex="-1"><a class="header-anchor" href="#_3-文件的写入" aria-hidden="true">#</a> 3，文件的写入</h3><p><img src="'+b+'" alt="image-20240901080442218"></p><h4 id="a-flag选项" tabindex="-1"><a class="header-anchor" href="#a-flag选项" aria-hidden="true">#</a> A）flag选项</h4><p><img src="'+j+'" alt="image-20240901080519788"></p><p>写入文件时，flag默认值为w。</p><p><img src="'+f+'" alt="image-20240901082102304"></p><p>当写入文件时，flag为a或a+，表示在源文件的内容后面追加。</p><p><img src="'+u+'" alt="image-20240901082424790"></p><h4 id="b-encoding选项" tabindex="-1"><a class="header-anchor" href="#b-encoding选项" aria-hidden="true">#</a> B）encoding选项</h4><p><img src="'+k+'" alt="image-20240901080557215"></p><h3 id="_4-文件夹的操作" tabindex="-1"><a class="header-anchor" href="#_4-文件夹的操作" aria-hidden="true">#</a> 4，文件夹的操作</h3><p><img src="'+y+'" alt="image-20240901082642413"></p><h4 id="a-文件夹的创建" tabindex="-1"><a class="header-anchor" href="#a-文件夹的创建" aria-hidden="true">#</a> A）文件夹的创建</h4><p><img src="'+q+'" alt="image-20240901082928553"></p><h4 id="b-文件夹内容获取" tabindex="-1"><a class="header-anchor" href="#b-文件夹内容获取" aria-hidden="true">#</a> B）文件夹内容获取</h4><p>获取目标文件夹下， 文件夹和文件，以字符串数组的形式。代码如下：</p><p><img src="'+B+'" alt="image-20240901091030909"></p><p>传入包含withFileTypes的配置项，获取带有文件信息的数组。代码如下：</p><p><img src="'+S+'" alt="image-20240901092534731"></p><p>一般在开发中不需要手动判断某个文件是文件夹还是文件，而是使用isDirectory方法。代码如下：</p><p><img src="'+w+'" alt="image-20240901093214105"></p><p>如果是一个文件夹，并且内部又嵌套文件夹，我们需要再进行判断。代码如下：</p><p><img src="'+A+'" alt="image-20240901093519512"></p><p>我们可以使用递归改进上面的代码，从而轻松读取深层的文件。代码如下：</p><p><img src="'+L+'" alt="image-20240901123631420"></p><h4 id="c-文件夹的重命名" tabindex="-1"><a class="header-anchor" href="#c-文件夹的重命名" aria-hidden="true">#</a> C）文件夹的重命名</h4><p><img src="'+E+'" alt="image-20240901124348971"></p><h4 id="d-对文件重命名" tabindex="-1"><a class="header-anchor" href="#d-对文件重命名" aria-hidden="true">#</a> D）对文件重命名</h4><p>rename方法不仅可以对文件夹重命名，还可以对文件进行重命名。代码如下：</p><p><img src="'+C+'" alt="image-20240901125029531"></p><h3 id="三-event内置模块" tabindex="-1"><a class="header-anchor" href="#三-event内置模块" aria-hidden="true">#</a> 三，Event内置模块</h3><p><img src="'+R+'" alt="image-20240901130639983"></p><h3 id="_1-基本使用" tabindex="-1"><a class="header-anchor" href="#_1-基本使用" aria-hidden="true">#</a> 1，基本使用</h3><p>EventEmitter类似于我们之前封装的事件总线。我们可以监听或发射事件。代码如下：</p><p><img src="'+v+'" alt="image-20240901130824980"></p><p>我们还可以取消监听事件，代码如下：</p><p><img src="'+D+'" alt="image-20240901131411766"></p><p>我们在触发事件时，还可以传递一些参数。代码如下：</p><p><img src="'+Q+'" alt="image-20240901131750541"></p><h3 id="_3-常见方法" tabindex="-1"><a class="header-anchor" href="#_3-常见方法" aria-hidden="true">#</a> 3，常见方法</h3><p><img src="'+M+'" alt="image-20240901131838878"></p><p><img src="'+N+'" alt="image-20240901164843734"></p><p><img src="'+U+'" alt="image-20240901132603318"></p><p>once方法只会监听一次，此后的其他emit都不会再触发事件监听。代码如下：</p><p><img src="'+H+'" alt="image-20240901132938198"></p><p>默认情况下，触发同一个事件，会按照顺序执行监听起的回调函数。但是可以使用prepend方法将指定的回调函数放在第一个执行。代码如下：</p><p><img src="'+O+'" alt="image-20240901133536816"></p><p>使用removeAllListener方法，可以移除所有事件名称的所有事件监听。代码如下：</p><p><img src="'+F+'" alt="image-20240901133932529"></p><h2 id="四-二进制和buffer" tabindex="-1"><a class="header-anchor" href="#四-二进制和buffer" aria-hidden="true">#</a> 四，二进制和buffer</h2><h3 id="_1-二进制" tabindex="-1"><a class="header-anchor" href="#_1-二进制" aria-hidden="true">#</a> 1，二进制</h3><p><img src="'+T+'" alt="image-20240901164926771"></p><p><img src="'+G+'" alt="image-20240901170005260"></p><ul><li>8位二进制(8bit) —&gt; 1 byte(字节)</li><li>buffer数组中一项保存一个字节，也就是8位二进制。</li><li>buffer底层存储为了方便在控制台展示，不会直接展示二进制，而是以每四位二级制转换成十六进制的格式进行展示。例如：[1111 1111] =&gt; [ff]，因为二进制4位1111就是f。</li></ul><h3 id="_2-buffer和字符串" tabindex="-1"><a class="header-anchor" href="#_2-buffer和字符串" aria-hidden="true">#</a> 2，Buffer和字符串</h3><p><img src="'+W+'" alt="image-20240901170030932"></p><p>使用buffer将英文以二进制的形式进行存储，并展示。代码如下：</p><p><img src="'+P+'" alt="image-20240901185745418"></p><h3 id="_3-buffer存储中文" tabindex="-1"><a class="header-anchor" href="#_3-buffer存储中文" aria-hidden="true">#</a> 3，Buffer存储中文</h3><p><img src="'+K+'" alt="image-20240901170054549"></p><p><img src="'+Y+'" alt="image-20240901190209054"></p><p>对于二进制的buffer，我们可以使用toString将其转换为原始数据。代码如下：</p><p><img src="'+z+'" alt="image-20240901190630497"></p><p>Buffer默认使用UTF-8格式进行编码，代码如下：</p><p><img src="'+I+'" alt="image-20240901191233989"></p><p>如果我们手动指定Buffer的编码和解码格式，需要将其保持一致。否则就会出现乱码。代码如下：</p><p><img src="'+J+'" alt="image-20240901191627195"></p><h3 id="_4-buffer的其他创建" tabindex="-1"><a class="header-anchor" href="#_4-buffer的其他创建" aria-hidden="true">#</a> 4, Buffer的其他创建</h3><p><img src="'+V+'" alt="image-20240901191817436"></p><h4 id="a-buffer-alloc" tabindex="-1"><a class="header-anchor" href="#a-buffer-alloc" aria-hidden="true">#</a> A）Buffer.alloc</h4><p><img src="'+X+'" alt="image-20240901211359652"></p><p>可以通过alloc方法创建buffer，并且通过索引进行访问。代码如下：</p><p><img src="'+Z+'" alt="image-20240901211740885"></p><p>我们可以手动地对buffer中的每个字节进行操作，代码如下：</p><p><img src="'+$+'" alt="image-20240901213541237"></p><h4 id="b-buffer和文件读取" tabindex="-1"><a class="header-anchor" href="#b-buffer和文件读取" aria-hidden="true">#</a> B）Buffer和文件读取</h4><p><img src="'+aa+'" alt="image-20240901213623674"></p><p>我们在使用fs.readFile方法时，如果不传入encoding项。那么默认读取的文件内容，以buffer十六进制的形式展示。代码如下：</p><p><img src="'+ia+'" alt="image-20240901221834629"></p><p>还可以以十六进制的buffer格式，读取一个png图片。代码如下：</p><p><img src="'+sa+'" alt="image-20240901222245684"></p><h3 id="_5-buffer的创建方式" tabindex="-1"><a class="header-anchor" href="#_5-buffer的创建方式" aria-hidden="true">#</a> 5，Buffer的创建方式</h3><p><img src="'+ea+'" alt="image-20240901222410618"></p><h3 id="_6-buffer的源码解析" tabindex="-1"><a class="header-anchor" href="#_6-buffer的源码解析" aria-hidden="true">#</a> 6，Buffer的源码解析</h3><p><img src="'+pa+'" alt="image-20240901225123929"></p><p><img src="'+ta+'" alt="image-20240901225145768"></p><p><img src="'+ga+'" alt="image-20240901225212503"></p><h2 id="五-stream-流" tabindex="-1"><a class="header-anchor" href="#五-stream-流" aria-hidden="true">#</a> 五，Stream(流)</h2><h3 id="_1-什么是stream" tabindex="-1"><a class="header-anchor" href="#_1-什么是stream" aria-hidden="true">#</a> 1，什么是Stream</h3><p><img src="'+na+'" alt="image-20240901230426112"></p><h3 id="_2-文件读写流的分类" tabindex="-1"><a class="header-anchor" href="#_2-文件读写流的分类" aria-hidden="true">#</a> 2，文件读写流的分类</h3><p><img src="'+ma+'" alt="image-20240901230458256"></p><h3 id="_3-readable-流" tabindex="-1"><a class="header-anchor" href="#_3-readable-流" aria-hidden="true">#</a> 3，Readable(流)</h3><p><img src="'+ra+'" alt="image-20240901231457571"></p><p>我们之前通过fs.readFile方法读取某一个文件。有很多缺点如下：</p><ul><li>缺点一：没有办法精准控制从哪里读取，读取到什么位置。</li><li>缺点二：没办法读取到某个位置的时，暂停读取，再恢复读取。</li><li>缺点三：文件非常大的时候，多次读取。</li></ul><h4 id="a-data事件的监听" tabindex="-1"><a class="header-anchor" href="#a-data事件的监听" aria-hidden="true">#</a> A）data事件的监听</h4><p><img src="'+ca+'" alt="image-20240901234825303"></p><p>创建一个读取流，从而控制文件读取的起始和结束位置。代码如下：</p><p><img src="'+oa+'" alt="image-20240901233232386"></p><p>我们还可以通过向配置项中传入highWaterMark，控制从起始位置8开始到结束位置22，每次读取3个字节。因此data事件会被多次回调。代码如下：</p><p><img src="'+da+'" alt="image-20240901233723115"></p><p>通过读取流读取文件内容时，我们还可以通过pause方法，暂停对文件内容的读取。代码如下：</p><p><img src="'+_a+'" alt="image-20240901234156822"></p><h4 id="b-其他事件的监听" tabindex="-1"><a class="header-anchor" href="#b-其他事件的监听" aria-hidden="true">#</a> B）其他事件的监听</h4><p>使用读取流进行文件读取时，最先被触发的是open事件。因为要读取文件，需要先打开文件。代码如下：</p><p><img src="'+ha+'" alt="image-20240901235131397"></p><p>当文件读取流读取文件内容到end位置时，会触发一个end事件。读取完成后会关闭该文件，触发一个close事件。代码如下：</p><p><img src="'+la+'" alt="image-20240902000111267"></p><h3 id="_4-writable-流" tabindex="-1"><a class="header-anchor" href="#_4-writable-流" aria-hidden="true">#</a> 4，Writable(流)</h3><p><img src="'+xa+'" alt="image-20240903174227599"></p><p>回顾我们之前使用的fs.write，该方法会一次写入所有内容。操作如下：</p><p><img src="'+ba+'" alt="image-20240903182615146"></p><h4 id="a-基本使用" tabindex="-1"><a class="header-anchor" href="#a-基本使用" aria-hidden="true">#</a> A）基本使用</h4><p><img src="'+ja+'" alt="image-20240903174253331"></p><p>创建一个写入流，并向文件中追加内容。操作如下：</p><p><img src="'+fa+'" alt="image-20240903183111074"></p><p>我们还可以向配置项中传入flags，控制从什么位置开始写入。操作如下：</p><p><img src="'+ua+'" alt="image-20240903183808952"></p><p>写入成功，还可以触发对应的回调函数，操作如下：</p><p><img src="'+ka+'" alt="image-20240903184033275"></p><h4 id="b-close的监听" tabindex="-1"><a class="header-anchor" href="#b-close的监听" aria-hidden="true">#</a> B）close的监听</h4><p><img src="'+ya+'" alt="image-20240903174319429"></p><p>文件写入完成后，我们并不能监听到close事件。这是因为写入流在打开后是不会自动关闭的，我们需要手动调用close方法关闭。操作如下：</p><p><img src="'+qa+'" alt="image-20240903184459927"></p><p>与write方法相比，end方法将最后的内容内容写入到文件中，并关闭文件。操作如下：</p><p><img src="'+Ba+'" alt="image-20240903185128379"></p><p>通常写入流在对一个文件进行写入前，会先打开文件。我们可以监听到open事件，操作如下：</p><p><img src="'+Sa+'" alt="image-20240903185419967"></p><p>我们通过end方法写入内容后并关闭文件，对应的监听事件是finish事件。操作如下：</p><p><img src="'+wa+'" alt="image-20240903190004639"></p><h4 id="c-pipe方法" tabindex="-1"><a class="header-anchor" href="#c-pipe方法" aria-hidden="true">#</a> C）pipe方法</h4><p><img src="'+Aa+'" alt="image-20240903174341679"></p><p>通过代码实现对文件的拷贝。</p><p>方式一：使用fs.readFile和fs.writeFile方法，可以实现对一个文件的复制，操作如下：</p><p><img src="'+La+'" alt="image-20240903191304370"></p><p>上述方式一次性将一个文件读取出来进行写入。缺点是没法精准控制，文件太大不太合适。</p><p>方式二：创建一个可写流和可读流，每读取一部分数据就写入到新文件中，读取流读取完毕，手动调用close方法关闭可写流。操作如下：</p><p><img src="'+Ea+'" alt="image-20240903192350816"></p><p>方式三：通过pipe方法，在可读流和可写流之间建立一个管道，从可写流中读到的所有数据会输入到可写流里面。 操作如下：</p><p><img src="'+Ca+'" alt="image-20240903192908346"></p><h3 id="_5-可写流start属性" tabindex="-1"><a class="header-anchor" href="#_5-可写流start属性" aria-hidden="true">#</a> 5，可写流start属性</h3><p>对于可写流的start属性，windows电脑依然在文件内容的最后面进行追加。而mac电脑并不会。操作如下：</p><p><img src="'+Ra+'" alt="image-20240903194733973"></p><p>那么在windows电脑上该如何解决这个问题？使用r或r+。操作如下：</p><p><img src="'+va+'" alt="image-20240903195354525"></p><h2 id="六-web服务器开发" tabindex="-1"><a class="header-anchor" href="#六-web服务器开发" aria-hidden="true">#</a> 六，Web服务器开发</h2><h3 id="_1-http模块web服务" tabindex="-1"><a class="header-anchor" href="#_1-http模块web服务" aria-hidden="true">#</a> 1，http模块web服务</h3><p><img src="'+Da+'" alt="image-20240902001450728"></p><p><img src="'+Qa+'" alt="image-20240902001510192"></p><h3 id="_2-创建服务器" tabindex="-1"><a class="header-anchor" href="#_2-创建服务器" aria-hidden="true">#</a> 2，创建服务器</h3><p><img src="'+Ma+'" alt="image-20240902134952198"></p><p><img src="'+Na+'" alt="image-20240902135016188"></p><h4 id="a-创建服务器" tabindex="-1"><a class="header-anchor" href="#a-创建服务器" aria-hidden="true">#</a> A）创建服务器</h4><p><img src="'+Ua+'" alt="image-20240902135316121"></p><h4 id="b-创建多个服务器" tabindex="-1"><a class="header-anchor" href="#b-创建多个服务器" aria-hidden="true">#</a> B）创建多个服务器</h4><p><img src="'+Ha+'" alt="image-20240902142034858"></p><h4 id="c-postman发请求" tabindex="-1"><a class="header-anchor" href="#c-postman发请求" aria-hidden="true">#</a> C）postman发请求</h4><p>后续关于node的学习，如果需要发送网络请求，我们会用到postman。操作如下：</p><p><img src="'+Oa+`" alt="image-20240902200659497"></p><h4 id="d-nodemon工具" tabindex="-1"><a class="header-anchor" href="#d-nodemon工具" aria-hidden="true">#</a> D）nodemon工具</h4><p>在node服务器开发中，我们每修改一次代码，就需要重新启动服务器，这样做很麻烦。因此我们需要安装一个nodemon。操作如下：</p><p>全局安装nodemon：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i nodemon <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+Fa+'" alt="image-20240902201136028"></p><h4 id="e-配置代码片段" tabindex="-1"><a class="header-anchor" href="#e-配置代码片段" aria-hidden="true">#</a> E）配置代码片段</h4><p><img src="'+Ta+'" alt="image-20240902201723455"></p><p><img src="'+Ga+'" alt="image-20240902201810408"></p><h3 id="_5-request请求对象" tabindex="-1"><a class="header-anchor" href="#_5-request请求对象" aria-hidden="true">#</a> 5，request请求对象</h3><p><img src="'+Wa+'" alt="image-20240902202018178"></p><p>在向服务器发送请求时，我们会携带很多信息，比如：</p><ul><li>本次请求的URL，服务器需要根据不同的URL进行不同的处理；</li><li>本次请求的请求方式，比如GET、POST请求传入的参数和处理的方式是不同的；</li><li>本次请求的headers中也会携带一些信息，比如客户端信息、接受数据的格式、支持的编码格式等；</li><li>等等..</li></ul><h4 id="a-基本使用-1" tabindex="-1"><a class="header-anchor" href="#a-基本使用-1" aria-hidden="true">#</a> A）基本使用</h4><p><img src="'+Pa+'" alt="image-20240902202657509"></p><h4 id="b-url的处理" tabindex="-1"><a class="header-anchor" href="#b-url的处理" aria-hidden="true">#</a> B）URL的处理</h4><p><img src="'+Ka+'" alt="image-20240902202833876"></p><p><img src="'+Ya+'" alt="image-20240902223832624"></p><p>客户端在发送请求时，会请求不同的数据，那么会传入不同的请求地址。服务器端需要根据不同的请求地址，作出不同的响应。</p><p>根据req.url区分不同的URL，操作如下：</p><p><img src="'+za+'" alt="image-20240902203650514"></p><p>通常我们在判断请求url的同时，还需要判断method请求方式。操作如下：</p><p><img src="'+Ia+'" alt="image-20240902204333935"></p><h4 id="c-url解析—query参数" tabindex="-1"><a class="header-anchor" href="#c-url解析—query参数" aria-hidden="true">#</a> C）URL解析—query参数</h4><p><img src="'+Ja+'" alt="image-20240902204515923"></p><p>通过req结合url模块，也可以获取到查询字符串。操作如下：</p><p><img src="'+Va+'" alt="image-20240902220043432"></p><p>使用qs内置模块，可以通过对象的方式对offset=100&amp;size=20进行访问，操作如下：</p><p><img src="'+Xa+'" alt="image-20240902221007899"></p><p>我们也可以是使用URLSearchParams，这里就不再演示。</p><h4 id="d-url解析—body参数" tabindex="-1"><a class="header-anchor" href="#d-url解析—body参数" aria-hidden="true">#</a> D）URL解析—body参数</h4><p>对于通过post请求以body方式传递过来的参数，我们是没法直接在req对象中获取的。参数req本质上是一个readable(可读流)，我们可以通过on方法监听data事件，从而获取body参数。通过监听end事件监听读取完毕。操作如下：</p><p><img src="'+Za+'" alt="image-20240902223534464"></p><h4 id="e-request-header" tabindex="-1"><a class="header-anchor" href="#e-request-header" aria-hidden="true">#</a> E）Request Header</h4><p><img src="'+$a+'" alt="image-20240902224102564"></p><p><img src="'+a2+'" alt="image-20240902224143733"></p><p>通过req.headers我们可以获取到请求头相关的信息。通过body传递json数据，在js代码中通过Content-Type查看。操作如下：</p><p><img src="'+i2+'" alt="image-20240902225539529"></p><p>使用body传递x-www-form-urlencoded格式数据。在代码中通过req.headers对象查看。操作如下：</p><p><img src="'+s2+'" alt="image-20240902230220763"></p><p>对于请求某些接口，我们需要在请求头中携带token，我们在服务器代码中可以通过获取到传递过来的token。操作如下：</p><p><img src="'+e2+'" alt="image-20240902235338126"></p><h3 id="_6-response响应对象" tabindex="-1"><a class="header-anchor" href="#_6-response响应对象" aria-hidden="true">#</a> 6，response响应对象</h3><h4 id="a-返回响应结果" tabindex="-1"><a class="header-anchor" href="#a-返回响应结果" aria-hidden="true">#</a> A）返回响应结果</h4><p><img src="'+p2+'" alt="image-20240902235723095"></p><p>res的本质是一个可写流，通过res.write方法写出数据(给客户端响应结果)，可写流并没有关闭，还需要调用res.end方法写出最后的数据，并且写出后会关闭流。操作如下：</p><p><img src="'+t2+'" alt="image-20240903001110637"></p><p>需要注意的时，res虽然是一个可写流，但是内部做了处理，不能使用close方法。也就是说，使用res.write方法后，不能使用close方法关闭可写流。</p><p>如果使用res.write方法，而没有end方法，客户端会一直等待响应。此时我们需要给请求设置超时事件。操作如下：</p><p><img src="'+g2+'" alt="image-20240903001525016"></p><p>因此我们在客户端发送请求时，需要设置超时时间。</p><h4 id="b-返回状态码" tabindex="-1"><a class="header-anchor" href="#b-返回状态码" aria-hidden="true">#</a> B）返回状态码</h4><p><img src="'+n2+'" alt="image-20240902235825041"></p><p>Http状态码（Http Status Code）是用来表示Http响应状态的数字代码。</p><p>方式一：在res.end方法之前，使用res.statusCode设置s状态码。操作如下：</p><p><img src="'+m2+'" alt="image-20240903002521835"></p><p>方式二：在res.end方法之前，使用res.writeHead设置状态码(该方法还可以同时设置headers)。操作如下：</p><p><img src="'+r2+'" alt="image-20240903002921524"></p><h4 id="c-响应header信息" tabindex="-1"><a class="header-anchor" href="#c-响应header信息" aria-hidden="true">#</a> C）响应Header信息</h4><p><img src="'+c2+'" alt="image-20240902235850108"></p><p>我们在服务器代码中向客户端发送&quot;你好啊，李银河！&quot;，在浏览器中测试会出现乱码，但是在postman中测试并不会，这是为什么？</p><p><img src="'+o2+'" alt="image-20240903093044681"></p><p>因此我们在响应给客户端数据时，需要设置Headers，发送json格式的数据。操作如下：</p><p><img src="'+d2+'" alt="image-20240903094452292"></p><p>设置header，Content-Type为text/plain，响应文本格式的数据。操作如下：</p><p><img src="'+_2+'" alt="image-20240903094657807"></p><p>我们还可以使用res.writeHead方法设置响应状态码的同时，设置Header信息。操作如下：</p><p><img src="'+h2+'" alt="image-20240903095026618"></p><p>如果我们需要向客户端传递一个很复杂的数据，例如：数组中存储着多个对象。我们可以使用JSON.stringify方法将其转换为JSON字符串，再通过res.end方法响应。操作如下：</p><p><img src="'+l2+'" alt="image-20240903095548156"></p><h3 id="_7-http发送请求" tabindex="-1"><a class="header-anchor" href="#_7-http发送请求" aria-hidden="true">#</a> 7，http发送请求</h3><p><img src="'+x2+'" alt="image-20240903095651959"></p><p>axios库可以在浏览器中使用，也可以在Node中使用：</p><ul><li>在浏览器中，axios使用的是封装xhr。</li><li>在Node中，使用的是http内置模块。</li></ul><p>在node中发送网络请求，需要使用http模块。使用http模块发送get请求。操作如下：</p><p><img src="'+b2+'" alt="image-20240903140648714"></p><p>使用http模块发送post请求，操作如下：</p><p><img src="'+j2+'" alt="image-20240903150835073"></p><p>在node中使用axios发送网络请求，操作如下：</p><p><img src="'+f2+'" alt="image-20240903151234259"></p><h3 id="_8-文件上传的细节分析" tabindex="-1"><a class="header-anchor" href="#_8-文件上传的细节分析" aria-hidden="true">#</a> 8，文件上传的细节分析</h3><h4 id="a-文件上传流程和错误" tabindex="-1"><a class="header-anchor" href="#a-文件上传流程和错误" aria-hidden="true">#</a> A）文件上传流程和错误</h4><p><img src="'+u2+'" alt="image-20240903095732290"></p><p>我们还可以通过post请求，通过body给服务器上传文件。操作如下：</p><p><img src="'+k2+'" alt="image-20240903172326262"></p><p>当我们上传一个比较大的图片文件时，不会一次上传完成，而是会多次上传。操作如下：</p><p><img src="'+y2+'" alt="image-20240903172717778"></p><p>但是我们上传的文件不能打开，这是因为上传的图片文件数据混入了其他数据，操作如下：</p><p><img src="'+q2+'" alt="image-20240903173820568"></p><p>上述是文件上传正确流程，但是有细节错误。</p><p><img src="'+B2+'" alt="image-20240903095800046"></p><p><img src="'+S2+'" alt="image-20240903100023161"></p><h2 id="七-express框架" tabindex="-1"><a class="header-anchor" href="#七-express框架" aria-hidden="true">#</a> 七，Express框架</h2><h3 id="_1-express初体验" tabindex="-1"><a class="header-anchor" href="#_1-express初体验" aria-hidden="true">#</a> 1，Express初体验</h3><p><img src="'+w2+'" alt="image-20240903222620733"></p><h4 id="a-安装" tabindex="-1"><a class="header-anchor" href="#a-安装" aria-hidden="true">#</a> A）安装</h4><p><img src="'+A2+'" alt="image-20240903222659091"></p><p>第一步：使用npm init命令，在项目根目录下初始化一个package.json配置文件。操作如下：</p><p><img src="'+L2+'" alt="image-20240903230132738"></p><p>第二步：安装express，操作如下：</p><p><img src="'+E2+'" alt="image-20240903230245084"></p><h4 id="b-基本使用" tabindex="-1"><a class="header-anchor" href="#b-基本使用" aria-hidden="true">#</a> B）基本使用</h4><p><img src="'+C2+'" alt="image-20240903222721190"></p><p><img src="'+R2+'" alt="image-20240903231447044"></p><h3 id="_2-express中间件使用" tabindex="-1"><a class="header-anchor" href="#_2-express中间件使用" aria-hidden="true">#</a> 2，Express中间件使用</h3><h4 id="a-认识中间件" tabindex="-1"><a class="header-anchor" href="#a-认识中间件" aria-hidden="true">#</a> A）认识中间件</h4><p><img src="'+v2+'" alt="image-20240903231526082"></p><p><img src="'+D2+'" alt="image-20240903231550947"></p><p>中间件的作用：</p><ol><li>中间件中可以执行任意代码，例如：打印、查询数据、判断逻辑。</li><li>在中间件中修改req/res对象。</li><li>可以在中间件中结束响应周期</li><li>执行下一个中间件</li></ol><p><img src="'+Q2+'" alt="image-20240903235908088"></p><h4 id="b-自己编写的中间件" tabindex="-1"><a class="header-anchor" href="#b-自己编写的中间件" aria-hidden="true">#</a> B）自己编写的中间件</h4><p><img src="'+M2+'" alt="image-20240903231613813"></p><p>案例一：最普通的中间件，代码如下：</p><p><img src="'+N2+'" alt="image-20240904102614933"></p><p>当有两个最普通的中间件存在时，如果发送请求，默认只会执行第一个中间件。操作如下：</p><p><img src="'+U2+'" alt="image-20240904103756692"></p><p>上一个中间件调用next方法，下一个普通中间件才会执行。操作如下：</p><p><img src="'+H2+'" alt="image-20240904104032871"></p><p>案例二：path匹配中间件。</p><p>我们将编写一个可以匹配路径的中间件，操作如下：</p><p><img src="'+O2+'" alt="image-20240904111912578"></p><p>案例三：注册匹配路径和请求方式的中间件，操作如下：</p><p><img src="'+F2+'" alt="image-20240904112921238"></p><p>案例四：一次注册多个中间件。</p><p><img src="'+T2+'" alt="image-20240904124421366"></p><h4 id="c-中间件的执行顺序" tabindex="-1"><a class="header-anchor" href="#c-中间件的执行顺序" aria-hidden="true">#</a> C）中间件的执行顺序</h4><p>接下来看一个案例，代码如下：</p><p><img src="'+G2+'" alt="image-20240904131211324"></p><h4 id="d-中间件案例练习" tabindex="-1"><a class="header-anchor" href="#d-中间件案例练习" aria-hidden="true">#</a> D）中间件案例练习</h4><p>接下来我们做一个案例练习。</p><p>第一步：完成登录逻辑的判断，代码如下：</p><p><img src="'+W2+'" alt="image-20240904142402406"></p><p>第二步：完成用户注册逻辑，代码如下：</p><p><img src="'+P2+'" alt="image-20240904154746315"></p><p>上述代码不管是登录接口、还是注册接口都需要对数据解码并转换成js对象。因此我们可以将这一部分逻辑代码抽离到普通中间件中。</p><p><img src="'+K2+'" alt="image-20240903231636618"></p><p><img src="'+Y2+'" alt="image-20240904170111178"></p><p>代码如下：</p><p><img src="'+z2+'" alt="image-20240904164138747"></p><h4 id="e-express提供的中间件" tabindex="-1"><a class="header-anchor" href="#e-express提供的中间件" aria-hidden="true">#</a> E）express提供的中间件</h4><p><img src="'+I2+'" alt="image-20240904164406804"></p><p>在实际开发中，对于上述逻辑代码，我们可以使用内置中间件。操作如下：</p><p><img src="'+J2+'" alt="image-20240904165848170"></p><p>刚才我们解析的是json格式的数据。如果我们解析的是 application/x-www-form-urlencoded：</p><p><img src="'+V2+'" alt="image-20240904172952536"></p><p>我们想要解析urlencoded格式数据，需要使用内置中间件express.urlencoded，操作如下：</p><p><img src="'+X2+'" alt="image-20240904175028394"></p><p>上述使用express.urlencoded中间件，解析urlencoded的body数据的方式，已经被废弃了。我们需要使用传入配置项的方式。操作如下：</p><p><img src="'+Z2+'" alt="image-20240904175430565"></p><h4 id="f-第三方中间件" tabindex="-1"><a class="header-anchor" href="#f-第三方中间件" aria-hidden="true">#</a> F）第三方中间件</h4><p><img src="'+$2+'" alt="image-20240904175620656"></p><p>如果我们希望将请求日志记录下来，那么可以使用express官网开发的第三方库：morgan。</p><p><img src="'+a0+'" alt="image-20240904225301708"></p><p>上传单个文件，我们可以使用express提供的multer来完成。</p><p>第一步：安装multer中间件，操作如下：</p><p><img src="'+i0+'" alt="image-20240904231147217"></p><p>第二步：引入并使用multer中间件，操作如下：</p><p><img src="'+s0+'" alt="image-20240904232415266"></p><p>因为接收到上传的图片文件，没有后缀名，因此不能正常展示。我们需要进行处理，操作如下：</p><p><img src="'+e0+'" alt="image-20240905083053626"></p><p><img src="'+p0+'" alt="image-20240905002042740"></p><p>实现一次性上传多个文件，操作如下：</p><p><img src="'+t0+'" alt="image-20240905082756391"></p><p>终端打印如下：</p><p><img src="'+g0+'" alt="image-20240905082912549"></p><p>如果我们希望借助于multer帮助我们解析一些form-data中的普通数据，那么我们可以使用any。</p><p><img src="'+n0+'" alt="image-20240905084210188"></p><p><img src="'+m0+'" alt="image-20240905092102417"></p><h3 id="_3-express请求" tabindex="-1"><a class="header-anchor" href="#_3-express请求" aria-hidden="true">#</a> 3，Express请求</h3><h4 id="a-客户端发送请求的方式" tabindex="-1"><a class="header-anchor" href="#a-客户端发送请求的方式" aria-hidden="true">#</a> A）客户端发送请求的方式</h4><p><img src="'+r0+'" alt="image-20240905092237026"></p><h4 id="b-传递参数params和query" tabindex="-1"><a class="header-anchor" href="#b-传递参数params和query" aria-hidden="true">#</a> B）传递参数params和query</h4><p><img src="'+c0+'" alt="image-20240905092318494"></p><p>我们在之前通过内置或第三方中间件，可以做到解析urlencoded和formdata格式的数据。除此之外，get请求也可以通过queryString或params的方式向服务器传递参数。</p><p>get请求通过queryString格式传递参数，操作如下:</p><p><img src="'+o0+'" alt="image-20240905105919336"></p><p>get请求通过params格式传递参数，操作如下:</p><p><img src="'+d0+'" alt="image-20240905110658576"></p><h3 id="_4-express响应" tabindex="-1"><a class="header-anchor" href="#_4-express响应" aria-hidden="true">#</a> 4，Express响应</h3><p><img src="'+_0+'" alt="image-20240905092348883"></p><p>我们在之前的代码中，给客户端响应数据采用res.end方法。但是实际开发中，使用res.json方法是最多的，该方法可以给客户端响应json格式的数据。</p><p>json方法中可以传入很多的类型：object、array、string、boolean、number、null等，它们会被转换成json格式返回。操作如下：</p><p><img src="'+h0+'" alt="image-20240905115855774"></p><p>除此之外，我们还可以使用res.status方法设置，响应状态码。操作如下:</p><p><img src="'+l0+'" alt="image-20240905120421649"></p><h3 id="_5-express路由使用" tabindex="-1"><a class="header-anchor" href="#_5-express路由使用" aria-hidden="true">#</a> 5，Express路由使用</h3><h4 id="a-路由基本使用" tabindex="-1"><a class="header-anchor" href="#a-路由基本使用" aria-hidden="true">#</a> A）路由基本使用</h4><p><img src="'+x0+'" alt="image-20240905171955535"></p><p>如果我们将所有的代码逻辑都写在app中，那么app会变得越来越复杂。</p><ul><li>一方面完整的Web服务器包含非常多的处理逻辑。</li><li>另一方面有些处理逻辑其实是一个整体，我们应该将它们放在一起：比如对users相关的处理。</li></ul><p><img src="'+b0+'" alt="image-20240905172824221"></p><p>我们可以使用 express.Router来创建一个路由处理程序：</p><ul><li>一个Router实例拥有完整的中间件和路由系统；</li><li>因此，它也被称为 迷你应用程序（mini-app）；</li></ul><p><img src="'+j0+'" alt="image-20240905174231668"></p><p>实际的开发中，我们会将路由对象抽离到单独的文件中。</p><p>第一步：将路由对象抽离到项目根目录文件夹router下，操作如下：</p><p><img src="'+f0+'" alt="image-20240905174713573"></p><p>第二步：在app所有的文件中引入路由对象，操作如下：</p><p><img src="'+u0+'" alt="image-20240905174926486"></p><h4 id="b-静态资源服务器" tabindex="-1"><a class="header-anchor" href="#b-静态资源服务器" aria-hidden="true">#</a> B）静态资源服务器</h4><p><img src="'+k0+'" alt="image-20240905172026830"></p><p>部署静态资源我们可以选择很多方式。Node也可以作为静态资源服务器，并且express给我们提供了方便部署静态资源的方法。</p><p><img src="'+y0+'" alt="image-20240905230043690"></p><p>可以将我们之前用React开发的爱彼迎网站部署为静态资源，操作如下：</p><p><img src="'+q0+'" alt="image-20240905231114075"></p><h3 id="_6-express的错误处理" tabindex="-1"><a class="header-anchor" href="#_6-express的错误处理" aria-hidden="true">#</a> 6，Express的错误处理</h3><p><img src="'+B0+'" alt="image-20240905172052809"></p><p>以登录流程为例，展示express中处理错误的流程，操作如下:</p><p><img src="'+S0+'" alt="image-20240906090633872"></p><p>将错误处理的相关逻辑抽取到错误处理中间件中。当调用next并传入参数时，错误处理中间件才会被执行。并且错误处理中间件的第一个参数接收next传递过来的参数。操作如下:</p><p><img src="'+w0+'" alt="image-20240906093309720"></p><h3 id="_7-express的源码解析" tabindex="-1"><a class="header-anchor" href="#_7-express的源码解析" aria-hidden="true">#</a> 7，Express的源码解析</h3><p><img src="'+A0+'" alt="image-20240906093618249"></p><p><img src="'+L0+'" alt="image-20240906093643546"></p><p><img src="'+E0+'" alt="image-20240906093709310"></p><p><img src="'+C0+'" alt="image-20240906093730163"></p><h2 id="八-koa框架" tabindex="-1"><a class="header-anchor" href="#八-koa框架" aria-hidden="true">#</a> 八，Koa框架</h2><h3 id="_1-koa的基本使用" tabindex="-1"><a class="header-anchor" href="#_1-koa的基本使用" aria-hidden="true">#</a> 1，koa的基本使用</h3><p><img src="'+R0+'" alt="image-20240906120948435"></p><p><img src="'+v0+'" alt="image-20240906121010438"></p><h4 id="a-基本使用-2" tabindex="-1"><a class="header-anchor" href="#a-基本使用-2" aria-hidden="true">#</a> A）基本使用</h4><p>第一步：安装koa，操作如下：</p><p><img src="'+D0+'" alt="image-20240906121808582"></p><p>第二步：使用koa，操作如下：</p><p><img src="'+Q0+'" alt="image-20240906122844355"></p><h4 id="b-ctx对象" tabindex="-1"><a class="header-anchor" href="#b-ctx对象" aria-hidden="true">#</a> B）ctx对象</h4><p><img src="'+M0+'" alt="image-20240906134316753"></p><h3 id="_2-koa中间件" tabindex="-1"><a class="header-anchor" href="#_2-koa中间件" aria-hidden="true">#</a> 2，Koa中间件</h3><p><img src="'+N0+'" alt="image-20240906134505739"></p><p>koa通过创建的app对象，注册中间件只能通过use方法：</p><ul><li>Koa并没有提供methods的方式来注册中间件；</li><li>也没有提供path中间件来匹配路径；</li></ul><p>但是真实开发中我们如何将路径和method分离呢？</p><ul><li>方式一：根据request自己来判断；</li><li>方式二：使用第三方路由中间件；</li></ul><p>koa区分路径和方式，做法一：</p><p><img src="'+U0+'" alt="image-20240906135251399"></p><p>使用ctx.path和ctx.method区分路径和方式，代码如下：</p><p><img src="'+H0+'" alt="image-20240906140211553"></p><p>上述方式过于麻烦，需要我们手动对路径和方式进行区分。开发中我们不会采取这种方式。</p><h3 id="_3-路由的使用" tabindex="-1"><a class="header-anchor" href="#_3-路由的使用" aria-hidden="true">#</a> 3，路由的使用</h3><p><img src="'+O0+'" alt="image-20240906140431384"></p><p>koa官方并没有给我们提供路由的库，我们可以选择第三方库：@koa/router。</p><p>我们可以先封装一个 user.router.js 的文件：</p><ul><li>在app中将router.routes()注册为中间件：</li></ul><p>注意：allowedMethods用于判断某一个method是否支持：</p><p>第一步：安装@koa/router，操作如下：</p><p><img src="'+F0+'" alt="image-20240906140918465"></p><p>第二步：引入路由并使用，操作如下：</p><p><img src="'+T0+'" alt="image-20240906163524472"></p><p>第三步：例如：我们的服务器代码中，并没有对patch方法做处理。此时就会返回Not Found。我们想明确告诉客户端请求方式不被允许，应该使用allowedMethods方法。操作如下：</p><p><img src="'+G0+'" alt="image-20240906164819989"></p><p>第三步：将与user相关的路由抽离到单独的文件中，操作如下：</p><p><img src="'+W0+'" alt="image-20240906170242214"></p><p><img src="'+P0+'" alt="image-20240906170357677"></p><h3 id="_4-koa的参数解析" tabindex="-1"><a class="header-anchor" href="#_4-koa的参数解析" aria-hidden="true">#</a> 4，koa的参数解析</h3><h4 id="a-params和query" tabindex="-1"><a class="header-anchor" href="#a-params和query" aria-hidden="true">#</a> A） params和query</h4><p><img src="'+K0+'" alt="image-20240906175806639"></p><p>获取params参数，代码如下：</p><p><img src="'+Y0+'" alt="image-20240906173144864"></p><p>获取queryString参数，代码如下：</p><p><img src="'+z0+'" alt="image-20240906175524299"></p><h4 id="b-json参数" tabindex="-1"><a class="header-anchor" href="#b-json参数" aria-hidden="true">#</a> B）json参数</h4><p><img src="'+I0+'" alt="image-20240906175912874"></p><p>安装koa-bodyparse，引入并使用。操作如下：</p><p><img src="'+J0+'" alt="image-20240906180921322"></p><h4 id="c-urlencoded" tabindex="-1"><a class="header-anchor" href="#c-urlencoded" aria-hidden="true">#</a> C）urlencoded</h4><p><img src="'+V0+'" alt="image-20240906181331844"></p><p>koa-bodyparser既可以解析json数据也可以解析urlencoded数据，操作如下：</p><p><img src="'+X0+'" alt="image-20240906183354109"></p><h4 id="d-form-data" tabindex="-1"><a class="header-anchor" href="#d-form-data" aria-hidden="true">#</a> D）form-data</h4><p><img src="'+Z0+'" alt="image-20240906183552868"></p><p>我们刚才安装的第三方中间件是不能解析form-data格式的数据。我们需要安装koa/multer。</p><p><img src="'+$0+'" alt="image-20240906184557968"></p><p>第一步：安装@koa/multer multer。操作如下： <img src="'+ai+'" alt="image-20240906184759257"></p><p>第二步：引入koa-multer，并使其生效。让其成为局部中间件，只对特定请求方式和路径的路由生效。</p><p><img src="'+ii+'" alt="image-20240906190502428"></p><h3 id="_5-multer文件上传" tabindex="-1"><a class="header-anchor" href="#_5-multer文件上传" aria-hidden="true">#</a> 5，Multer文件上传</h3><p><img src="'+si+'" alt="image-20240906221932784"></p><h4 id="a-单文件上传" tabindex="-1"><a class="header-anchor" href="#a-单文件上传" aria-hidden="true">#</a> A）单文件上传</h4><p>使用muter中间件实现单文件上传，因为上传的图片文件没有后缀名，因此不能正常显示。操作如下：</p><p><img src="'+ei+'" alt="image-20240906224409675"></p><p>处理上传文件没有后缀名，不能正常显示的问题。操作如下：</p><p><img src="'+pi+'" alt="image-20240906225758438"></p><h4 id="b-多文件上传" tabindex="-1"><a class="header-anchor" href="#b-多文件上传" aria-hidden="true">#</a> B）多文件上传</h4><p>使用multer实现多文件上传，操作如下:</p><p><img src="'+ti+'" alt="image-20240906230646786"></p><h3 id="_6-koa静态服务器" tabindex="-1"><a class="header-anchor" href="#_6-koa静态服务器" aria-hidden="true">#</a> 6，koa静态服务器</h3><p><img src="'+gi+'" alt="image-20240906231104056"></p><p>koa并没有内置部署相关的功能，所以我们需要使用第三方库koa-static， 部署的过程类似于express。</p><p>第一步：安装koa-static，操作如下：</p><p><img src="'+ni+'" alt="image-20240906231336066"></p><p>第二步：引入并使用，操作如下：</p><p><img src="'+mi+'" alt="image-20240906233008323"></p><h3 id="_7-koa响应" tabindex="-1"><a class="header-anchor" href="#_7-koa响应" aria-hidden="true">#</a> 7，koa响应</h3><p><img src="'+ri+'" alt="image-20240906233145870"></p><p>输出结果：body将响应主体设置为以下之一：</p><ul><li>string ：字符串数据</li><li>Buffer ：Buffer数据</li><li>Stream ：流数据</li><li>Object|| Array：对象或者数组</li><li>null ：不输出任何内容</li><li>如果response.status尚未设置，Koa会自动将状态设置为200或204。</li></ul><p>响应给客户端的数据类型一：字符串，如下：</p><p><img src="'+ci+'" alt="image-20240906234618886"></p><p>响应客户端的数据类型二：Buffer，如下:</p><p><img src="'+oi+'" alt="image-20240909190457839"></p><p>响应给客户端的数据类型三：Stream，如下：</p><p><img src="'+di+'" alt="image-20240909191451040"></p><p>默认客户端将响应的数据当作字符串，并以utf-8来解析。需要明确指定返回的类型，操作如下:</p><p><img src="'+_i+'" alt="image-20240909192032004"></p><p>响应给客户端的数据类型四：array/object，如下：</p><p><img src="'+hi+'" alt="image-20240909203109292"></p><p>响应给客户端的数据类型五：null，如下：</p><p><img src="'+li+'" alt="image-20240909203556050"></p><p>我们可以主动设置http响应状态码，操作如下:</p><p><img src="'+xi+'" alt="image-20240909203849600"></p><h3 id="_8-koa错误处理" tabindex="-1"><a class="header-anchor" href="#_8-koa错误处理" aria-hidden="true">#</a> 8，koa错误处理</h3><p><img src="'+bi+'" alt="image-20240906233230190"></p><p>koa中错误处理方式一：在对于的路由中间件中直接进行逻辑判断，操作如下：</p><p><img src="'+ji+'" alt="image-20240909213426910"></p><p><img src="'+fi+'" alt="image-20240909213538276"></p><p>方案二：对于错误信息处理，不应该在每个接口中，而是进行统一管理。操作如下：</p><p><img src="'+ui+'" alt="image-20240909215629747"></p><p>处理部署静态资源时，在浏览器中访问不到的问题。原因：chrome对6000端口进行了限制。</p><h3 id="_9-koa的源码解析" tabindex="-1"><a class="header-anchor" href="#_9-koa的源码解析" aria-hidden="true">#</a> 9，koa的源码解析</h3><h3 id="_10-和express对比" tabindex="-1"><a class="header-anchor" href="#_10-和express对比" aria-hidden="true">#</a> 10，和express对比</h3><p><img src="'+ki+'" alt="image-20240909230213339"></p><p><img src="'+yi+'" alt="image-20240909230253065"></p><h4 id="a-koa执行同步代码" tabindex="-1"><a class="header-anchor" href="#a-koa执行同步代码" aria-hidden="true">#</a> A）koa执行同步代码</h4><p><img src="'+qi+'" alt="image-20240910233935178"></p><p><img src="'+Bi+'" alt="image-20240911122749884"></p><h4 id="b-koa执行异步代码" tabindex="-1"><a class="header-anchor" href="#b-koa执行异步代码" aria-hidden="true">#</a> B）koa执行异步代码</h4><p>调用next函数，执行下一个中间件。如果该中间件是一个异步函数，不会等待结果，而是继续执行后面的代码。</p><p><img src="'+Si+'" alt="image-20240911130947653"></p><p>如果该中间件是一个异步函数，我们希望等待它的结果，该怎么做？</p><p><img src="'+wi+'" alt="image-20240911131646100"></p><h4 id="c-express执行同步代码" tabindex="-1"><a class="header-anchor" href="#c-express执行同步代码" aria-hidden="true">#</a> C）express执行同步代码</h4><p><img src="'+Ai+'" alt="image-20240911211040750"></p><h4 id="d-express执行异步代码" tabindex="-1"><a class="header-anchor" href="#d-express执行异步代码" aria-hidden="true">#</a> D）express执行异步代码</h4><p>在express中，中间件的执行过程中，不会等待异步代码的执行结果。如下：</p><p><img src="'+Li+'" alt="image-20240911220536558"></p><p>像处理koa中间中的异步代码那样，使用async/await不会起效果。操作如下：</p><p><img src="'+Ei+'" alt="image-20240911221246497"></p><p>那么我们该如何解决？将给客户端响应的逻辑代码放到最后一个中间件中，操作如下：</p><p><img src="'+Ci+'" alt="image-20240911222019787"></p><h4 id="e-koa洋葱模型" tabindex="-1"><a class="header-anchor" href="#e-koa洋葱模型" aria-hidden="true">#</a> E）koa洋葱模型</h4><p><img src="'+Ri+'" alt="image-20240911222143013"></p><h2 id="九-mysql数据库" tabindex="-1"><a class="header-anchor" href="#九-mysql数据库" aria-hidden="true">#</a> 九，MySQL数据库</h2><h3 id="_1-mysql介绍和安装" tabindex="-1"><a class="header-anchor" href="#_1-mysql介绍和安装" aria-hidden="true">#</a> 1，MySQL介绍和安装</h3><h4 id="a-mysql介绍" tabindex="-1"><a class="header-anchor" href="#a-mysql介绍" aria-hidden="true">#</a> A）MySQL介绍</h4><p><img src="'+vi+'" alt="image-20240909233506222"></p><p><img src="'+Di+'" alt="image-20240909233546949"></p><p><img src="'+Qi+'" alt="image-20240909233652582"></p><h4 id="b-安装" tabindex="-1"><a class="header-anchor" href="#b-安装" aria-hidden="true">#</a> B）安装</h4><p><img src="'+Mi+'" alt="image-20240910100637143"></p><p><img src="'+Ni+'" alt="image-20240910100658436"></p><p>安装MySQL，操作如下:</p><p><img src="'+Ui+'" alt="image-20240910102220399"></p><p><img src="'+Hi+'" alt="image-20240910103047298"></p><p><img src="'+Oi+'" alt="image-20240910103219430"></p><p><img src="'+Fi+'" alt="image-20240910103347014"></p><p><img src="'+Ti+'" alt="image-20240910103558763"></p><p><img src="'+Gi+'" alt="image-20240910103845337"></p><p><img src="'+Wi+'" alt="image-20240910103948501"></p><p><img src="'+Pi+'" alt="image-20240910104117381"></p><h4 id="c-启动" tabindex="-1"><a class="header-anchor" href="#c-启动" aria-hidden="true">#</a> C）启动</h4><p><img src="'+Ki+'" alt="image-20240910104410681"></p><p>在刚才的安装步骤中已经成功启动了MySQL，打开任务管理器，在服务选项中查看是否已经启动，操作如下：</p><p><img src="'+Yi+'" alt="image-20240910104450904"></p><h3 id="_2-mysql连接" tabindex="-1"><a class="header-anchor" href="#_2-mysql连接" aria-hidden="true">#</a> 2，MySQL连接</h3><p><img src="'+zi+'" alt="image-20240910104644077"></p><p><img src="'+Ii+'" alt="image-20240910114921248"></p><p>第一步：打开MySQL命令行工具并输入密码，操作如下:</p><p><img src="'+Ji+'" alt="image-20240910104855236"></p><p>第二步：输入show databases; 查看当前存在的数据库。操作如下:</p><p><img src="'+Vi+'" alt="image-20240910105408465"></p><p>第三步：为什么终端不能执行mysql命令，解释如下：</p><p><img src="'+Xi+'" alt="image-20240910105712685"></p><p><img src="'+Zi+'" alt="image-20240910112525524"></p><p><img src="'+$i+'" alt="image-20240910112624361"></p><p><img src="'+as+'" alt="image-20240910113225388"></p><p>第四步：在当前电脑中配置mysql环境变量，操作如下:</p><p><img src="'+is+'" alt="image-20240910113531666"></p><p><img src="'+ss+'" alt="image-20240910113844085"></p><p><img src="'+es+'" alt="image-20240910114220726"></p><p>第五步：在终端中输入用户名和密码进入，操作如下:</p><p><img src="'+ps+'" alt="image-20240910115124078"></p><h3 id="_3-数据库基本操作" tabindex="-1"><a class="header-anchor" href="#_3-数据库基本操作" aria-hidden="true">#</a> 3，数据库基本操作</h3><p><img src="'+ts+'" alt="image-20240910115531909"></p><p><img src="'+gs+'" alt="image-20240910115553685"></p><p>第一步：创建一个新的数据库，操作如下:</p><p><img src="'+ns+'" alt="image-20240910120831380"></p><p>第二步：操作刚才创建的music_db数据库，如下：</p><p><img src="'+ms+'" alt="image-20240910122135319"></p><p>第三步：展示我们刚才创建的table，并且向里面插入数据，操作如下：</p><p><img src="'+rs+'" alt="image-20240910122827140"></p><h3 id="_4-gui工具的介绍" tabindex="-1"><a class="header-anchor" href="#_4-gui工具的介绍" aria-hidden="true">#</a> 4, GUI工具的介绍</h3><p><img src="'+cs+'" alt="image-20240910132618903"></p><p><img src="'+os+'" alt="image-20240910205703498"></p><p><img src="'+ds+'" alt="image-20240910205743643"></p><h3 id="_5-sql语句和数据类型" tabindex="-1"><a class="header-anchor" href="#_5-sql语句和数据类型" aria-hidden="true">#</a> 5，SQL语句和数据类型</h3><p><img src="'+_s+'" alt="image-20240910212101949"></p><p><img src="'+hs+'" alt="image-20240910212130685"></p><h3 id="_6-ddl语句" tabindex="-1"><a class="header-anchor" href="#_6-ddl语句" aria-hidden="true">#</a> 6，DDL语句</h3><p>DDL：对数据库或表进行操作，例如创建数据库或表等。</p><h4 id="a-数据库的操作" tabindex="-1"><a class="header-anchor" href="#a-数据库的操作" aria-hidden="true">#</a> A）数据库的操作</h4><p><img src="'+ls+'" alt="image-20240910214140820"></p><p><img src="'+xs+'" alt="image-20240910214205774"></p><p>第一步：新建查询，操作如下:</p><p><img src="'+bs+'" alt="image-20240910214534118"></p><p>第二步：书写sql语句并查询，操作如下：</p><p><img src="'+js+'" alt="image-20240910215051696"></p><p><img src="'+fs+'" alt="image-20240910215305799"></p><p><img src="'+us+'" alt="image-20240910215544581"></p><p><img src="'+ks+'" alt="image-20240910215616840"></p><p><img src="'+ys+'" alt="image-20240910220027658"></p><p><img src="'+qs+'" alt="image-20240910220232599"></p><p><img src="'+Bs+'" alt="image-20240910220319479"></p><p><img src="'+Ss+'" alt="image-20240910224826823"></p><h4 id="b-数据表的操作" tabindex="-1"><a class="header-anchor" href="#b-数据表的操作" aria-hidden="true">#</a> B）数据表的操作</h4><p><img src="'+ws+'" alt="image-20240911231526835"></p><p><img src="'+As+'" alt="image-20240911232041146"></p><p><img src="'+Ls+'" alt="image-20240911232211158"></p><p><img src="'+Es+'" alt="image-20240911232411705"></p><p><img src="'+Cs+'" alt="image-20240911233321125"></p><p><img src="'+Rs+'" alt="image-20240911233847387"></p><h4 id="c-数据类型" tabindex="-1"><a class="header-anchor" href="#c-数据类型" aria-hidden="true">#</a> C）数据类型</h4><p><img src="'+vs+'" alt="image-20240911231555491"></p><p><img src="'+Ds+'" alt="image-20240911231616061"></p><p><img src="'+Qs+'" alt="image-20240912080755789"></p><h4 id="d-表约束" tabindex="-1"><a class="header-anchor" href="#d-表约束" aria-hidden="true">#</a> D）表约束</h4><p><img src="'+Ms+'" alt="image-20240912080915462"></p><p><img src="'+Ns+'" alt="image-20240912085114095"></p><h4 id="e-创建表" tabindex="-1"><a class="header-anchor" href="#e-创建表" aria-hidden="true">#</a> E）创建表</h4><p><img src="'+Us+'" alt="image-20240912092635471"></p><p><img src="'+Hs+'" alt="image-20240912101338444"></p><p><img src="'+Os+'" alt="image-20240912101706825"></p><h4 id="f-修改表" tabindex="-1"><a class="header-anchor" href="#f-修改表" aria-hidden="true">#</a> F）修改表</h4><p><img src="'+Fs+'" alt="image-20240912092704064"></p><p><img src="'+Ts+'" alt="image-20240912102214205"></p><p><img src="'+Gs+'" alt="image-20240912103047198"></p><p><img src="'+Ws+'" alt="image-20240912103626804"></p><p><img src="'+Ps+'" alt="image-20240912111542972"></p><p><img src="'+Ks+'" alt="image-20240912111818296"></p><h3 id="_7-dml语句" tabindex="-1"><a class="header-anchor" href="#_7-dml语句" aria-hidden="true">#</a> 7，DML语句</h3><h4 id="a-创建新表-删除操作" tabindex="-1"><a class="header-anchor" href="#a-创建新表-删除操作" aria-hidden="true">#</a> A）创建新表-删除操作</h4><p><img src="'+Ys+'" alt="image-20240912092753379"></p><p>DML语句：对表中的数据进行操作。</p><p>创建一张新的表，操作如下：</p><p><img src="'+zs+'" alt="image-20240912133317240"></p><p><img src="'+Is+'" alt="image-20240912135025190"></p><h4 id="b-删除操作-更新操作" tabindex="-1"><a class="header-anchor" href="#b-删除操作-更新操作" aria-hidden="true">#</a> B）删除操作-更新操作</h4><p><img src="'+Js+'" alt="image-20240912112651762"></p><p><img src="'+Vs+'" alt="image-20240912142114368"></p><p><img src="'+Xs+'" alt="image-20240912142753293"></p><p><img src="'+Zs+'" alt="image-20240912145000468"></p><p><img src="'+$s+'" alt="image-20240912151939618"></p><h3 id="_8-dql语句" tabindex="-1"><a class="header-anchor" href="#_8-dql语句" aria-hidden="true">#</a> 8，DQL语句</h3><p><img src="'+ae+'" alt="image-20240912152117757"></p><p><img src="'+ie+'" alt="image-20240912174229376"></p><p>第一步：创建一个表products，操作如下:</p><p><img src="'+se+'" alt="image-20240912174431317"></p><p>第二步：在VsCode中引入复制好的代码，并安装mysql数据库</p><p><img src="'+ee+'" alt="image-20240912175019148"></p><p>第三步：执行代码，向数据库中插入数据，操作如下：</p><p><img src="'+pe+'" alt="image-20240912175918824"></p><h4 id="a-基本查询" tabindex="-1"><a class="header-anchor" href="#a-基本查询" aria-hidden="true">#</a> A）基本查询</h4><p><img src="'+te+'" alt="image-20240912180103151"></p><p><img src="'+ge+'" alt="image-20240912180620506"></p><p><img src="'+ne+'" alt="image-20240912181007695"></p><p><img src="'+me+'" alt="image-20240912181458594"></p><h4 id="b-where查询条件" tabindex="-1"><a class="header-anchor" href="#b-where查询条件" aria-hidden="true">#</a> B）where查询条件</h4><p><img src="'+re+'" alt="image-20240912180152436"></p><p>在开发中，我们希望根据条件来筛选我们的数据，这个时候我们要使用条件查询：条件查询会使用 WEHRE查询子句。</p><p><img src="'+ce+'" alt="image-20240912182141363"></p><p><img src="'+oe+'" alt="image-20240912182524784"></p><p><img src="'+de+'" alt="image-20240912182752027"></p><p><img src="'+_e+'" alt="image-20240912180221484"></p><p>WHERE的逻辑运算符，如下：</p><p><img src="'+he+'" alt="image-20240912184007303"></p><p><img src="'+le+'" alt="image-20240912184342368"></p><p><img src="'+xe+'" alt="image-20240912184803647"></p><p><img src="'+be+'" alt="image-20240912185232250"></p><p><img src="'+je+'" alt="image-20240912185326961"></p><p>模糊查询使用LIKE关键字，结合两个特殊的符号：</p><ul><li>%表示匹配任意个的任意字符；</li><li>_表示匹配一个的任意字符；</li></ul><p><img src="'+fe+'" alt="image-20240912190006091"></p><p><img src="'+ue+'" alt="image-20240912190356904"></p><p><img src="'+ke+'" alt="image-20240912190733977"></p><h4 id="c-查询结果排序" tabindex="-1"><a class="header-anchor" href="#c-查询结果排序" aria-hidden="true">#</a> C）查询结果排序</h4><p><img src="'+ye+'" alt="image-20240912190912100"></p><p>当我们查询到结果的时候，我们希望讲结果按照某种方式进行排序，这个时候使用的是ORDER BY。</p><p>ORDER BY有两个常用的值：</p><ul><li>ASC：升序排列；</li><li>DESC：降序排列；</li></ul><p>例如：SELECT * FROM <code>products</code> WHERE brand = &#39;华为&#39; or price &lt; 1000 ORDER BY price ASC;</p><p><img src="'+qe+'" alt="image-20240912191415586"></p><p><img src="'+Be+'" alt="image-20240912191522140"></p><h4 id="d-分页查询" tabindex="-1"><a class="header-anchor" href="#d-分页查询" aria-hidden="true">#</a> D）分页查询</h4><p><img src="'+Se+'" alt="image-20240912191710415"></p><p><img src="'+we+'" alt="image-20240912201640032"></p><p><img src="'+Ae+'" alt="image-20240912202128571"></p><p><img src="'+Le+'" alt="image-20240912202352638"></p><h2 id="十-mysql数据库高级特性" tabindex="-1"><a class="header-anchor" href="#十-mysql数据库高级特性" aria-hidden="true">#</a> 十，MySQL数据库高级特性</h2><h3 id="_1-聚合函数" tabindex="-1"><a class="header-anchor" href="#_1-聚合函数" aria-hidden="true">#</a> 1，聚合函数</h3><h4 id="a-基本使用-3" tabindex="-1"><a class="header-anchor" href="#a-基本使用-3" aria-hidden="true">#</a> A）基本使用</h4><p><img src="'+Ee+'" alt="image-20240912202727464"></p><p><img src="'+Ce+'" alt="image-20240912214959725"></p><p><img src="'+Re+'" alt="image-20240912215302464"></p><p><img src="'+ve+'" alt="image-20240912215529157"></p><p><img src="'+De+'" alt="image-20240912215821766"></p><p><img src="'+Qe+'" alt="image-20240912220143522"></p><p><img src="'+Me+'" alt="image-20240912220429355"></p><p><img src="'+Ne+'" alt="image-20240912220714145"></p><h4 id="b-groupby基本使用" tabindex="-1"><a class="header-anchor" href="#b-groupby基本使用" aria-hidden="true">#</a> B）GroupBy基本使用</h4><p><img src="'+Ue+'" alt="image-20240912202803686"></p><p>事实上聚合函数相当于默认将所有的数据分成了一组：</p><ul><li>我们前面使用avg还是max等，都是将所有的结果看成一组来计算的。</li><li>那么如果我们希望划分多个组：比如华为、苹果、小米等手机分别的平均价格，应该怎么来做呢？</li><li>这个时候我们可以使用 GROUP BY。</li></ul><p>GROUP BY通常和聚合函数一起使用：</p><ul><li>表示我们先对数据进行分组，再对每一组数据，进行聚合函数的计算。</li></ul><p><img src="'+He+'" alt="image-20240912222129406"></p><p><img src="'+Oe+'" alt="image-20240912222433638"></p><p><img src="'+Fe+'" alt="image-20240912222737385"></p><p><img src="'+Te+'" alt="image-20240912222937118"></p><p><img src="'+Ge+'" alt="image-20240912223137339"></p><h4 id="c-group约束条件" tabindex="-1"><a class="header-anchor" href="#c-group约束条件" aria-hidden="true">#</a> C）GROUP约束条件</h4><p><img src="'+We+'" alt="image-20240912223241286"></p><p>如果我们希望给Group By查询到的结果添加一些约束，那么我们可以使用：HAVING。比如：如果我们还希望筛选出平均价格在4000以下，并且平均分在7以上的品牌。</p><p><img src="'+Pe+'" alt="image-20240912223932544"></p><p><img src="'+Ke+'" alt="image-20240912224209164"></p><h3 id="_2-外键约束" tabindex="-1"><a class="header-anchor" href="#_2-外键约束" aria-hidden="true">#</a> 2，外键约束</h3><h4 id="a-创建多张表-插入数据" tabindex="-1"><a class="header-anchor" href="#a-创建多张表-插入数据" aria-hidden="true">#</a> A）创建多张表-插入数据</h4><p><img src="'+Ye+'" alt="image-20240912224424309"></p><p><img src="'+ze+'" alt="image-20240912224449235"></p><p><img src="'+Ie+'" alt="image-20240912224518345"></p><p>第一步：为brand单独创建一张表，操作如下：</p><p><img src="'+Je+'" alt="image-20240912230825686"></p><p>第二步：向刚才创建的brands表，插入一些数据。操作如下：</p><p><img src="'+Ve+'" alt="image-20240912231148393"></p><h4 id="b-创建外键" tabindex="-1"><a class="header-anchor" href="#b-创建外键" aria-hidden="true">#</a> B）创建外键</h4><p><img src="'+Xe+'" alt="image-20240912231727004"></p><p>第一步：在product表中插入一个新字段brand_id，操作如下：</p><p><img src="'+Ze+'" alt="image-20240912233819085"></p><p>第二步：验证brands_id是否已经成功被设置为外键。操作如下：</p><p><img src="'+$e+'" alt="image-20240912234522930"></p><p><img src="'+a1+'" alt="image-20240912235059591"></p><p>第三步：将products中的brand_id关联到brand中的id的值，操作如下:</p><p><img src="'+i1+'" alt="image-20240912235314898"></p><h4 id="c-外键更新" tabindex="-1"><a class="header-anchor" href="#c-外键更新" aria-hidden="true">#</a> C）外键更新</h4><p><img src="'+s1+'" alt="image-20240913095707347"></p><p>第一步：展示创建products表的语句，操作如下:</p><p><img src="'+e1+'" alt="image-20240913101651802"></p><p>第二步：删除外键，操作如下：</p><p><img src="'+p1+'" alt="image-20240913101915691"></p><p>第三步：重新创建一个外键，操作如下:</p><p><img src="'+t1+'" alt="image-20240913102350303"></p><p>第四步：修改外键的引用，并查看结果。操作如下:</p><p><img src="'+g1+'" alt="image-20240913103202299"></p><p><img src="'+n1+'" alt="image-20240913103434454"></p><h3 id="_3-多表查询" tabindex="-1"><a class="header-anchor" href="#_3-多表查询" aria-hidden="true">#</a> 3，多表查询</h3><p><img src="'+m1+'" alt="image-20240913104203146"></p><h4 id="a-默认结果" tabindex="-1"><a class="header-anchor" href="#a-默认结果" aria-hidden="true">#</a> A）默认结果</h4><p><img src="'+r1+'" alt="image-20240913104224231"></p><p><img src="'+c1+'" alt="image-20240913110403210"></p><p><img src="'+o1+'" alt="image-20240913110659351"></p><p>因此我们在实际开发中，并不会使用上面的方式进行多表查询。</p><h3 id="_4-表和表间的连接方式" tabindex="-1"><a class="header-anchor" href="#_4-表和表间的连接方式" aria-hidden="true">#</a> 4，表和表间的连接方式</h3><p><img src="'+d1+'" alt="image-20240913111006036"></p><h4 id="a-左连接" tabindex="-1"><a class="header-anchor" href="#a-左连接" aria-hidden="true">#</a> A）左连接</h4><p><img src="'+_1+'" alt="image-20240913111101438"></p><p>如果我们希望获取到的是左边所有的数据（以左表为主）：</p><ul><li>这个时候就表示无论左边的表是否有对应的brand_id的值对应右边表的id，左边的数据都会被查询出来；</li><li>这个也是开发中使用最多的情况，它的完整写法是LEFT [OUTER] JOIN，但是OUTER可以省略的；</li></ul><p><img src="'+h1+'" alt="image-20240913112356132"></p><p><img src="'+l1+'" alt="image-20240913112712348"></p><h4 id="b-右连接" tabindex="-1"><a class="header-anchor" href="#b-右连接" aria-hidden="true">#</a> B）右连接</h4><p><img src="'+x1+'" alt="image-20240913111134073"></p><p><img src="'+b1+'" alt="image-20240913115359768"></p><p><img src="'+j1+'" alt="image-20240913120057973"></p><h4 id="c-内连接" tabindex="-1"><a class="header-anchor" href="#c-内连接" aria-hidden="true">#</a> C）内连接</h4><p><img src="'+f1+'" alt="image-20240913111211600"></p><p><img src="'+u1+'" alt="image-20240913120959381"></p><h4 id="d-全连接" tabindex="-1"><a class="header-anchor" href="#d-全连接" aria-hidden="true">#</a> D）全连接</h4><p><img src="'+k1+'" alt="image-20240913111238156"></p><p><img src="'+y1+'" alt="image-20240913121709538"></p><h3 id="_5-多对多关系的关系表" tabindex="-1"><a class="header-anchor" href="#_5-多对多关系的关系表" aria-hidden="true">#</a> 5，多对多关系的关系表</h3><h4 id="a-多对多关系" tabindex="-1"><a class="header-anchor" href="#a-多对多关系" aria-hidden="true">#</a> A）多对多关系</h4><p><img src="'+q1+'" alt="多对多关系的表结构"></p><h4 id="b-多对多关系数据准备" tabindex="-1"><a class="header-anchor" href="#b-多对多关系数据准备" aria-hidden="true">#</a> B）多对多关系数据准备</h4><p><img src="'+B1+'" alt="image-20240913121828713"></p><p>第一步：创建学生表，并插入多条数据，操作如下：</p><p><img src="'+S1+'" alt="image-20240913142201208"></p><p>第二步：插入多条学生信息，操作如下：</p><p><img src="'+w1+'" alt="image-20240913142428149"></p><p>第三步：创建课程表，操作如下：</p><p><img src="'+A1+'" alt="image-20240913143020520"></p><p>第四步：向课程表中插入多条课程信息，操作如下：</p><p><img src="'+L1+'" alt="image-20240913143329326"></p><h4 id="c-创建关系表" tabindex="-1"><a class="header-anchor" href="#c-创建关系表" aria-hidden="true">#</a> C）创建关系表</h4><p><img src="'+E1+'" alt="image-20240913121856684"></p><p>第一步：创建关系表，操作如下:</p><p><img src="'+C1+'" alt="image-20240913151037271"></p><p>第二步：插入多条数据，操作如下：</p><p><img src="'+R1+'" alt="image-20240913151612313"></p><h3 id="_6-多对多数据查询语句" tabindex="-1"><a class="header-anchor" href="#_6-多对多数据查询语句" aria-hidden="true">#</a> 6，多对多数据查询语句</h3><p><img src="'+v1+'" alt="image-20240913121937019"></p><p>查询所有有选课学生的所有课程，操作如下:</p><p><img src="'+D1+'" alt="image-20240913221415390"></p><p>使用别名，操作如下：</p><p><img src="'+Q1+'" alt="image-20240913221826464"></p><p>所有的学生(不管有没有选课)的选课情况，操作如下：</p><p><img src="'+M1+'" alt="image-20240913222255735"></p><p><img src="'+N1+'" alt="image-20240913122004231"></p><p>查询单个学生的选课情况，操作如下：</p><p><img src="'+U1+'" alt="image-20240913222641483"></p><p>查询lily的选课情况，不要使用内连接，使用内连接展示的数据为空，因为lily没有选择课程。最好使用左连接，操作如下：</p><p><img src="'+H1+'" alt="image-20240913223042183"></p><p><img src="'+O1+'" alt="image-20240913223203789"></p><p><img src="'+F1+'" alt="image-20240913122040591"></p><p>查询哪些学生没有选择和哪些课程没有被选择，操作如下:</p><p><img src="'+T1+'" alt="image-20240913225259066"></p><p>查询哪些课程没有被学生选择，操作如下：</p><p><img src="'+G1+'" alt="image-20240913225828138"></p><h2 id="十一-node中使用mysql" tabindex="-1"><a class="header-anchor" href="#十一-node中使用mysql" aria-hidden="true">#</a> 十一，Node中使用MySQL</h2><h3 id="_1-mysql查询对象" tabindex="-1"><a class="header-anchor" href="#_1-mysql查询对象" aria-hidden="true">#</a> 1，MySQL查询对象</h3><p><img src="'+W1+'" alt="image-20240913230301713"></p><p><img src="'+P1+'" alt="image-20240913230420067"></p><p><img src="'+K1+'" alt="image-20240914145744598"></p><h3 id="_2-mysql查询数组" tabindex="-1"><a class="header-anchor" href="#_2-mysql查询数组" aria-hidden="true">#</a> 2，MySQL查询数组</h3><p><img src="'+Y1+'" alt="image-20240913230444530"></p><p>多对多直接查询，操作如下：</p><p><img src="'+z1+'" alt="image-20240914172900905"></p><p><img src="'+I1+'" alt="image-20240914173534116"></p><h3 id="_3-mysql2库介绍使用" tabindex="-1"><a class="header-anchor" href="#_3-mysql2库介绍使用" aria-hidden="true">#</a> 3，mysql2库介绍使用</h3><p><img src="'+J1+'" alt="image-20240913230512266"></p><p><img src="'+V1+'" alt="image-20240913230555613"></p><p><img src="'+X1+'" alt="image-20240914232723895"></p><h3 id="_4-mysql2预处理语句" tabindex="-1"><a class="header-anchor" href="#_4-mysql2预处理语句" aria-hidden="true">#</a> 4，mysql2预处理语句</h3><p><img src="'+Z1+'" alt="image-20240913230635505"></p><p><img src="'+$1+'" alt="image-20240915104252072"></p><h3 id="_5-mysql2连接池使用" tabindex="-1"><a class="header-anchor" href="#_5-mysql2连接池使用" aria-hidden="true">#</a> 5，mysql2连接池使用</h3><p><img src="'+ap+'" alt="image-20240913230656007"></p><p><img src="'+ip+'" alt="image-20240915183721586"></p><h3 id="_6-mysql2的promise" tabindex="-1"><a class="header-anchor" href="#_6-mysql2的promise" aria-hidden="true">#</a> 6，mysql2的Promise</h3><p><img src="'+sp+'" alt="image-20240913230719655"></p><p><img src="'+ep+'" alt="image-20240915201724622"></p><h2 id="十二-coderhub" tabindex="-1"><a class="header-anchor" href="#十二-coderhub" aria-hidden="true">#</a> 十二，CoderHub</h2><h3 id="_1-项目介绍和搭建" tabindex="-1"><a class="header-anchor" href="#_1-项目介绍和搭建" aria-hidden="true">#</a> 1，项目介绍和搭建</h3><p><img src="'+pp+'" alt="image-20240915205144108"></p><p><img src="'+tp+'" alt="image-20240915205207442"></p><h4 id="a-创建和启动服务器" tabindex="-1"><a class="header-anchor" href="#a-创建和启动服务器" aria-hidden="true">#</a> A）创建和启动服务器</h4><ul><li>基于koa创建app；</li><li>启动服务器；</li></ul><p>第一步：在项目根目录初始化一个package.json文件，操作如下：</p><p><img src="'+gp+'" alt="image-20240915212128056"></p><p>第二步：在package.json文件中，添加一个start脚本，方便我们启动项目，操作如下：</p><p><img src="'+np+'" alt="image-20240915212326244"></p><p>第三步：安装koa和@koa/router、bodyparser，操作如下：</p><p><img src="'+mp+'" alt="image-20240915213441072"></p><p>第四步：搭建基本的服务器代码并修改脚本，操作如下：</p><p><img src="'+rp+'" alt="image-20240915213805611"></p><p>第五步：编写普通中间件并发送请求进行测试，操作如下：</p><p><img src="'+cp+'" alt="image-20240915214048775"></p><p>第六步，引入koa路由并使用，操作如下：</p><p><img src="'+op+'" alt="image-20240915214751608"></p><h4 id="b-配置环境变量" tabindex="-1"><a class="header-anchor" href="#b-配置环境变量" aria-hidden="true">#</a> B）配置环境变量</h4><p>应用配置信息写到环境变量：</p><ul><li>编写.env文件；</li><li>通过dotenv加载配置的变量；</li></ul><p>第一步：对我们项目使用到的常量进行抽取，例如：端口号。操作如下：</p><p><img src="'+dp+'" alt="image-20240915220646321"></p><p>第二步：配置环境变量对常量进行一步抽取，操作如下：</p><p><img src="'+_p+'" alt="image-20240915222853671"></p><h4 id="c-划分目录结构" tabindex="-1"><a class="header-anchor" href="#c-划分目录结构" aria-hidden="true">#</a> C）划分目录结构</h4><p>目录结构的划分：</p><ul><li>按照功能模块划分；</li><li>按照业务模块划分；</li></ul><p>第一步：创建router文件夹，将不同模块的路由抽离到该文件夹中。例如：将users模块路由抽离，操作如下：</p><p><img src="'+hp+'" alt="image-20240915224329769"></p><p>第二步：因为我们需要使用app注册全局的中间件，例如：解析json格式和错误处理中间件。因此我们也要对app进行抽离。操作如下：</p><p><img src="'+lp+'" alt="image-20240915225518551"></p><h3 id="_2-注册接口的逻辑" tabindex="-1"><a class="header-anchor" href="#_2-注册接口的逻辑" aria-hidden="true">#</a> 2，注册接口的逻辑</h3><p><img src="'+xp+'" alt="image-20240915205244046"></p><p><img src="'+bp+'" alt="image-20240915205324368"></p><p>第一步：为了在postman中每次初始化都需要设置baseURL，因此我们可以使用环境变量。操作如下:</p><p><img src="'+jp+'" alt="image-20240916120503217"></p><p><img src="'+fp+'" alt="image-20240916120613011"></p><p>第二步：搭建用户注册接口基本结构，并测试。操作如下：</p><p><img src="'+up+'" alt="image-20240916121349925"></p><p>第三步：因为我们后续在用户注册接口中会书写大量的逻辑代码，因此我们将该接口的中间件抽取到单独文件中。操作如下：</p><p><img src="'+kp+'" alt="image-20240916122436173"></p><p>第四步：获取到用户信息后，需要存储到数据库中。因此操作数据库也是一个比较复杂的操作，因此我们也需要对其抽离。操作如下:</p><p><img src="'+yp+'" alt="image-20240916123253198"></p><p><img src="'+qp+'" alt="image-20240916123445300"></p><p>第五步：创建和连接数据库并进行测试，操作如下：</p><p><img src="'+Bp+'" alt="image-20240916131309532"></p><p><img src="'+Sp+'" alt="image-20240916131702819"></p><p>第六步：创建用户表，插入一条用户信息。操作如下：</p><p><img src="'+wp+'" alt="image-20240916132845197"></p><p><img src="'+Ap+'" alt="image-20240916141319159"></p><p><img src="'+Lp+'" alt="image-20240916141433309"></p><p><img src="'+Ep+'" alt="image-20240916154431987"></p><p>第七步：完善用户注册的判断逻辑。操作如下：</p><p><img src="'+Cp+'" alt="image-20240916164848251"></p><p><img src="'+Rp+'" alt="image-20240916164800178"></p><p>第八步：中间件userController.create中的逻辑代码越来越多，因此我们需要将判断用户注册的逻辑抽离到单独的的中间件中。操作如下:</p><p><img src="'+vp+'" alt="image-20240916182625378"></p><p><img src="'+Dp+'" alt="image-20240916182946912"></p><p>第九步：我们将错误处理逻辑抽离到单独的中间件中，操作如下：</p><p><img src="'+Qp+'" alt="image-20240916184110429"></p><p><img src="'+Mp+'" alt="image-20240916184238800"></p><p><img src="'+Np+'" alt="image-20240916185131746"></p><p><img src="'+Up+'" alt="image-20240916185229061"></p><p>第十步：将以明文存储到数据库中的用户密码，加密后再进行存储。操作如下：</p><p><img src="'+Hp+'" alt="image-20240916220207654"></p><p><img src="'+Op+'" alt="image-20240916224336569"></p><p><img src="'+Fp+'" alt="image-20240916224527997"></p><h3 id="_3-登录用户的凭证" tabindex="-1"><a class="header-anchor" href="#_3-登录用户的凭证" aria-hidden="true">#</a> 3，登录用户的凭证</h3><p><img src="'+Tp+'" alt="image-20240915205435068"></p><h3 id="_4-cookie" tabindex="-1"><a class="header-anchor" href="#_4-cookie" aria-hidden="true">#</a> 4，Cookie</h3><h4 id="a-什么是cookie" tabindex="-1"><a class="header-anchor" href="#a-什么是cookie" aria-hidden="true">#</a> A）什么是Cookie</h4><p><img src="'+Gp+'" alt="image-20240915205454969"></p><h4 id="b-常见属性" tabindex="-1"><a class="header-anchor" href="#b-常见属性" aria-hidden="true">#</a> B）常见属性</h4><p><img src="'+Wp+'" alt="image-20240915205534668"></p><h4 id="c-客户端设置cookie" tabindex="-1"><a class="header-anchor" href="#c-客户端设置cookie" aria-hidden="true">#</a> C）客户端设置cookie</h4><p><img src="'+Pp+'" alt="image-20240915205554909"><img src="'+Kp+'" alt="image-20240916232836495"></p><p><img src="'+Yp+'" alt="image-20240916232929592"></p><p><img src="'+zp+'" alt="image-20240917072754731"></p><h4 id="d-服务器设置cookie" tabindex="-1"><a class="header-anchor" href="#d-服务器设置cookie" aria-hidden="true">#</a> D）服务器设置cookie</h4><p><img src="'+Ip+'" alt="image-20240915205615565"></p><p><img src="'+Jp+'" alt="image-20240917081743930"></p><p><img src="'+Vp+'" alt="image-20240917081924860"></p><h3 id="_5-session" tabindex="-1"><a class="header-anchor" href="#_5-session" aria-hidden="true">#</a> 5，Session</h3><p><img src="'+Xp+'" alt="image-20240915205634239"></p><p><img src="'+Zp+'" alt="image-20240917094407698"></p><p><img src="'+$p+'" alt="image-20240917094431579"></p><h3 id="_6-token" tabindex="-1"><a class="header-anchor" href="#_6-token" aria-hidden="true">#</a> 6，Token</h3><h4 id="a-认识token" tabindex="-1"><a class="header-anchor" href="#a-认识token" aria-hidden="true">#</a> A）认识token</h4><p><img src="'+at+'" alt="image-20240915205654190"></p><h4 id="b-实现token" tabindex="-1"><a class="header-anchor" href="#b-实现token" aria-hidden="true">#</a> B）实现token</h4><p><img src="'+it+'" alt="image-20240915205713527"></p><h4 id="c-使用token" tabindex="-1"><a class="header-anchor" href="#c-使用token" aria-hidden="true">#</a> C）使用token</h4><p><img src="'+st+'" alt="image-20240915205744372"></p><p>第一步：安装jsonwebtoken库，操作如下：</p><p><img src="'+et+'" alt="image-20240917120408634"></p><p>第二步：引入jsonwebtoken并使用，操作如下：</p><p><img src="'+pt+'" alt="image-20240917123859713"></p><p>第三步：发生请求同时携带token，操作如下：</p><p><img src="'+tt+'" alt="image-20240917124159757"></p><p>第四步：处理token过期或被篡改的情况，操作如下：</p><p><img src="'+gt+'" alt="image-20240917125808359"></p><p><img src="'+nt+'" alt="image-20240917130145216"></p><p><img src="'+mt+'" alt="image-20240917130406677"></p><h3 id="_7-非对称加密" tabindex="-1"><a class="header-anchor" href="#_7-非对称加密" aria-hidden="true">#</a> 7，非对称加密</h3><p><img src="'+rt+'" alt="image-20240915225822650"></p><p><img src="'+ct+'" alt="image-20240915225846702"></p><p><img src="'+ot+'" alt="image-20240915225950256"></p><p>第一步：使用git bash生成公钥和私钥，操作如下： <img src="'+dt+'" alt="image-20240917194228546"></p><p><img src="'+_t+'" alt="image-20240917194341436"></p><p><img src="'+ht+'" alt="image-20240917191757499"></p><p><img src="'+lt+'" alt="image-20240917192116887"></p><p>第二步：使用私钥颁发令牌，使用公钥验证令牌。操作如下:</p><p><img src="'+xt+'" alt="image-20240917195217240"></p><p>第三步：发送请求获取token，发送请求验证token是否有效。操作如下：</p><p><img src="'+bt+'" alt="image-20240917195311197"></p><p><img src="'+jt+'" alt="image-20240917195402626"></p><h3 id="_8-登录接口的实现" tabindex="-1"><a class="header-anchor" href="#_8-登录接口的实现" aria-hidden="true">#</a> 8，登录接口的实现</h3><p><img src="'+ft+'" alt="image-20240915205358564"></p><p>第一步：先使用git对coderhub项目进行管理，并手动进行备份。操作如下：</p><p><img src="'+ut+'" alt="image-20240917203725745"></p><p><img src="'+kt+'" alt="image-20240917203925858"></p><p>第二步：在coderhub02项目中，npm i安装依赖。</p><p>第三步：配置登录接口使用的login路由，操作如下：</p><p><img src="'+yt+'" alt="image-20240917210405449"></p><p><img src="'+qt+'" alt="image-20240917210434652"></p><p>第三步：整理登录相关的判断逻辑，操作如下：</p><p><img src="'+Bt+'" alt="image-20240917212037020"></p><p>第四步：由于判断逻辑非常多，会造成该中间件代码难以阅读和维护。因此将该中间件抽离，操作如下：</p><p><img src="'+St+'" alt="image-20240917212700440"></p><p>第五步：在登录接口的中间件中，书写了大量逻辑判断(判断用户名或密码是否为空，判断该用户是否在数据库中存在，判断用户名和传递的密码是否一致等)。因此我们也需要将验证逻辑抽离到单独的中间件中。操作如下：</p><p><img src="'+wt+'" alt="image-20240917213637502"></p><p>第六步：完善判断用户名和密码的中间件代码路逻辑，操作如下：</p><p>1&gt; 判断用户名或密码是否为空</p><p><img src="'+At+'" alt="image-20240917214147597"></p><p>2&gt; 判断用户名是否在数据库中存在。</p><p><img src="'+Lt+'" alt="image-20240917215059517"></p><p><img src="'+Et+'" alt="image-20240917215235426"></p><p>3&gt; 对比在数据中查询到的用户密码和传递过来的密码是否一致。如果一致则通过验证。</p><p><img src="'+Ct+'" alt="image-20240917221134370"></p><p>第七步：用户名和密码通过所有判断逻辑后，签发给客户端token。搭建基本结构。操作如下：</p><p><img src="'+Rt+'" alt="image-20240917222126578"></p><p>第八步：完善生成token的逻辑代码，操作如下：</p><p>1&gt; 安装jsonwebtoken库，操作如下：</p><p><img src="'+vt+'" alt="image-20240917222350114"></p><p>2&gt; 在config/keys文件夹下，生成私钥和公钥。操作如下：</p><p><img src="'+Dt+'" alt="image-20240917223003537"></p><p><img src="'+Qt+'" alt="image-20240917223859858"></p><p><img src="'+Mt+'" alt="image-20240917230645204"></p><p><img src="'+Nt+'" alt="image-20240917231151904"></p><p><img src="'+Ut+'" alt="image-20240917232014419"></p><p>3&gt; 使用jwt，生成toekn。</p><p><img src="'+Ht+'" alt="image-20240917232254810"></p><p>第九步：编写一个需要携带token才能访问的test接口，并测试。操作如下：</p><p><img src="'+Ot+'" alt="image-20240918144500780"></p><p><img src="'+Ft+'" alt="image-20240918144948065"></p><p><img src="'+Tt+'" alt="image-20240918145244812"></p><p>第十步：因为实际项目中，请求很多接口都需要携带token。因此我们可以将验证token是否有效的逻辑抽离到单独的中间件中。操作如下：</p><p><img src="'+Gt+'" alt="image-20240918151637717"></p><p><img src="'+Wt+'" alt="image-20240918151752852"></p><p>第十一步：在postman中将登录接口获得的token保存为一个全局变量。方便其他接口使用。操作如下：</p><p><img src="'+Pt+'" alt="image-20240918153605075"></p><p><img src="'+Kt+'" alt="image-20240918153745290"></p><h3 id="_9-动态注册所有路由" tabindex="-1"><a class="header-anchor" href="#_9-动态注册所有路由" aria-hidden="true">#</a> 9，动态注册所有路由</h3><p>对于router文件夹下以router.js结尾的路由对象，我们都需要在app/index.js文件中导入并通过use方法进行注册。如下：</p><p><img src="'+Yt+'" alt="image-20240918155717656"></p><p>我们可以在router文件夹下创建index.js文件并编写自动化程序，将router文件夹下以router.js结尾的路由对象自动注册。操作如下：</p><p><img src="'+zt+'" alt="image-20240918162650244"></p><p>postman中测试，操作如下：</p><p><img src="'+It+'" alt="image-20240918162800511"></p><h3 id="_10-发表动态" tabindex="-1"><a class="header-anchor" href="#_10-发表动态" aria-hidden="true">#</a> 10，发表动态</h3><p><img src="'+Jt+'" alt="image-20240915230014502"></p><p>第一步：创建新的表moment，操作如下：</p><p><img src="'+Vt+'" alt="image-20240918181015245"></p><p>第二步：搭建/moment接口的基本结构，并测试。操作如下：</p><p><img src="'+Xt+'" alt="image-20240918182344620"></p><p><img src="'+Zt+'" alt="image-20240918182548103"></p><p>第三步：由于接口/moment第二个中间件中后续会书写大量逻辑代码。因此对其抽离到单独的文件中。操作如下：</p><p><img src="'+$t+'" alt="image-20240918183434816"></p><p>第四步：完善/moment接口中创建用户的动态的中间件逻辑。操作如下：</p><p><img src="'+ag+'" alt="image-20240918185748449"></p><p>第五步：发送请求，查看数据库中存储的用户动态。操作如下：</p><p><img src="'+ig+'" alt="image-20240918185952171"></p><h3 id="_11-查询动态" tabindex="-1"><a class="header-anchor" href="#_11-查询动态" aria-hidden="true">#</a> 11，查询动态</h3><p><img src="'+sg+'" alt="image-20240915230039048"></p><h4 id="a-获取所有动态" tabindex="-1"><a class="header-anchor" href="#a-获取所有动态" aria-hidden="true">#</a> A）获取所有动态</h4><p>第一步：插入数据，保证表user中，id为1、2、3、4的用户存在。操作如下：</p><p><img src="'+eg+'" alt="image-20240918215321533"></p><p>第二步：在表moment中插入多条动态，操作如下：</p><p><img src="'+pg+'" alt="image-20240918215541414"></p><p>第三步：开发查询动态接口，获取所有动态列表数据。操作如下：</p><p><img src="'+tg+'" alt="image-20240918220729613"></p><p>第四步：优化获取查询动态接口，在实际项目中，不会一次性获取所有数据。该接口会接收两个参数：offset和size。offset是指偏移多少条数据。size是指一次请求多少条数据。操作如下：</p><p><img src="'+gg+'" alt="image-20240918222611273"></p><p><img src="'+ng+'" alt="image-20240918222746187"></p><p>第五步：如果客户请求动态数据时，没有传入offset和size。我们也应该处理这种情况。操作如下：</p><p><img src="'+mg+'" alt="image-20240918223041833"></p><p><img src="'+rg+'" alt="image-20240918223128311"></p><p>第六步：客户端获取到的动态数据，并不能知道每条动态由哪个作者发布。因此我们需要通过左连接使用多表查询。操作如下：</p><p><img src="'+cg+'" alt="image-20240918224255050"></p><p><img src="'+og+'" alt="image-20240918225100826"></p><p>第七步：将上一步写好的SQL语句到替换之前的，操作如下：</p><p><img src="'+dg+'" alt="image-20240918225643625"></p><h4 id="b-获取某条动态" tabindex="-1"><a class="header-anchor" href="#b-获取某条动态" aria-hidden="true">#</a> B）获取某条动态</h4><p>第一步：定义获取一条动态接口，操作如下：</p><p><img src="'+_g+'" alt="image-20240918231446809"></p><p>第二步：将获取某条动态详情的逻辑抽离到单独的中间件detail中。操作如下：</p><p><img src="'+hg+'" alt="image-20240918231807011"></p><p>第三步：定于SQL语句，操作数据库。根据传递过来的用户id，在数据库中查询该条动态详情并返回。操作如下：</p><p><img src="'+lg+'" alt="image-20240918232207051"></p><h3 id="_12-修改动态" tabindex="-1"><a class="header-anchor" href="#_12-修改动态" aria-hidden="true">#</a> 12，修改动态</h3><p>第一步：定义修改状态的接口和更新状态的中间件update。操作如下：</p><p><img src="'+xg+'" alt="image-20240919103400665"></p><p>第二步：在update中间件中，操作数据库修改动态。操作如下：</p><p><img src="'+bg+'" alt="image-20240919103635665"></p><p>第三步：发送请求修改某一条状态，并在数据库中查看是否修改成功。操作如下：</p><p><img src="'+jg+'" alt="image-20240919103958846"></p><p>第四步：现在存在一个问题，一个用户可以随意修改其他用户发表的动态，这是不合理的。效果如下：</p><p><img src="'+fg+'" alt="image-20240919113539827"></p><p><img src="'+ug+'" alt="image-20240919113942850"></p><p>第五步：封装一个验证权限的中间件，只有当登录用户的id和动态的user_id相等时，才可以修改对应的动态内容。操作如下：</p><p><img src="'+kg+'" alt="image-20240919131402531"></p><p><img src="'+yg+'" alt="image-20240919131953147"></p><p><img src="'+qg+'" alt="image-20240919132300068"></p><p><img src="'+Bg+'" alt="image-20240919132733488"></p><p><img src="'+Sg+'" alt="image-20240919132840144"></p><p><img src="'+wg+'" alt="image-20240919133118700"></p><h3 id="_13-删除动态" tabindex="-1"><a class="header-anchor" href="#_13-删除动态" aria-hidden="true">#</a> 13，删除动态</h3><p><img src="'+Ag+'" alt="image-20240919133317057"></p><p>定义删除内容的接口</p><ul><li>定义路由接口;</li><li>验证用户登录;</li><li>验证用户权限;</li><li>Controller和Service的处理</li></ul><p>第一步：定义删除动态接口，操作如下：</p><p><img src="'+Lg+'" alt="image-20240919153652765"></p><p>第二步：使用中间件验证用户身份和用户权限，操作如下：</p><p><img src="'+Eg+'" alt="image-20240919154055365"></p><p>第四步：编写中间件remove，实现删除某条动态。操作如下：</p><p><img src="'+Cg+'" alt="image-20240919154841035"></p><p>第五步：发送请求删除某条动态，并在数据库中查看效果。操作如下：</p><p><img src="'+Rg+'" alt="image-20240919155043854"></p><p><img src="'+vg+'" alt="image-20240919155159338"></p><h3 id="_14-优化权限验证" tabindex="-1"><a class="header-anchor" href="#_14-优化权限验证" aria-hidden="true">#</a> 14，优化权限验证</h3><p>我们之前编写处理权限的中间件，只能处理登录用户是否有处理moment的权限。我们希望该可以验证操作用户和评论权限。因此我们需要改造该中间件。</p><p>第一步：定义一个通用性强的权限验证中间件，不仅可以验证是否有权限操作动态，也可以验证操作用户和操作评论。如下：</p><p><img src="'+Dg+'" alt="image-20240919211650970"></p><p>第二步：定义一个checkResouce方法，在数据库检查该用户是否有权限，操作动态、操作用户、操作评论。代码如下：</p><p><img src="'+Qg+'" alt="image-20240919212032655"></p><p>第三步：修改动态，在数据库中查看效果如下：</p><p><img src="'+Mg+'" alt="image-20240919212508532"></p><h3 id="_15-发表评论" tabindex="-1"><a class="header-anchor" href="#_15-发表评论" aria-hidden="true">#</a> 15，发表评论</h3><p><img src="'+Ng+'" alt="image-20240915230105824"></p><p>创建新的表comment</p><p>定义发布评论内容的接口：</p><ul><li>定义路由接口；</li><li>验证用户登录；</li><li>Controller和Service中处理内容；</li></ul><h4 id="a-评论动态接口" tabindex="-1"><a class="header-anchor" href="#a-评论动态接口" aria-hidden="true">#</a> A）评论动态接口</h4><p>第一步：创建表comment，操作如下：</p><p><img src="'+Ug+'" alt="image-20240919222335907"></p><p>第二步：定义路由接口/comment，搭建基本结构。操作如下：</p><p><img src="'+Hg+'" alt="image-20240919223936596"></p><p><img src="'+Og+'" alt="image-20240919224037180"></p><p>第三步：定义CommentService.create方法，使用该方法操作数据库，添加一条评论。操作如下：</p><p><img src="'+Fg+'" alt="image-20240919225141652"></p><p>第四步：发送请求，添加一条评论。并在数据库中查看效果，操作如下：</p><p><img src="'+Tg+'" alt="image-20240919225446612"></p><h4 id="b-回复评论接口" tabindex="-1"><a class="header-anchor" href="#b-回复评论接口" aria-hidden="true">#</a> B）回复评论接口</h4><p>第一步：定义回复评论路由，操作如下：</p><p><img src="'+Gg+'" alt="image-20240919232101983"></p><p>第二步：定义中间件reply，操作如下：</p><p><img src="'+Wg+'" alt="image-20240919232428459"></p><p>第三步：定义reply方法从而操作数据库，添加一条评论的回复。操作如下：</p><p><img src="'+Pg+'" alt="image-20240919233651026"></p><p>第四步：发送请求并携带数据，在表comment中查看结果。操作如下：</p><p><img src="'+Kg+'" alt="image-20240919234039116"></p><h3 id="_16-删除评论" tabindex="-1"><a class="header-anchor" href="#_16-删除评论" aria-hidden="true">#</a> 16，删除评论</h3><p><img src="'+Yg+'" alt="image-20240915230128884"></p><h3 id="_17-查询评论" tabindex="-1"><a class="header-anchor" href="#_17-查询评论" aria-hidden="true">#</a> 17，查询评论</h3><h4 id="a-获取动态列表时获取评论个数" tabindex="-1"><a class="header-anchor" href="#a-获取动态列表时获取评论个数" aria-hidden="true">#</a> A）获取动态列表时获取评论个数</h4><p>第一步：使用子查询将两条SQL语句获取到的结果拼接到一起。操作如下：</p><p><img src="'+zg+'" alt="image-20240920133935056"></p><p><img src="'+Ig+'" alt="image-20240920145732200"></p><p><img src="'+Jg+'" alt="image-20240920150329359"></p><p><img src="'+Vg+'" alt="image-20240920150445121"></p><p>第二步：修改从数据库中获取动态列表SQL语句，操作如下：</p><p><img src="'+Xg+'" alt="image-20240920151030445"></p><p>第三步：请求动态列表，查看响应数据中是否包含评论数量。操作如下：</p><p><img src="'+Zg+'" alt="image-20240920151300778"></p><h4 id="b-查询动态详情时展示评论内容" tabindex="-1"><a class="header-anchor" href="#b-查询动态详情时展示评论内容" aria-hidden="true">#</a> B）查询动态详情时展示评论内容</h4><p>第一步：获取动态详情的同时，希望获取到评论列表数据。操作如下：</p><p><img src="'+$g+'" alt="image-20240920152150746"></p><p><img src="'+a4+'" alt="image-20240920172852686"></p><p>第二步：替换获取动态详情的SQL语句，操作如下：</p><p><img src="'+i4+'" alt="image-20240920173020729"></p><p>第三步：请求动态详情，查看响应数据。操作如下：</p><p><img src="'+s4+'" alt="image-20240920173216337"></p><p>第四步：再次使用左连接，在每一条评论对象中添加用户信息，我们就可以知道这条评论由哪个用户创建。操作如下：</p><p><img src="'+e4+'" alt="image-20240920174019017"></p><p>第五步：请求动态详情，查看结果。操作如下：</p><p><img src="'+p4+'" alt="image-20240920174429733"></p><h3 id="_18-动态的标签接口" tabindex="-1"><a class="header-anchor" href="#_18-动态的标签接口" aria-hidden="true">#</a> 18，动态的标签接口</h3><p><img src="'+t4+'" alt="image-20240915230151786"></p><h4 id="a-创建标签接口" tabindex="-1"><a class="header-anchor" href="#a-创建标签接口" aria-hidden="true">#</a> A）创建标签接口</h4><p>第一步：创建标签label表，操作如下：</p><p><img src="'+g4+'" alt="image-20240920175539566"></p><p>第二步：定义创建标签label接口，定义创建label中间件create。操作如下：</p><p><img src="'+n4+'" alt="image-20240920181157132"></p><p>第三步：定义create方法，操作数据库，在表label中创建一个标签。操作如下：</p><p><img src="'+m4+'" alt="image-20240920181423896"></p><p>第四步：请求label接口，创建一个标签。在数据库中查看效果如下：</p><p><img src="'+r4+'" alt="image-20240920181617791"></p><h4 id="b-获取标签接口" tabindex="-1"><a class="header-anchor" href="#b-获取标签接口" aria-hidden="true">#</a> B）获取标签接口</h4><p>第一步：创建获取标签接口的路由，操作如下：</p><p><img src="'+c4+'" alt="image-20240920191815852"></p><h3 id="_19-动态添加标签接口" tabindex="-1"><a class="header-anchor" href="#_19-动态添加标签接口" aria-hidden="true">#</a> 19，动态添加标签接口</h3><p>第一步：创建动态和标签多对多关系表，操作如下：</p><p><img src="'+o4+'" alt="image-20240920215048027"></p><p>第二步：定义为动态添加标签接口，操作如下：</p><p><img src="'+d4+'" alt="image-20240920225908471"></p><p><img src="'+_4+'" alt="image-20240920230040714"></p><p>第三步：编一个中间件verifyLabelExists，如果一个label已经存在那么获取id，如果不存在插入到表label中并获取插入之后的id。将lalbel对象组织成一个数组。通过ctx共享。操作如下：</p><p><img src="'+h4+'" alt="image-20240921075710182"></p><p>第四步：再编写一个中间件，为moment添加labels。将moment_id和label_id添加到moment_label关系表中操作如下：</p><p><img src="'+l4+'" alt="image-20240921134754653"></p><p><img src="'+x4+'" alt="image-20240921141139321"></p><p><img src="'+b4+'" alt="image-20240921141259157"></p><h3 id="_20-动态列表数据带有标签数量" tabindex="-1"><a class="header-anchor" href="#_20-动态列表数据带有标签数量" aria-hidden="true">#</a> 20，动态列表数据带有标签数量</h3><p>我们希望获取动态列表数据中每一条动态信息包含标签个数。</p><p><img src="'+j4+'" alt="image-20240921142910275"></p><p>第一步：那么我们就需要改造之前的SQL语句，操作如下：</p><p><img src="'+f4+'" alt="image-20240921144139313"></p><p><img src="'+u4+'" alt="image-20240921144319450"></p><p>第二步：请求动态列表数据，并查看响应的结果，操作如下：</p><p><img src="'+k4+'" alt="image-20240921144424501"></p><h3 id="_21-优化动态详情接口" tabindex="-1"><a class="header-anchor" href="#_21-优化动态详情接口" aria-hidden="true">#</a> 21，优化动态详情接口</h3><p>我们希望响应动态详情数据的同时，其中再包含标签对象信息。</p><h3 id="_22-头像上传接口" tabindex="-1"><a class="header-anchor" href="#_22-头像上传接口" aria-hidden="true">#</a> 22，头像上传接口</h3><p>第一步：创建router/file.router.js文件，用于单独定义上传头像接口。操作如下：</p><p><img src="'+y4+'" alt="image-20240922202424460"></p><p><img src="'+q4+'" alt="image-20240922202554763"></p><h3 id="_19-图片上传和存储" tabindex="-1"><a class="header-anchor" href="#_19-图片上传和存储" aria-hidden="true">#</a> 19，图片上传和存储</h3><p><img src="'+B4+'" alt="image-20240915230224160"></p><p><img src="'+S4+'" alt="image-20240915230239330"></p>',1164),L4=[A4];function E4(C4,R4){return i(),s("div",null,L4)}const D4=a(w4,[["render",E4],["__file","25.html.vue"]]);export{D4 as default};
